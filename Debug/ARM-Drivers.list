
ARM-Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001728  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001858  08001858  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001858  08001858  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001858  08001858  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001858  08001858  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001858  08001858  00011858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001860  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000004  08001864  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08001864  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f27  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000843  00000000  00000000  00022f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00023798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000240  00000000  00000000  00023a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000c93  00000000  00000000  00023c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001843  00000000  00000000  00024913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000062a4  00000000  00000000  00026156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002c3fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000900  00000000  00000000  0002c450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001840 	.word	0x08001840

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001840 	.word	0x08001840

08000170 <SYSTICK_Init>:

#include "CortexM3/SYSTICK_M3.h"


void SYSTICK_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/* Disable SYSTICK */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <SYSTICK_Init+0x30>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <SYSTICK_Init+0x30>)
 800017a:	f023 0301 	bic.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt*/
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <SYSTICK_Init+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <SYSTICK_Init+0x30>)
 8000186:	f043 0302 	orr.w	r3, r3, #2
 800018a:	6013      	str	r3, [r2, #0]
	/* Set Prescaler of the Systick*/
	if(SYSTICK_CLK_SRC_PRESCALER == SYSTICK_CLK_SRC_PRESCALER_1)
	{
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_CLKSOURCE_BIT_POS);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <SYSTICK_Init+0x30>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <SYSTICK_Init+0x30>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	6013      	str	r3, [r2, #0]
	}	
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	e000e010 	.word	0xe000e010

080001a4 <SYSTICK_DelayMs>:

void SYSTICK_DelayMs(uint32_t copy_u32DelayMs)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	/* Disable Systick */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 80001ac:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a19      	ldr	r2, [pc, #100]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001b2:	f023 0301 	bic.w	r3, r3, #1
 80001b6:	6013      	str	r3, [r2, #0]
	/* Set number of overflows */
	uint32_t overFlowCounter = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	60fb      	str	r3, [r7, #12]
	uint32_t totalOverFlows = copy_u32DelayMs;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	60bb      	str	r3, [r7, #8]
	/* Set Preload register value */
	SYSTICK_SetNumOfTicks(SYSTICK_ONE_MILLISECOND_TICKS);
 80001c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80001c4:	f000 f82a 	bl	800021c <SYSTICK_SetNumOfTicks>
	/* Disable Systick Interrupt */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 80001c8:	4b13      	ldr	r3, [pc, #76]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a12      	ldr	r2, [pc, #72]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ce:	f023 0302 	bic.w	r3, r3, #2
 80001d2:	6013      	str	r3, [r2, #0]
	/* Enable SYSTICK */
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 80001d4:	4b10      	ldr	r3, [pc, #64]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	6013      	str	r3, [r2, #0]

	/* Loop over number of overflows */
	while(overFlowCounter < totalOverFlows)
 80001e0:	e010      	b.n	8000204 <SYSTICK_DelayMs+0x60>
	{
		/* Wait till flag is raised */
		while(0 == GET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS));
 80001e2:	bf00      	nop
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	0c1b      	lsrs	r3, r3, #16
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f8      	beq.n	80001e4 <SYSTICK_DelayMs+0x40>
		/* Clear flag */
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS);
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a08      	ldr	r2, [pc, #32]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]
		/* Increment overflow counter */
		overFlowCounter++;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	3301      	adds	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]
	while(overFlowCounter < totalOverFlows)
 8000204:	68fa      	ldr	r2, [r7, #12]
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	429a      	cmp	r2, r3
 800020a:	d3ea      	bcc.n	80001e2 <SYSTICK_DelayMs+0x3e>
	}
	/* Wait till flag is raised */
}
 800020c:	bf00      	nop
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <SYSTICK_SetNumOfTicks>:

static void SYSTICK_SetNumOfTicks(uint32_t copy_u32SystickNumOfTicks)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	/* Set Number of ticks*/
	if(copy_u32SystickNumOfTicks > SYSTICK_MAX_PRE_COUNT)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800022a:	d904      	bls.n	8000236 <SYSTICK_SetNumOfTicks+0x1a>
	{
			SYSTICK->SYSRVR	= SYSTICK_MAX_PRE_COUNT;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <SYSTICK_SetNumOfTicks+0x2c>)
 800022e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000232:	605a      	str	r2, [r3, #4]
	}
	else
	{
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
	}
}
 8000234:	e002      	b.n	800023c <SYSTICK_SetNumOfTicks+0x20>
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
 8000236:	4a04      	ldr	r2, [pc, #16]	; (8000248 <SYSTICK_SetNumOfTicks+0x2c>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6053      	str	r3, [r2, #4]
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e010 	.word	0xe000e010

0800024c <SysTick_Handler>:
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
}


void SysTick_Handler()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	if(SYSTICK_OverflowCounter < SYSTICK_NumOfOverflows)
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <SysTick_Handler+0x2c>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <SysTick_Handler+0x30>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	429a      	cmp	r2, r3
 800025a:	d205      	bcs.n	8000268 <SysTick_Handler+0x1c>
	{
		SYSTICK_OverflowCounter++;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <SysTick_Handler+0x2c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <SysTick_Handler+0x2c>)
 8000264:	6013      	str	r3, [r2, #0]
	else
	{
		SYSTICK_OverflowCounter = 0;
		SYSTICK_CallBackFunction();
	}
 8000266:	e005      	b.n	8000274 <SysTick_Handler+0x28>
		SYSTICK_OverflowCounter = 0;
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <SysTick_Handler+0x2c>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
		SYSTICK_CallBackFunction();
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Handler+0x34>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4798      	blx	r3
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000020 	.word	0x20000020
 800027c:	20000028 	.word	0x20000028
 8000280:	20000024 	.word	0x20000024

08000284 <DMA_Init>:
 *   copy_dmaHandle: Pointer to the DMA handle structure containing the configuration.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if initialization is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Init(DMA_HandleTypeDef *copy_dmaHandle){
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

    HAL_Status hal_Status = HAL_OKAY;
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_dmaHandle)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d102      	bne.n	800029c <DMA_Init+0x18>
    {
        hal_Status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e09d      	b.n	80003d8 <DMA_Init+0x154>
    }
    else
    {
    switch(copy_dmaHandle->dma_Direction)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <DMA_Init+0x26>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d009      	beq.n	80002bc <DMA_Init+0x38>
 80002a8:	e015      	b.n	80002d6 <DMA_Init+0x52>
    {
        case DMA_READ_FROM_PERIPHERAL:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f022 0210 	bic.w	r2, r2, #16
 80002b8:	601a      	str	r2, [r3, #0]
            break;
 80002ba:	e00c      	b.n	80002d6 <DMA_Init+0x52>
        case DMA_READ_FROM_MEMORY:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f042 0210 	orr.w	r2, r2, #16
 80002ca:	601a      	str	r2, [r3, #0]
            copy_dmaHandle->dma_TypeDef->CCR = 1<<4;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2210      	movs	r2, #16
 80002d2:	601a      	str	r2, [r3, #0]
            break;
 80002d4:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mem2Mem)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7a1b      	ldrb	r3, [r3, #8]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d002      	beq.n	80002e4 <DMA_Init+0x60>
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d009      	beq.n	80002f6 <DMA_Init+0x72>
 80002e2:	e011      	b.n	8000308 <DMA_Init+0x84>
    {
        case DMA_MEM2MEM_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80002f2:	601a      	str	r2, [r3, #0]
            break;
 80002f4:	e008      	b.n	8000308 <DMA_Init+0x84>
        case DMA_MEM2MEM_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000304:	601a      	str	r2, [r3, #0]
            break;
 8000306:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mode)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	791b      	ldrb	r3, [r3, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00e      	beq.n	800032e <DMA_Init+0xaa>
 8000310:	2b01      	cmp	r3, #1
 8000312:	d116      	bne.n	8000342 <DMA_Init+0xbe>
    {
        case DMA_NON_CIRCULAR_MODE:
            if(copy_dmaHandle->dma_Mem2Mem != DMA_MEM2MEM_ENABLE )
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d011      	beq.n	8000340 <DMA_Init+0xbc>
            {
                CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f022 0220 	bic.w	r2, r2, #32
 800032a:	601a      	str	r2, [r3, #0]

            }
            break;
 800032c:	e008      	b.n	8000340 <DMA_Init+0xbc>
        case DMA_CIRCULAR_MODE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f042 0220 	orr.w	r2, r2, #32
 800033c:	601a      	str	r2, [r3, #0]
            break;
 800033e:	e000      	b.n	8000342 <DMA_Init+0xbe>
            break;
 8000340:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_MemIncMode)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	7a5b      	ldrb	r3, [r3, #9]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <DMA_Init+0xcc>
 800034a:	2b01      	cmp	r3, #1
 800034c:	d009      	beq.n	8000362 <DMA_Init+0xde>
 800034e:	e011      	b.n	8000374 <DMA_Init+0xf0>
    {
        case DMA_MEM_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800035e:	601a      	str	r2, [r3, #0]
            break;
 8000360:	e008      	b.n	8000374 <DMA_Init+0xf0>
        case DMA_MEM_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000370:	601a      	str	r2, [r3, #0]
            break;
 8000372:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_PeriphIncMode)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7a9b      	ldrb	r3, [r3, #10]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d002      	beq.n	8000382 <DMA_Init+0xfe>
 800037c:	2b01      	cmp	r3, #1
 800037e:	d009      	beq.n	8000394 <DMA_Init+0x110>
 8000380:	e011      	b.n	80003a6 <DMA_Init+0x122>
    {
        case DMA_PERIPH_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000390:	601a      	str	r2, [r3, #0]
            break;
 8000392:	e008      	b.n	80003a6 <DMA_Init+0x122>
        case DMA_PERIPH_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003a2:	601a      	str	r2, [r3, #0]
            break;
 80003a4:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Interrupt)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	7adb      	ldrb	r3, [r3, #11]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d002      	beq.n	80003b4 <DMA_Init+0x130>
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d009      	beq.n	80003c6 <DMA_Init+0x142>
 80003b2:	e011      	b.n	80003d8 <DMA_Init+0x154>
    {
        case DMA_INTERRUPT_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f042 0202 	orr.w	r2, r2, #2
 80003c2:	601a      	str	r2, [r3, #0]
            break;
 80003c4:	e008      	b.n	80003d8 <DMA_Init+0x154>
        case DMA_INTERRUPT_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f022 0202 	bic.w	r2, r2, #2
 80003d4:	601a      	str	r2, [r3, #0]
            break;
 80003d6:	bf00      	nop
    }
    }
    return hal_Status;
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <DMA_SetPeriphAddress>:
 *   copy_u32PeriphAddress: Pointer to the peripheral address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetPeriphAddress(DMA_HandleTypeDef *copy_dmaHandle,uint8_t *copy_u32PeriphAddress){
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80003ee:	2300      	movs	r3, #0
 80003f0:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32PeriphAddress || NULL == copy_dmaHandle )
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <DMA_SetPeriphAddress+0x1a>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d102      	bne.n	8000404 <DMA_SetPeriphAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e003      	b.n	800040c <DMA_SetPeriphAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CPAR = copy_u32PeriphAddress;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	609a      	str	r2, [r3, #8]
    }
    return hal_Status;
 800040c:	7bfb      	ldrb	r3, [r7, #15]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <DMA_SetMemoryAddress>:
 *   copy_u32MemAddress: Pointer to the memory address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetMemoryAddress(DMA_HandleTypeDef *copy_dmaHandle ,uint8_t *copy_u32MemAddress){
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000422:	2300      	movs	r3, #0
 8000424:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32MemAddress || NULL == copy_dmaHandle )
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d002      	beq.n	8000432 <DMA_SetMemoryAddress+0x1a>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d102      	bne.n	8000438 <DMA_SetMemoryAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 8000432:	2301      	movs	r3, #1
 8000434:	73fb      	strb	r3, [r7, #15]
 8000436:	e003      	b.n	8000440 <DMA_SetMemoryAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CMAR = copy_u32MemAddress;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	683a      	ldr	r2, [r7, #0]
 800043e:	60da      	str	r2, [r3, #12]
    }
    return hal_Status;
 8000440:	7bfb      	ldrb	r3, [r7, #15]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <DMA_Start>:
 *   hdma: Pointer to the DMA handle structure.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if starting the transfer is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Start(DMA_HandleTypeDef *hdma){
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d102      	bne.n	8000464 <DMA_Start+0x18>
    {
        hal_Status = HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e007      	b.n	8000474 <DMA_Start+0x28>
    }
    else
    {
        SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f042 0201 	orr.w	r2, r2, #1
 8000472:	601a      	str	r2, [r3, #0]
    }
    return hal_Status;
 8000474:	7bfb      	ldrb	r3, [r7, #15]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <DMA_Stop>:
 *
 * @param hdma: Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the specified DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_Stop(DMA_HandleTypeDef *hdma){
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 8000488:	2300      	movs	r3, #0
 800048a:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d102      	bne.n	8000498 <DMA_Stop+0x18>
    {
        hal_Status = HAL_ERROR;
 8000492:	2301      	movs	r3, #1
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	e007      	b.n	80004a8 <DMA_Stop+0x28>
    }
    else
    {
        CLR_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f022 0201 	bic.w	r2, r2, #1
 80004a6:	601a      	str	r2, [r3, #0]
    }
    return hal_Status;
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <DMA_SetDataCounter>:
 * @param copy_u32DataLength: The number of data items to be transferred by the DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_SetDataCounter(DMA_HandleTypeDef *hdma, uint32_t copy_u32DataLength)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80004be:	2300      	movs	r3, #0
 80004c0:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <DMA_SetDataCounter+0x1a>
    {
        hal_Status = HAL_ERROR;
 80004c8:	2301      	movs	r3, #1
 80004ca:	73fb      	strb	r3, [r7, #15]
 80004cc:	e003      	b.n	80004d6 <DMA_SetDataCounter+0x22>
    }
    else
    {
        hdma->dma_TypeDef->CNTDR = copy_u32DataLength;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	683a      	ldr	r2, [r7, #0]
 80004d4:	605a      	str	r2, [r3, #4]
        // SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
    }
    return hal_Status;
 80004d6:	7bfb      	ldrb	r3, [r7, #15]

}
 80004d8:	4618      	mov	r0, r3
 80004da:	3714      	adds	r7, #20
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
	...

080004e4 <DMA1_Channel1_IRQHandler>:
    return hal_Status;
}


void DMA1_Channel1_IRQHandler()
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    DMA1_1_CallbackFnPtr();
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <DMA1_Channel1_IRQHandler+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4798      	blx	r3
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	2000002c 	.word	0x2000002c

080004f8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler()
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    DMA1_2_CallbackFnPtr();
 80004fc:	4b02      	ldr	r3, [pc, #8]	; (8000508 <DMA1_Channel2_IRQHandler+0x10>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4798      	blx	r3
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000038 	.word	0x20000038

0800050c <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 8000510:	4b02      	ldr	r3, [pc, #8]	; (800051c <DMA1_Channel3_IRQHandler+0x10>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4798      	blx	r3
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000030 	.word	0x20000030

08000520 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 8000524:	4b02      	ldr	r3, [pc, #8]	; (8000530 <DMA1_Channel4_IRQHandler+0x10>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4798      	blx	r3
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000030 	.word	0x20000030

08000534 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler()
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler()
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler()
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler()
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	bc80      	pop	{r7}
 800056e:	4770      	bx	lr

08000570 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler()
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	/* Init SPI */
	hspi1.Instance = SPI1;
 8000580:	4b50      	ldr	r3, [pc, #320]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 8000582:	4a51      	ldr	r2, [pc, #324]	; (80006c8 <ILI9341_SPI_Init+0x14c>)
 8000584:	601a      	str	r2, [r3, #0]
	hspi1.Mode = SPI_MODE_MASTER;
 8000586:	4b4f      	ldr	r3, [pc, #316]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 8000588:	2200      	movs	r2, #0
 800058a:	711a      	strb	r2, [r3, #4]
	hspi1.DataSize = SPI_DATASIZE_8BIT;
 800058c:	4b4d      	ldr	r3, [pc, #308]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 800058e:	2200      	movs	r2, #0
 8000590:	745a      	strb	r2, [r3, #17]
	hspi1.CPOL = SPI_CPOL_LOW;
 8000592:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 8000594:	2200      	movs	r2, #0
 8000596:	719a      	strb	r2, [r3, #6]
	hspi1.CPHA = SPI_CPHA_1EDGE;
 8000598:	4b4a      	ldr	r3, [pc, #296]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 800059a:	2200      	movs	r2, #0
 800059c:	71da      	strb	r2, [r3, #7]
	hspi1.BaudRate = SPI_BAUDRATE_DIV2;
 800059e:	4b49      	ldr	r3, [pc, #292]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	715a      	strb	r2, [r3, #5]
	hspi1.NSS = SPI_NSS_DISABLE;
 80005a4:	4b47      	ldr	r3, [pc, #284]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	751a      	strb	r2, [r3, #20]
	hspi1.BiDir = SPI_BIDIR_DISABLE;
 80005aa:	4b46      	ldr	r3, [pc, #280]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	755a      	strb	r2, [r3, #21]
	hspi1.CRC = SPI_CRC_DISABLE;
 80005b0:	4b44      	ldr	r3, [pc, #272]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	759a      	strb	r2, [r3, #22]
	hspi1.FirstBit = SPI_LSB_FIRST;
 80005b6:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	741a      	strb	r2, [r3, #16]
	hspi1.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 80005bc:	4b41      	ldr	r3, [pc, #260]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005be:	2200      	movs	r2, #0
 80005c0:	75da      	strb	r2, [r3, #23]
	hspi1.CRCDir = SPI_CRC_TX;
 80005c2:	4b40      	ldr	r3, [pc, #256]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	761a      	strb	r2, [r3, #24]
	hspi1.SpiTxDma = SPI_TX_DMA_ENABLE;
 80005c8:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	749a      	strb	r2, [r3, #18]
	hspi1.SpiRxDma = SPI_RX_DMA_DISABLE;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	74da      	strb	r2, [r3, #19]

	/* Init GPIOs*/
	/* Init MOSI */
	SDA.GPIO_TypeDef = PORT_SPI1;
 80005d4:	4b3d      	ldr	r3, [pc, #244]	; (80006cc <ILI9341_SPI_Init+0x150>)
 80005d6:	4a3e      	ldr	r2, [pc, #248]	; (80006d0 <ILI9341_SPI_Init+0x154>)
 80005d8:	601a      	str	r2, [r3, #0]
	SDA.GPIO_Pin = MOSI_SPI1;
 80005da:	4b3c      	ldr	r3, [pc, #240]	; (80006cc <ILI9341_SPI_Init+0x150>)
 80005dc:	2207      	movs	r2, #7
 80005de:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80005e0:	4b3a      	ldr	r3, [pc, #232]	; (80006cc <ILI9341_SPI_Init+0x150>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <ILI9341_SPI_Init+0x150>)
 80005e8:	2205      	movs	r2, #5
 80005ea:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&SDA);
 80005ec:	4837      	ldr	r0, [pc, #220]	; (80006cc <ILI9341_SPI_Init+0x150>)
 80005ee:	f000 fb9b 	bl	8000d28 <GPIO_Init>

	/* Init SCK */
	SCK.GPIO_TypeDef = PORT_SPI1;
 80005f2:	4b38      	ldr	r3, [pc, #224]	; (80006d4 <ILI9341_SPI_Init+0x158>)
 80005f4:	4a36      	ldr	r2, [pc, #216]	; (80006d0 <ILI9341_SPI_Init+0x154>)
 80005f6:	601a      	str	r2, [r3, #0]
	SCK.GPIO_Pin = SCK_SPI1;
 80005f8:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <ILI9341_SPI_Init+0x158>)
 80005fa:	2205      	movs	r2, #5
 80005fc:	711a      	strb	r2, [r3, #4]
	SCK.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80005fe:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <ILI9341_SPI_Init+0x158>)
 8000600:	2202      	movs	r2, #2
 8000602:	715a      	strb	r2, [r3, #5]
	SCK.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <ILI9341_SPI_Init+0x158>)
 8000606:	2205      	movs	r2, #5
 8000608:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&SCK);
 800060a:	4832      	ldr	r0, [pc, #200]	; (80006d4 <ILI9341_SPI_Init+0x158>)
 800060c:	f000 fb8c 	bl	8000d28 <GPIO_Init>

	/* Init CS */
	CS.GPIO_TypeDef = PORT_SPI1;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <ILI9341_SPI_Init+0x15c>)
 8000612:	4a2f      	ldr	r2, [pc, #188]	; (80006d0 <ILI9341_SPI_Init+0x154>)
 8000614:	601a      	str	r2, [r3, #0]
	CS.GPIO_Pin = GPIO_PIN_3;
 8000616:	4b30      	ldr	r3, [pc, #192]	; (80006d8 <ILI9341_SPI_Init+0x15c>)
 8000618:	2203      	movs	r2, #3
 800061a:	711a      	strb	r2, [r3, #4]
	CS.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <ILI9341_SPI_Init+0x15c>)
 800061e:	2202      	movs	r2, #2
 8000620:	715a      	strb	r2, [r3, #5]
	CS.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <ILI9341_SPI_Init+0x15c>)
 8000624:	2203      	movs	r2, #3
 8000626:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&CS);
 8000628:	482b      	ldr	r0, [pc, #172]	; (80006d8 <ILI9341_SPI_Init+0x15c>)
 800062a:	f000 fb7d 	bl	8000d28 <GPIO_Init>

	/* Init DC */
	DC.GPIO_TypeDef = PORT_SPI1;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <ILI9341_SPI_Init+0x160>)
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <ILI9341_SPI_Init+0x154>)
 8000632:	601a      	str	r2, [r3, #0]
	DC.GPIO_Pin = GPIO_PIN_2;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <ILI9341_SPI_Init+0x160>)
 8000636:	2202      	movs	r2, #2
 8000638:	711a      	strb	r2, [r3, #4]
	DC.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 800063a:	4b28      	ldr	r3, [pc, #160]	; (80006dc <ILI9341_SPI_Init+0x160>)
 800063c:	2202      	movs	r2, #2
 800063e:	715a      	strb	r2, [r3, #5]
	DC.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <ILI9341_SPI_Init+0x160>)
 8000642:	2203      	movs	r2, #3
 8000644:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&DC);
 8000646:	4825      	ldr	r0, [pc, #148]	; (80006dc <ILI9341_SPI_Init+0x160>)
 8000648:	f000 fb6e 	bl	8000d28 <GPIO_Init>


	RST.GPIO_TypeDef = PORT_SPI1;
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <ILI9341_SPI_Init+0x164>)
 800064e:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <ILI9341_SPI_Init+0x154>)
 8000650:	601a      	str	r2, [r3, #0]
	RST.GPIO_Pin = GPIO_PIN_8;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <ILI9341_SPI_Init+0x164>)
 8000654:	2208      	movs	r2, #8
 8000656:	711a      	strb	r2, [r3, #4]
	RST.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <ILI9341_SPI_Init+0x164>)
 800065a:	2202      	movs	r2, #2
 800065c:	715a      	strb	r2, [r3, #5]
	RST.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <ILI9341_SPI_Init+0x164>)
 8000660:	2203      	movs	r2, #3
 8000662:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&RST);
 8000664:	481e      	ldr	r0, [pc, #120]	; (80006e0 <ILI9341_SPI_Init+0x164>)
 8000666:	f000 fb5f 	bl	8000d28 <GPIO_Init>

	/*Init DMA channels */
	spiTxdma.dma_TypeDef = DMA1_3;
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 800066c:	4a1e      	ldr	r2, [pc, #120]	; (80006e8 <ILI9341_SPI_Init+0x16c>)
 800066e:	601a      	str	r2, [r3, #0]
	spiTxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 8000672:	2201      	movs	r2, #1
 8000674:	721a      	strb	r2, [r3, #8]
	spiTxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 8000678:	2201      	movs	r2, #1
 800067a:	711a      	strb	r2, [r3, #4]
	spiTxdma.dma_Direction = DMA_READ_FROM_MEMORY;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 800067e:	2201      	movs	r2, #1
 8000680:	715a      	strb	r2, [r3, #5]
	spiTxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 8000684:	2200      	movs	r2, #0
 8000686:	719a      	strb	r2, [r3, #6]
	spiTxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 800068a:	2200      	movs	r2, #0
 800068c:	71da      	strb	r2, [r3, #7]
	spiTxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 800068e:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 8000690:	2200      	movs	r2, #0
 8000692:	725a      	strb	r2, [r3, #9]
	spiTxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 8000696:	2201      	movs	r2, #1
 8000698:	729a      	strb	r2, [r3, #10]
	spiTxdma.dma_Interrupt = DMA_INTERRUPT_DISABLE;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 800069c:	2201      	movs	r2, #1
 800069e:	72da      	strb	r2, [r3, #11]

	hspi1.txdma = &spiTxdma;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80006a2:	4a10      	ldr	r2, [pc, #64]	; (80006e4 <ILI9341_SPI_Init+0x168>)
 80006a4:	609a      	str	r2, [r3, #8]

	DMA_Init(hspi1.txdma);
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fdea 	bl	8000284 <DMA_Init>

	/* Init SPI */
	SPI_Init(&hspi1);
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <ILI9341_SPI_Init+0x148>)
 80006b2:	f000 fd93 	bl	80011dc <SPI_Init>
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80006b6:	2100      	movs	r1, #0
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <ILI9341_SPI_Init+0x15c>)
 80006ba:	f000 fd57 	bl	800116c <GPIO_WritePin>

// MX_SPI5_Init();																							//SPI INIT
// MX_GPIO_Init();																							//GPIO INIT
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000074 	.word	0x20000074
 80006c8:	40013000 	.word	0x40013000
 80006cc:	20000064 	.word	0x20000064
 80006d0:	40010800 	.word	0x40010800
 80006d4:	2000006c 	.word	0x2000006c
 80006d8:	20000090 	.word	0x20000090
 80006dc:	2000005c 	.word	0x2000005c
 80006e0:	20000054 	.word	0x20000054
 80006e4:	20000048 	.word	0x20000048
 80006e8:	40020030 	.word	0x40020030

080006ec <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(uint8_t SPI_Data)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
//HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
SPI_Transmit(&hspi1, &SPI_Data, 1);
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	2201      	movs	r2, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <ILI9341_SPI_Send+0x20>)
 80006fe:	f000 fedd 	bl	80014bc <SPI_Transmit>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000074 	.word	0x20000074

08000710 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 800071a:	2100      	movs	r1, #0
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <ILI9341_Write_Command+0x34>)
 800071e:	f000 fd25 	bl	800116c <GPIO_WritePin>
	GPIO_WritePin(&DC, GPIO_PIN_RESET);
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <ILI9341_Write_Command+0x38>)
 8000726:	f000 fd21 	bl	800116c <GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ffdd 	bl	80006ec <ILI9341_SPI_Send>
	GPIO_WritePin(&CS, GPIO_PIN_SET);
 8000732:	2101      	movs	r1, #1
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <ILI9341_Write_Command+0x34>)
 8000736:	f000 fd19 	bl	800116c <GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000090 	.word	0x20000090
 8000748:	2000005c 	.word	0x2000005c

0800074c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8000756:	2100      	movs	r1, #0
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <ILI9341_Write_Data+0x34>)
 800075a:	f000 fd07 	bl	800116c <GPIO_WritePin>
	GPIO_WritePin(&DC, GPIO_PIN_SET);
 800075e:	2101      	movs	r1, #1
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <ILI9341_Write_Data+0x38>)
 8000762:	f000 fd03 	bl	800116c <GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffbf 	bl	80006ec <ILI9341_SPI_Send>
	GPIO_WritePin(&CS, GPIO_PIN_SET);
 800076e:	2101      	movs	r1, #1
 8000770:	4803      	ldr	r0, [pc, #12]	; (8000780 <ILI9341_Write_Data+0x34>)
 8000772:	f000 fcfb 	bl	800116c <GPIO_WritePin>

// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
// ILI9341_SPI_Send(Data);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000090 	.word	0x20000090
 8000784:	2000005c 	.word	0x2000005c

08000788 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4604      	mov	r4, r0
 8000790:	4608      	mov	r0, r1
 8000792:	4611      	mov	r1, r2
 8000794:	461a      	mov	r2, r3
 8000796:	4623      	mov	r3, r4
 8000798:	80fb      	strh	r3, [r7, #6]
 800079a:	4603      	mov	r3, r0
 800079c:	80bb      	strh	r3, [r7, #4]
 800079e:	460b      	mov	r3, r1
 80007a0:	807b      	strh	r3, [r7, #2]
 80007a2:	4613      	mov	r3, r2
 80007a4:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80007a6:	202a      	movs	r0, #42	; 0x2a
 80007a8:	f7ff ffb2 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ffc9 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffc4 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80007c4:	887b      	ldrh	r3, [r7, #2]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ffbd 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffb8 	bl	800074c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80007dc:	202b      	movs	r0, #43	; 0x2b
 80007de:	f7ff ff97 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80007e2:	88bb      	ldrh	r3, [r7, #4]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffae 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80007f0:	88bb      	ldrh	r3, [r7, #4]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ffa9 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80007fa:	883b      	ldrh	r3, [r7, #0]
 80007fc:	0a1b      	lsrs	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ffa2 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000808:	883b      	ldrh	r3, [r7, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff9d 	bl	800074c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000812:	202c      	movs	r0, #44	; 0x2c
 8000814:	f7ff ff7c 	bl	8000710 <ILI9341_Write_Command>
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	bd90      	pop	{r4, r7, pc}

08000820 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	GPIO_WritePin(&RST, GPIO_PIN_RESET);
 8000824:	2100      	movs	r1, #0
 8000826:	4809      	ldr	r0, [pc, #36]	; (800084c <ILI9341_Reset+0x2c>)
 8000828:	f000 fca0 	bl	800116c <GPIO_WritePin>
	SYSTICK_DelayMs(200);
 800082c:	20c8      	movs	r0, #200	; 0xc8
 800082e:	f7ff fcb9 	bl	80001a4 <SYSTICK_DelayMs>
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8000832:	2100      	movs	r1, #0
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <ILI9341_Reset+0x30>)
 8000836:	f000 fc99 	bl	800116c <GPIO_WritePin>
	SYSTICK_DelayMs(200);
 800083a:	20c8      	movs	r0, #200	; 0xc8
 800083c:	f7ff fcb2 	bl	80001a4 <SYSTICK_DelayMs>
	GPIO_WritePin(&RST, GPIO_PIN_SET);
 8000840:	2101      	movs	r1, #1
 8000842:	4802      	ldr	r0, [pc, #8]	; (800084c <ILI9341_Reset+0x2c>)
 8000844:	f000 fc92 	bl	800116c <GPIO_WritePin>
	// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
	// HAL_Delay(200);
	// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	// HAL_Delay(200);
	// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000054 	.word	0x20000054
 8000850:	20000090 	.word	0x20000090

08000854 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000862:	2036      	movs	r0, #54	; 0x36
 8000864:	f7ff ff54 	bl	8000710 <ILI9341_Write_Command>
SYSTICK_DelayMs(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff fc9b 	bl	80001a4 <SYSTICK_DelayMs>
	
switch(screen_rotation) 
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d837      	bhi.n	80008e4 <ILI9341_Set_Rotation+0x90>
 8000874:	a201      	add	r2, pc, #4	; (adr r2, 800087c <ILI9341_Set_Rotation+0x28>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	0800088d 	.word	0x0800088d
 8000880:	080008a3 	.word	0x080008a3
 8000884:	080008b9 	.word	0x080008b9
 8000888:	080008cf 	.word	0x080008cf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800088c:	2048      	movs	r0, #72	; 0x48
 800088e:	f7ff ff5d 	bl	800074c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <ILI9341_Set_Rotation+0x9c>)
 8000894:	22f0      	movs	r2, #240	; 0xf0
 8000896:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <ILI9341_Set_Rotation+0xa0>)
 800089a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800089e:	801a      	strh	r2, [r3, #0]
			break;
 80008a0:	e021      	b.n	80008e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80008a2:	2028      	movs	r0, #40	; 0x28
 80008a4:	f7ff ff52 	bl	800074c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <ILI9341_Set_Rotation+0x9c>)
 80008aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <ILI9341_Set_Rotation+0xa0>)
 80008b2:	22f0      	movs	r2, #240	; 0xf0
 80008b4:	801a      	strh	r2, [r3, #0]
			break;
 80008b6:	e016      	b.n	80008e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80008b8:	2088      	movs	r0, #136	; 0x88
 80008ba:	f7ff ff47 	bl	800074c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <ILI9341_Set_Rotation+0x9c>)
 80008c0:	22f0      	movs	r2, #240	; 0xf0
 80008c2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <ILI9341_Set_Rotation+0xa0>)
 80008c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008ca:	801a      	strh	r2, [r3, #0]
			break;
 80008cc:	e00b      	b.n	80008e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80008ce:	20e8      	movs	r0, #232	; 0xe8
 80008d0:	f7ff ff3c 	bl	800074c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <ILI9341_Set_Rotation+0x9c>)
 80008d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008da:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ILI9341_Set_Rotation+0xa0>)
 80008de:	22f0      	movs	r2, #240	; 0xf0
 80008e0:	801a      	strh	r2, [r3, #0]
			break;
 80008e2:	e000      	b.n	80008e6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80008e4:	bf00      	nop
	}
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000002 	.word	0x20000002
 80008f4:	20000000 	.word	0x20000000

080008f8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
	GPIO_WritePin(&RST, GPIO_PIN_SET);
 80008fc:	2101      	movs	r1, #1
 80008fe:	4802      	ldr	r0, [pc, #8]	; (8000908 <ILI9341_Enable+0x10>)
 8000900:	f000 fc34 	bl	800116c <GPIO_WritePin>

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000054 	.word	0x20000054

0800090c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

ILI9341_SPI_Init();
 8000910:	f7ff fe34 	bl	800057c <ILI9341_SPI_Init>
ILI9341_Enable();
 8000914:	f7ff fff0 	bl	80008f8 <ILI9341_Enable>
ILI9341_Reset();
 8000918:	f7ff ff82 	bl	8000820 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff fef7 	bl	8000710 <ILI9341_Write_Command>
SYSTICK_DelayMs(1000);
 8000922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000926:	f7ff fc3d 	bl	80001a4 <SYSTICK_DelayMs>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800092a:	20cb      	movs	r0, #203	; 0xcb
 800092c:	f7ff fef0 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000930:	2039      	movs	r0, #57	; 0x39
 8000932:	f7ff ff0b 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000936:	202c      	movs	r0, #44	; 0x2c
 8000938:	f7ff ff08 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff ff05 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000942:	2034      	movs	r0, #52	; 0x34
 8000944:	f7ff ff02 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000948:	2002      	movs	r0, #2
 800094a:	f7ff feff 	bl	800074c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800094e:	20cf      	movs	r0, #207	; 0xcf
 8000950:	f7ff fede 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff fef9 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800095a:	20c1      	movs	r0, #193	; 0xc1
 800095c:	f7ff fef6 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000960:	2030      	movs	r0, #48	; 0x30
 8000962:	f7ff fef3 	bl	800074c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000966:	20e8      	movs	r0, #232	; 0xe8
 8000968:	f7ff fed2 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 800096c:	2085      	movs	r0, #133	; 0x85
 800096e:	f7ff feed 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff feea 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000978:	2078      	movs	r0, #120	; 0x78
 800097a:	f7ff fee7 	bl	800074c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800097e:	20ea      	movs	r0, #234	; 0xea
 8000980:	f7ff fec6 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000984:	2000      	movs	r0, #0
 8000986:	f7ff fee1 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fede 	bl	800074c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000990:	20ed      	movs	r0, #237	; 0xed
 8000992:	f7ff febd 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000996:	2064      	movs	r0, #100	; 0x64
 8000998:	f7ff fed8 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800099c:	2003      	movs	r0, #3
 800099e:	f7ff fed5 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80009a2:	2012      	movs	r0, #18
 80009a4:	f7ff fed2 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80009a8:	2081      	movs	r0, #129	; 0x81
 80009aa:	f7ff fecf 	bl	800074c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80009ae:	20f7      	movs	r0, #247	; 0xf7
 80009b0:	f7ff feae 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80009b4:	2020      	movs	r0, #32
 80009b6:	f7ff fec9 	bl	800074c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80009ba:	20c0      	movs	r0, #192	; 0xc0
 80009bc:	f7ff fea8 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80009c0:	2023      	movs	r0, #35	; 0x23
 80009c2:	f7ff fec3 	bl	800074c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80009c6:	20c1      	movs	r0, #193	; 0xc1
 80009c8:	f7ff fea2 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80009cc:	2010      	movs	r0, #16
 80009ce:	f7ff febd 	bl	800074c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80009d2:	20c5      	movs	r0, #197	; 0xc5
 80009d4:	f7ff fe9c 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80009d8:	203e      	movs	r0, #62	; 0x3e
 80009da:	f7ff feb7 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80009de:	2028      	movs	r0, #40	; 0x28
 80009e0:	f7ff feb4 	bl	800074c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80009e4:	20c7      	movs	r0, #199	; 0xc7
 80009e6:	f7ff fe93 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80009ea:	2086      	movs	r0, #134	; 0x86
 80009ec:	f7ff feae 	bl	800074c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80009f0:	2036      	movs	r0, #54	; 0x36
 80009f2:	f7ff fe8d 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80009f6:	2048      	movs	r0, #72	; 0x48
 80009f8:	f7ff fea8 	bl	800074c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80009fc:	203a      	movs	r0, #58	; 0x3a
 80009fe:	f7ff fe87 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000a02:	2055      	movs	r0, #85	; 0x55
 8000a04:	f7ff fea2 	bl	800074c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000a08:	20b1      	movs	r0, #177	; 0xb1
 8000a0a:	f7ff fe81 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f7ff fe9c 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000a14:	2018      	movs	r0, #24
 8000a16:	f7ff fe99 	bl	800074c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000a1a:	20b6      	movs	r0, #182	; 0xb6
 8000a1c:	f7ff fe78 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000a20:	2008      	movs	r0, #8
 8000a22:	f7ff fe93 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000a26:	2082      	movs	r0, #130	; 0x82
 8000a28:	f7ff fe90 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000a2c:	2027      	movs	r0, #39	; 0x27
 8000a2e:	f7ff fe8d 	bl	800074c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000a32:	20f2      	movs	r0, #242	; 0xf2
 8000a34:	f7ff fe6c 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff fe87 	bl	800074c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000a3e:	2026      	movs	r0, #38	; 0x26
 8000a40:	f7ff fe66 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fe81 	bl	800074c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000a4a:	20e0      	movs	r0, #224	; 0xe0
 8000a4c:	f7ff fe60 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000a50:	200f      	movs	r0, #15
 8000a52:	f7ff fe7b 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a56:	2031      	movs	r0, #49	; 0x31
 8000a58:	f7ff fe78 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000a5c:	202b      	movs	r0, #43	; 0x2b
 8000a5e:	f7ff fe75 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000a62:	200c      	movs	r0, #12
 8000a64:	f7ff fe72 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a68:	200e      	movs	r0, #14
 8000a6a:	f7ff fe6f 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000a6e:	2008      	movs	r0, #8
 8000a70:	f7ff fe6c 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000a74:	204e      	movs	r0, #78	; 0x4e
 8000a76:	f7ff fe69 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000a7a:	20f1      	movs	r0, #241	; 0xf1
 8000a7c:	f7ff fe66 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000a80:	2037      	movs	r0, #55	; 0x37
 8000a82:	f7ff fe63 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a86:	2007      	movs	r0, #7
 8000a88:	f7ff fe60 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000a8c:	2010      	movs	r0, #16
 8000a8e:	f7ff fe5d 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a92:	2003      	movs	r0, #3
 8000a94:	f7ff fe5a 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a98:	200e      	movs	r0, #14
 8000a9a:	f7ff fe57 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000a9e:	2009      	movs	r0, #9
 8000aa0:	f7ff fe54 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fe51 	bl	800074c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000aaa:	20e1      	movs	r0, #225	; 0xe1
 8000aac:	f7ff fe30 	bl	8000710 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f7ff fe4b 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000ab6:	200e      	movs	r0, #14
 8000ab8:	f7ff fe48 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000abc:	2014      	movs	r0, #20
 8000abe:	f7ff fe45 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f7ff fe42 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000ac8:	2011      	movs	r0, #17
 8000aca:	f7ff fe3f 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f7ff fe3c 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ad4:	2031      	movs	r0, #49	; 0x31
 8000ad6:	f7ff fe39 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000ada:	20c1      	movs	r0, #193	; 0xc1
 8000adc:	f7ff fe36 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000ae0:	2048      	movs	r0, #72	; 0x48
 8000ae2:	f7ff fe33 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000ae6:	2008      	movs	r0, #8
 8000ae8:	f7ff fe30 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000aec:	200f      	movs	r0, #15
 8000aee:	f7ff fe2d 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000af2:	200c      	movs	r0, #12
 8000af4:	f7ff fe2a 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000af8:	2031      	movs	r0, #49	; 0x31
 8000afa:	f7ff fe27 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000afe:	2036      	movs	r0, #54	; 0x36
 8000b00:	f7ff fe24 	bl	800074c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000b04:	200f      	movs	r0, #15
 8000b06:	f7ff fe21 	bl	800074c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000b0a:	2011      	movs	r0, #17
 8000b0c:	f7ff fe00 	bl	8000710 <ILI9341_Write_Command>
SYSTICK_DelayMs(120);
 8000b10:	2078      	movs	r0, #120	; 0x78
 8000b12:	f7ff fb47 	bl	80001a4 <SYSTICK_DelayMs>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000b16:	2029      	movs	r0, #41	; 0x29
 8000b18:	f7ff fdfa 	bl	8000710 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fe99 	bl	8000854 <ILI9341_Set_Rotation>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	80fb      	strh	r3, [r7, #6]
 8000b34:	466b      	mov	r3, sp
 8000b36:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b44:	d202      	bcs.n	8000b4c <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
 8000b4a:	e002      	b.n	8000b52 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000b4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
}
	
GPIO_WritePin(&DC, GPIO_PIN_SET);
 8000b52:	2101      	movs	r1, #1
 8000b54:	4843      	ldr	r0, [pc, #268]	; (8000c64 <ILI9341_Draw_Colour_Burst+0x13c>)
 8000b56:	f000 fb09 	bl	800116c <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4842      	ldr	r0, [pc, #264]	; (8000c68 <ILI9341_Draw_Colour_Burst+0x140>)
 8000b5e:	f000 fb05 	bl	800116c <GPIO_WritePin>
// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);

unsigned char chifted = 	Colour>>8;;
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000b6c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000b6e:	4623      	mov	r3, r4
 8000b70:	3b01      	subs	r3, #1
 8000b72:	61fb      	str	r3, [r7, #28]
 8000b74:	4620      	mov	r0, r4
 8000b76:	f04f 0100 	mov.w	r1, #0
 8000b7a:	f04f 0200 	mov.w	r2, #0
 8000b7e:	f04f 0300 	mov.w	r3, #0
 8000b82:	00cb      	lsls	r3, r1, #3
 8000b84:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b88:	00c2      	lsls	r2, r0, #3
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	f04f 0100 	mov.w	r1, #0
 8000b90:	f04f 0200 	mov.w	r2, #0
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	00cb      	lsls	r3, r1, #3
 8000b9a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b9e:	00c2      	lsls	r2, r0, #3
 8000ba0:	1de3      	adds	r3, r4, #7
 8000ba2:	08db      	lsrs	r3, r3, #3
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	ebad 0d03 	sub.w	sp, sp, r3
 8000baa:	466b      	mov	r3, sp
 8000bac:	3300      	adds	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bb4:	e00e      	b.n	8000bd4 <ILI9341_Draw_Colour_Burst+0xac>
	{
		burst_buffer[j] = 	chifted;
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bba:	4413      	add	r3, r2
 8000bbc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000bc0:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	88fa      	ldrh	r2, [r7, #6]
 8000bc8:	b2d1      	uxtb	r1, r2
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d3ec      	bcc.n	8000bb6 <ILI9341_Draw_Colour_Burst+0x8e>
	}

uint32_t Sending_Size = Size*2;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bf0:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bf6:	fb01 f202 	mul.w	r2, r1, r2
 8000bfa:	1a9b      	subs	r3, r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d017      	beq.n	8000c34 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c08:	e010      	b.n	8000c2c <ILI9341_Draw_Colour_Burst+0x104>
		{
		SPI_TransmitDMA(&hspi1, (unsigned char *)burst_buffer, Buffer_Size);
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4816      	ldr	r0, [pc, #88]	; (8000c6c <ILI9341_Draw_Colour_Burst+0x144>)
 8000c12:	f000 fca0 	bl	8001556 <SPI_TransmitDMA>
		SYSTICK_DelayMs(1);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f7ff fac4 	bl	80001a4 <SYSTICK_DelayMs>
		DMA_Stop(hspi1.txdma);
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <ILI9341_Draw_Colour_Burst+0x144>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fc2d 	bl	8000480 <DMA_Stop>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c28:	3301      	adds	r3, #1
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d3ea      	bcc.n	8000c0a <ILI9341_Draw_Colour_Burst+0xe2>
		//HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
		}
}

//REMAINDER!
SPI_TransmitDMA(&hspi1, (unsigned char *)burst_buffer, Remainder_from_block);
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <ILI9341_Draw_Colour_Burst+0x144>)
 8000c3c:	f000 fc8b 	bl	8001556 <SPI_TransmitDMA>
SYSTICK_DelayMs(1);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff faaf 	bl	80001a4 <SYSTICK_DelayMs>
DMA_Stop(hspi1.txdma);
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <ILI9341_Draw_Colour_Burst+0x144>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc18 	bl	8000480 <DMA_Stop>

//SPI_Transmit(&hspi1, (unsigned char *)burst_buffer, Remainder_from_block);
//HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	

GPIO_WritePin(&CS, GPIO_PIN_SET);
 8000c50:	2101      	movs	r1, #1
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <ILI9341_Draw_Colour_Burst+0x140>)
 8000c54:	f000 fa8a 	bl	800116c <GPIO_WritePin>
 8000c58:	46ad      	mov	sp, r5
//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8000c5a:	bf00      	nop
 8000c5c:	3730      	adds	r7, #48	; 0x30
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bdb0      	pop	{r4, r5, r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000005c 	.word	0x2000005c
 8000c68:	20000090 	.word	0x20000090
 8000c6c:	20000074 	.word	0x20000074

08000c70 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4604      	mov	r4, r0
 8000c78:	4608      	mov	r0, r1
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4623      	mov	r3, r4
 8000c80:	80fb      	strh	r3, [r7, #6]
 8000c82:	4603      	mov	r3, r0
 8000c84:	80bb      	strh	r3, [r7, #4]
 8000c86:	460b      	mov	r3, r1
 8000c88:	807b      	strh	r3, [r7, #2]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <ILI9341_Draw_Rectangle+0xb0>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	88fa      	ldrh	r2, [r7, #6]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d23d      	bcs.n	8000d16 <ILI9341_Draw_Rectangle+0xa6>
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <ILI9341_Draw_Rectangle+0xb4>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d237      	bcs.n	8000d16 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000ca6:	88fa      	ldrh	r2, [r7, #6]
 8000ca8:	887b      	ldrh	r3, [r7, #2]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <ILI9341_Draw_Rectangle+0xb0>)
 8000cae:	8812      	ldrh	r2, [r2, #0]
 8000cb0:	b292      	uxth	r2, r2
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	dd05      	ble.n	8000cc2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <ILI9341_Draw_Rectangle+0xb0>)
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000cc2:	88ba      	ldrh	r2, [r7, #4]
 8000cc4:	883b      	ldrh	r3, [r7, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <ILI9341_Draw_Rectangle+0xb4>)
 8000cca:	8812      	ldrh	r2, [r2, #0]
 8000ccc:	b292      	uxth	r2, r2
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	dd05      	ble.n	8000cde <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <ILI9341_Draw_Rectangle+0xb4>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	88bb      	ldrh	r3, [r7, #4]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000cde:	88fa      	ldrh	r2, [r7, #6]
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	b29c      	uxth	r4, r3
 8000cea:	88ba      	ldrh	r2, [r7, #4]
 8000cec:	883b      	ldrh	r3, [r7, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	88b9      	ldrh	r1, [r7, #4]
 8000cf8:	88f8      	ldrh	r0, [r7, #6]
 8000cfa:	4622      	mov	r2, r4
 8000cfc:	f7ff fd44 	bl	8000788 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000d00:	883b      	ldrh	r3, [r7, #0]
 8000d02:	887a      	ldrh	r2, [r7, #2]
 8000d04:	fb02 f303 	mul.w	r3, r2, r3
 8000d08:	461a      	mov	r2, r3
 8000d0a:	8b3b      	ldrh	r3, [r7, #24]
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff ff0a 	bl	8000b28 <ILI9341_Draw_Colour_Burst>
 8000d14:	e000      	b.n	8000d18 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000d16:	bf00      	nop
}
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd90      	pop	{r4, r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000002 	.word	0x20000002
 8000d24:	20000000 	.word	0x20000000

08000d28 <GPIO_Init>:
 */

#include "Drivers/GPIO/GPIO.h"

HAL_Status GPIO_Init(GPIO_HandleTypeDef* gpio_handle)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <GPIO_Init+0x18>
    {
        status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e20e      	b.n	800115e <GPIO_Init+0x436>
    }
    else
    {
        /* Check if pin number is less than 8 */
        if(gpio_handle->GPIO_Pin < GPIO_PIN_8)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	791b      	ldrb	r3, [r3, #4]
 8000d44:	2b07      	cmp	r3, #7
 8000d46:	f200 80fd 	bhi.w	8000f44 <GPIO_Init+0x21c>
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	795b      	ldrb	r3, [r3, #5]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d876      	bhi.n	8000e40 <GPIO_Init+0x118>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <GPIO_Init+0x30>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d9f 	.word	0x08000d9f
 8000d60:	08000dd5 	.word	0x08000dd5
 8000d64:	08000e0b 	.word	0x08000e0b
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6819      	ldr	r1, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	791b      	ldrb	r3, [r3, #4]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	220f      	movs	r2, #15
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	400a      	ands	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x04UL << (gpio_handle->GPIO_Pin * 4));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6819      	ldr	r1, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	791b      	ldrb	r3, [r3, #4]
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	2204      	movs	r2, #4
 8000d92:	409a      	lsls	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
                    break;
 8000d9c:	e053      	b.n	8000e46 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	791b      	ldrb	r3, [r3, #4]
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43da      	mvns	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	400a      	ands	r2, r1
 8000db8:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4));
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	6819      	ldr	r1, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	791b      	ldrb	r3, [r3, #4]
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]
                    break;
 8000dd2:	e038      	b.n	8000e46 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6819      	ldr	r1, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	400a      	ands	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6819      	ldr	r1, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	791b      	ldrb	r3, [r3, #4]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
                    break;
 8000e08:	e01d      	b.n	8000e46 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6819      	ldr	r1, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	791b      	ldrb	r3, [r3, #4]
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	400a      	ands	r2, r1
 8000e24:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6819      	ldr	r1, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	2203      	movs	r2, #3
 8000e34:	409a      	lsls	r2, r3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
                    break;
 8000e3e:	e002      	b.n	8000e46 <GPIO_Init+0x11e>
                default:
                    status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
                    break;
 8000e44:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	799b      	ldrb	r3, [r3, #6]
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	d877      	bhi.n	8000f3e <GPIO_Init+0x216>
 8000e4e:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <GPIO_Init+0x12c>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000e71 	.word	0x08000e71
 8000e58:	08000e91 	.word	0x08000e91
 8000e5c:	08000ecb 	.word	0x08000ecb
 8000e60:	08000e71 	.word	0x08000e71
 8000e64:	08000e91 	.word	0x08000e91
 8000e68:	08000ecb 	.word	0x08000ecb
 8000e6c:	08000f05 	.word	0x08000f05
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	791b      	ldrb	r3, [r3, #4]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	3302      	adds	r3, #2
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43da      	mvns	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	400a      	ands	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
                    break;
 8000e8e:	e166      	b.n	800115e <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	791b      	ldrb	r3, [r3, #4]
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	3302      	adds	r3, #2
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	400a      	ands	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6819      	ldr	r1, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	791b      	ldrb	r3, [r3, #4]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	3302      	adds	r3, #2
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
                    break;
 8000ec8:	e149      	b.n	800115e <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6819      	ldr	r1, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	791b      	ldrb	r3, [r3, #4]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6819      	ldr	r1, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	791b      	ldrb	r3, [r3, #4]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
                    break;
 8000f02:	e12c      	b.n	800115e <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	791b      	ldrb	r3, [r3, #4]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43da      	mvns	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	400a      	ands	r2, r1
 8000f20:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	791b      	ldrb	r3, [r3, #4]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	3302      	adds	r3, #2
 8000f30:	2203      	movs	r2, #3
 8000f32:	409a      	lsls	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	601a      	str	r2, [r3, #0]
                    break;
 8000f3c:	e10f      	b.n	800115e <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
                    break;
 8000f42:	e10c      	b.n	800115e <GPIO_Init+0x436>
            }
        }
        else
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	795b      	ldrb	r3, [r3, #5]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d87f      	bhi.n	800104c <GPIO_Init+0x324>
 8000f4c:	a201      	add	r2, pc, #4	; (adr r2, 8000f54 <GPIO_Init+0x22c>)
 8000f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f52:	bf00      	nop
 8000f54:	08000f65 	.word	0x08000f65
 8000f58:	08000f9f 	.word	0x08000f9f
 8000f5c:	08000fd9 	.word	0x08000fd9
 8000f60:	08001013 	.word	0x08001013
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6859      	ldr	r1, [r3, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	791b      	ldrb	r3, [r3, #4]
 8000f6e:	3b08      	subs	r3, #8
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43da      	mvns	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	400a      	ands	r2, r1
 8000f80:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x04UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	791b      	ldrb	r3, [r3, #4]
 8000f8c:	3b08      	subs	r3, #8
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	2204      	movs	r2, #4
 8000f92:	409a      	lsls	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	605a      	str	r2, [r3, #4]
                    break;
 8000f9c:	e059      	b.n	8001052 <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6859      	ldr	r1, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	791b      	ldrb	r3, [r3, #4]
 8000fa8:	3b08      	subs	r3, #8
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	400a      	ands	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6859      	ldr	r1, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	791b      	ldrb	r3, [r3, #4]
 8000fc6:	3b08      	subs	r3, #8
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	2201      	movs	r2, #1
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	605a      	str	r2, [r3, #4]
                    break;
 8000fd6:	e03c      	b.n	8001052 <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6859      	ldr	r1, [r3, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	791b      	ldrb	r3, [r3, #4]
 8000fe2:	3b08      	subs	r3, #8
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43da      	mvns	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6859      	ldr	r1, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	791b      	ldrb	r3, [r3, #4]
 8001000:	3b08      	subs	r3, #8
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	2202      	movs	r2, #2
 8001006:	409a      	lsls	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	430a      	orrs	r2, r1
 800100e:	605a      	str	r2, [r3, #4]
                    break;
 8001010:	e01f      	b.n	8001052 <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	6859      	ldr	r1, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	3b08      	subs	r3, #8
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	400a      	ands	r2, r1
 800102e:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6859      	ldr	r1, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	791b      	ldrb	r3, [r3, #4]
 800103a:	3b08      	subs	r3, #8
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	2203      	movs	r2, #3
 8001040:	409a      	lsls	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	430a      	orrs	r2, r1
 8001048:	605a      	str	r2, [r3, #4]
                    break;
 800104a:	e002      	b.n	8001052 <GPIO_Init+0x32a>
                default:
                    status = HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
                    break;
 8001050:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	799b      	ldrb	r3, [r3, #6]
 8001056:	2b06      	cmp	r3, #6
 8001058:	d87e      	bhi.n	8001158 <GPIO_Init+0x430>
 800105a:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <GPIO_Init+0x338>)
 800105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001060:	0800107d 	.word	0x0800107d
 8001064:	0800109f 	.word	0x0800109f
 8001068:	080010dd 	.word	0x080010dd
 800106c:	0800107d 	.word	0x0800107d
 8001070:	0800109f 	.word	0x0800109f
 8001074:	080010dd 	.word	0x080010dd
 8001078:	0800111b 	.word	0x0800111b
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6859      	ldr	r1, [r3, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	791b      	ldrb	r3, [r3, #4]
 8001086:	3b08      	subs	r3, #8
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	400a      	ands	r2, r1
 800109a:	605a      	str	r2, [r3, #4]
                    break;
 800109c:	e05f      	b.n	800115e <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6859      	ldr	r1, [r3, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	791b      	ldrb	r3, [r3, #4]
 80010a8:	3b08      	subs	r3, #8
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43da      	mvns	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	400a      	ands	r2, r1
 80010bc:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6859      	ldr	r1, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	791b      	ldrb	r3, [r3, #4]
 80010c8:	3b08      	subs	r3, #8
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	2201      	movs	r2, #1
 80010d0:	409a      	lsls	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	605a      	str	r2, [r3, #4]
                    break;
 80010da:	e040      	b.n	800115e <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6859      	ldr	r1, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	791b      	ldrb	r3, [r3, #4]
 80010e6:	3b08      	subs	r3, #8
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	400a      	ands	r2, r1
 80010fa:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6859      	ldr	r1, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	791b      	ldrb	r3, [r3, #4]
 8001106:	3b08      	subs	r3, #8
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	2202      	movs	r2, #2
 800110e:	409a      	lsls	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	605a      	str	r2, [r3, #4]
                    break;
 8001118:	e021      	b.n	800115e <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6859      	ldr	r1, [r3, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	3b08      	subs	r3, #8
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43da      	mvns	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	400a      	ands	r2, r1
 8001138:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6859      	ldr	r1, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	791b      	ldrb	r3, [r3, #4]
 8001144:	3b08      	subs	r3, #8
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	2203      	movs	r2, #3
 800114c:	409a      	lsls	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	605a      	str	r2, [r3, #4]
                    break;
 8001156:	e002      	b.n	800115e <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
                    break;
 800115c:	bf00      	nop
        }

    }    
    }
    return status;
 800115e:	7bfb      	ldrb	r3, [r7, #15]

}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <GPIO_WritePin>:


HAL_Status GPIO_WritePin(GPIO_HandleTypeDef* gpio_handle, GPIO_PinState pin_state)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	70fb      	strb	r3, [r7, #3]
    HAL_Status status = HAL_OKAY;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d102      	bne.n	8001188 <GPIO_WritePin+0x1c>
    {
        status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e023      	b.n	80011d0 <GPIO_WritePin+0x64>
    }
    else
    {
        if(GPIO_PIN_RESET == pin_state)
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10d      	bne.n	80011aa <GPIO_WritePin+0x3e>
        {
            gpio_handle->GPIO_TypeDef->BRR |= (1UL << gpio_handle->GPIO_Pin);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6959      	ldr	r1, [r3, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	791b      	ldrb	r3, [r3, #4]
 8001198:	461a      	mov	r2, r3
 800119a:	2301      	movs	r3, #1
 800119c:	fa03 f202 	lsl.w	r2, r3, r2
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	615a      	str	r2, [r3, #20]
 80011a8:	e012      	b.n	80011d0 <GPIO_WritePin+0x64>
        }
        else if(GPIO_PIN_SET == pin_state)
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d10d      	bne.n	80011cc <GPIO_WritePin+0x60>
        {
            gpio_handle->GPIO_TypeDef->BSRR |= (1UL << gpio_handle->GPIO_Pin);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6919      	ldr	r1, [r3, #16]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	791b      	ldrb	r3, [r3, #4]
 80011ba:	461a      	mov	r2, r3
 80011bc:	2301      	movs	r3, #1
 80011be:	fa03 f202 	lsl.w	r2, r3, r2
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	e001      	b.n	80011d0 <GPIO_WritePin+0x64>
        }
        else
        {
            status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <SPI_Init>:

#include "Drivers/SPI/SPI.h"


HAL_Status SPI_Init(SPI_HandleTypeDef* hspi)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 80011e4:	2300      	movs	r3, #0
 80011e6:	73fb      	strb	r3, [r7, #15]

    if(NULL == hspi)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <SPI_Init+0x18>
    {
        status = HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e15c      	b.n	80014ae <SPI_Init+0x2d2>
    }
    else
    {
        
        /* Set SPI Slave Select */
        if(hspi->NSS == SPI_NSS_HARD)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7d1b      	ldrb	r3, [r3, #20]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <SPI_Init+0x32>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e023      	b.n	8001256 <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_SOFT)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7d1b      	ldrb	r3, [r3, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d108      	bne.n	8001228 <SPI_Init+0x4c>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e016      	b.n	8001256 <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_DISABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7d1b      	ldrb	r3, [r3, #20]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d110      	bne.n	8001252 <SPI_Init+0x76>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800123e:	601a      	str	r2, [r3, #0]
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	e001      	b.n	8001256 <SPI_Init+0x7a>
        }
        else
        {
            status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI mode */
        if(hspi->Mode == SPI_MODE_MASTER)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	791b      	ldrb	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <SPI_Init+0x94>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0204 	orr.w	r2, r2, #4
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e00e      	b.n	800128e <SPI_Init+0xb2>
        }
        else if(hspi->Mode == SPI_MODE_SLAVE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	791b      	ldrb	r3, [r3, #4]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d108      	bne.n	800128a <SPI_Init+0xae>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 0204 	bic.w	r2, r2, #4
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e001      	b.n	800128e <SPI_Init+0xb2>
        }
        else
        {
            status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Bi-Directional mode */
        if(hspi->BiDir == SPI_BIDIR_ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7d5b      	ldrb	r3, [r3, #21]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d108      	bne.n	80012a8 <SPI_Init+0xcc>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIMODE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e00e      	b.n	80012c6 <SPI_Init+0xea>
        }
        else if(hspi->BiDir == SPI_BIDIR_DISABLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7d5b      	ldrb	r3, [r3, #21]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d108      	bne.n	80012c2 <SPI_Init+0xe6>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_BIDIMODE);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e001      	b.n	80012c6 <SPI_Init+0xea>
        }
        else
        {
            status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Data Size */
        if(hspi->DataSize == SPI_DATASIZE_8BIT)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7c5b      	ldrb	r3, [r3, #17]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d108      	bne.n	80012e0 <SPI_Init+0x104>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	e00e      	b.n	80012fe <SPI_Init+0x122>
        }
        else if(hspi->DataSize == SPI_DATASIZE_16BIT)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7c5b      	ldrb	r3, [r3, #17]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <SPI_Init+0x11e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e001      	b.n	80012fe <SPI_Init+0x122>
        }
        else
        {
            status = HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Polarity */
        if(hspi->CPOL == SPI_CPOL_LOW)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	799b      	ldrb	r3, [r3, #6]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d108      	bne.n	8001318 <SPI_Init+0x13c>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0202 	bic.w	r2, r2, #2
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e00e      	b.n	8001336 <SPI_Init+0x15a>
        }
        else if(hspi->CPOL == SPI_CPOL_HIGH)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	799b      	ldrb	r3, [r3, #6]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <SPI_Init+0x156>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0202 	orr.w	r2, r2, #2
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e001      	b.n	8001336 <SPI_Init+0x15a>
        }
        else
        {
           status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Phase */
        if(hspi->CPHA == SPI_CPHA_1EDGE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	79db      	ldrb	r3, [r3, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d108      	bne.n	8001350 <SPI_Init+0x174>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 0201 	bic.w	r2, r2, #1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e00e      	b.n	800136e <SPI_Init+0x192>
        }
        else if(hspi->CPHA == SPI_CPHA_2EDGE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	79db      	ldrb	r3, [r3, #7]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d108      	bne.n	800136a <SPI_Init+0x18e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e001      	b.n	800136e <SPI_Init+0x192>
        }
        else
        {
            status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
        }

        /*Set TX DMA Option */
        if(hspi->SpiTxDma == SPI_TX_DMA_ENABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7c9b      	ldrb	r3, [r3, #18]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d108      	bne.n	8001388 <SPI_Init+0x1ac>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0202 	orr.w	r2, r2, #2
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	e007      	b.n	8001398 <SPI_Init+0x1bc>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0202 	bic.w	r2, r2, #2
 8001396:	605a      	str	r2, [r3, #4]
        }

        /*Set DMA Option */
        if(hspi->SpiRxDma == SPI_RX_DMA_ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7cdb      	ldrb	r3, [r3, #19]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d108      	bne.n	80013b2 <SPI_Init+0x1d6>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0201 	orr.w	r2, r2, #1
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	e007      	b.n	80013c2 <SPI_Init+0x1e6>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0201 	bic.w	r2, r2, #1
 80013c0:	605a      	str	r2, [r3, #4]
        }



        /* Set SPI Baud Rate */
        switch(hspi->BaudRate)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	795b      	ldrb	r3, [r3, #5]
 80013c6:	2b07      	cmp	r3, #7
 80013c8:	d866      	bhi.n	8001498 <SPI_Init+0x2bc>
 80013ca:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <SPI_Init+0x1f4>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	080013f1 	.word	0x080013f1
 80013d4:	08001403 	.word	0x08001403
 80013d8:	08001419 	.word	0x08001419
 80013dc:	0800142f 	.word	0x0800142f
 80013e0:	08001445 	.word	0x08001445
 80013e4:	0800145b 	.word	0x0800145b
 80013e8:	08001471 	.word	0x08001471
 80013ec:	08001487 	.word	0x08001487
        {
            case SPI_BAUDRATE_DIV2:
                // Code for SPI_BAUD_RATE_DIV
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK , SPI_BAUDRATE_DIV2 << SPI_CR1_BR);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80013fe:	601a      	str	r2, [r3, #0]
                break;
 8001400:	e04d      	b.n	800149e <SPI_Init+0x2c2>
            // Add more cases for other baud rates
            case SPI_BAUDRATE_DIV4:
                // Code for SPI_BAUDRATE_DIV4
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV4 << SPI_CR1_BR);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0208 	orr.w	r2, r2, #8
 8001414:	601a      	str	r2, [r3, #0]
                break;
 8001416:	e042      	b.n	800149e <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV8:
                // Code for SPI_BAUDRATE_DIV8
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV8 << SPI_CR1_BR);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0210 	orr.w	r2, r2, #16
 800142a:	601a      	str	r2, [r3, #0]
                break;
 800142c:	e037      	b.n	800149e <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV16:
                // Code for SPI_BAUDRATE_DIV16
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV16 << SPI_CR1_BR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0218 	orr.w	r2, r2, #24
 8001440:	601a      	str	r2, [r3, #0]
                break;  
 8001442:	e02c      	b.n	800149e <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV32:
                // Code for SPI_BAUDRATE_DIV32
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV32 << SPI_CR1_BR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0220 	orr.w	r2, r2, #32
 8001456:	601a      	str	r2, [r3, #0]
                break;
 8001458:	e021      	b.n	800149e <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV64:
                // Code for SPI_BAUDRATE_DIV64
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV64 << SPI_CR1_BR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800146c:	601a      	str	r2, [r3, #0]
                break;
 800146e:	e016      	b.n	800149e <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV128:
                // Code for SPI_BAUDRATE_DIV128
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV128 << SPI_CR1_BR);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8001482:	601a      	str	r2, [r3, #0]
                break;
 8001484:	e00b      	b.n	800149e <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV256:
                // Code for SPI_BAUDRATE_DIV256
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV256 << SPI_CR1_BR);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8001494:	601a      	str	r2, [r3, #0]
                break;
 8001496:	e002      	b.n	800149e <SPI_Init+0x2c2>
            default:
                /*------ Take some action ---- */
                status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
                break;
 800149c:	bf00      	nop
        }
        /* Enable SPI */
        SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ac:	601a      	str	r2, [r3, #0]

    }

    return status;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <SPI_Transmit>:
 * @param Timeout 
 * @return HAL_Status 
 */

HAL_Status SPI_Transmit(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 80014c8:	2300      	movs	r3, #0
 80014ca:	75fb      	strb	r3, [r7, #23]
    if((NULL == hspi) || (NULL == pData))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <SPI_Transmit+0x1c>
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d102      	bne.n	80014de <SPI_Transmit+0x22>
    {
        status = HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	75fb      	strb	r3, [r7, #23]
 80014dc:	e035      	b.n	800154a <SPI_Transmit+0x8e>
    }
    else
    {
           /* Init TX counter */
           uint32_t counter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
           /* Check size */
           if(hspi->DataSize == SPI_DATASIZE_8BIT)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	7c5b      	ldrb	r3, [r3, #17]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d12b      	bne.n	8001542 <SPI_Transmit+0x86>
           {
            /* 8-bit DataSize */
            while(counter < Size)
 80014ea:	e012      	b.n	8001512 <SPI_Transmit+0x56>
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 80014ec:	bf00      	nop
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	085b      	lsrs	r3, r3, #1
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f7      	beq.n	80014ee <SPI_Transmit+0x32>
                hspi->Instance->DR = (uint8_t)pData[counter];
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4413      	add	r3, r2
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	60da      	str	r2, [r3, #12]
                counter++;
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	3301      	adds	r3, #1
 8001510:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	d3e8      	bcc.n	80014ec <SPI_Transmit+0x30>
 800151a:	e016      	b.n	800154a <SPI_Transmit+0x8e>
            {
            /* 16-bit DataSize */
            while(counter < Size)
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 800151c:	bf00      	nop
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f7      	beq.n	800151e <SPI_Transmit+0x62>
                hspi->Instance->DR = (uint16_t)pData[counter];
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4413      	add	r3, r2
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	60da      	str	r2, [r3, #12]
                counter++;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	3301      	adds	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d3e8      	bcc.n	800151c <SPI_Transmit+0x60>
            }           
            }
    }
    return status;
 800154a:	7dfb      	ldrb	r3, [r7, #23]
}
 800154c:	4618      	mov	r0, r3
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <SPI_TransmitDMA>:
 * @param pData 
 * @param Size 
 * @return HAL_Status 
 */
HAL_Status SPI_TransmitDMA(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
    if(NULL == hspi)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <SPI_TransmitDMA+0x1c>
    {
        status = HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	75fb      	strb	r3, [r7, #23]
 8001570:	e019      	b.n	80015a6 <SPI_TransmitDMA+0x50>
    }
    else
    {
        /* Set the DMA channel memory address */
        DMA_SetMemoryAddress(hspi->txdma, pData);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff4d 	bl	8000418 <DMA_SetMemoryAddress>

        /* Set the DMA channel peripheral address */
        DMA_SetPeriphAddress(hspi->txdma, &(hspi->Instance->DR));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	330c      	adds	r3, #12
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f7fe ff2a 	bl	80003e4 <DMA_SetPeriphAddress>

        /* Set the DMA channel count */
        DMA_SetDataCounter(hspi->txdma,Size);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ff8c 	bl	80004b4 <DMA_SetDataCounter>

        /* Start sending */
        DMA_Start(hspi->txdma);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff53 	bl	800044c <DMA_Start>
    }
    return status;
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <main>:
void HAL_Init();

void transmit(uint8_t cmd);

int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af02      	add	r7, sp, #8
//	_RCC_GPIOA_ENABLE();
//	_RCC_GPIOB_ENABLE();
//	_RCC_SPI1_ENABLE();
//	_RCC_DMA1_ENABLE();

	HAL_Init();
 80015b6:	f000 f827 	bl	8001608 <HAL_Init>
	ILI9341_Init();
 80015ba:	f7ff f9a7 	bl	800090c <ILI9341_Init>

	uint8_t data = 0x06;
 80015be:	2306      	movs	r3, #6
 80015c0:	71fb      	strb	r3, [r7, #7]
		// ILI9341_Fill_Screen(GREEN);
		// SYSTICK_DelayMs(200);
		// ILI9341_Fill_Screen(WHITE);
		// SYSTICK_DelayMs(200);

		ILI9341_Draw_Rectangle(0,0,128,160,BLUE);
 80015c2:	231f      	movs	r3, #31
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	23a0      	movs	r3, #160	; 0xa0
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	2100      	movs	r1, #0
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fb4f 	bl	8000c70 <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 80015d2:	20c8      	movs	r0, #200	; 0xc8
 80015d4:	f7fe fde6 	bl	80001a4 <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,0,128,160,BLACK);
 80015d8:	2300      	movs	r3, #0
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	23a0      	movs	r3, #160	; 0xa0
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	2100      	movs	r1, #0
 80015e2:	2000      	movs	r0, #0
 80015e4:	f7ff fb44 	bl	8000c70 <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 80015e8:	20c8      	movs	r0, #200	; 0xc8
 80015ea:	f7fe fddb 	bl	80001a4 <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,0,128,160,WHITE);
 80015ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	23a0      	movs	r3, #160	; 0xa0
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	2100      	movs	r1, #0
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fb38 	bl	8000c70 <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8001600:	20c8      	movs	r0, #200	; 0xc8
 8001602:	f7fe fdcf 	bl	80001a4 <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,0,128,160,BLUE);
 8001606:	e7dc      	b.n	80015c2 <main+0x12>

08001608 <HAL_Init>:
	_RCC_GPIOD_ENABLE();

}

void HAL_Init()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	 /* Init Systick */
	 SYSTICK_Init();
 800160c:	f7fe fdb0 	bl	8000170 <SYSTICK_Init>
	 /* enable RCC clock */
	 _RCC_GPIOA_ENABLE();
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <HAL_Init+0x158>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a52      	ldr	r2, [pc, #328]	; (8001760 <HAL_Init+0x158>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6193      	str	r3, [r2, #24]
	 _RCC_GPIOB_ENABLE();
 800161c:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_Init+0x158>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a4f      	ldr	r2, [pc, #316]	; (8001760 <HAL_Init+0x158>)
 8001622:	f043 0308 	orr.w	r3, r3, #8
 8001626:	6193      	str	r3, [r2, #24]
	 _RCC_SPI1_ENABLE();
 8001628:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_Init+0x158>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <HAL_Init+0x158>)
 800162e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001632:	6193      	str	r3, [r2, #24]
	 _RCC_DMA1_ENABLE();
 8001634:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_Init+0x158>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	4a49      	ldr	r2, [pc, #292]	; (8001760 <HAL_Init+0x158>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6153      	str	r3, [r2, #20]
	//  DMA_Init(spi1.txdma);

	//  SPI_Init(&spi1);

	/* Init SPI 2 as slave */
	_RCC_SPI2_ENABLE();
 8001640:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_Init+0x158>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	4a46      	ldr	r2, [pc, #280]	; (8001760 <HAL_Init+0x158>)
 8001646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164a:	61d3      	str	r3, [r2, #28]
	spi2.Instance = SPI2;
 800164c:	4b45      	ldr	r3, [pc, #276]	; (8001764 <HAL_Init+0x15c>)
 800164e:	4a46      	ldr	r2, [pc, #280]	; (8001768 <HAL_Init+0x160>)
 8001650:	601a      	str	r2, [r3, #0]
	spi2.Mode = SPI_MODE_SLAVE;
 8001652:	4b44      	ldr	r3, [pc, #272]	; (8001764 <HAL_Init+0x15c>)
 8001654:	2201      	movs	r2, #1
 8001656:	711a      	strb	r2, [r3, #4]
	spi2.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b42      	ldr	r3, [pc, #264]	; (8001764 <HAL_Init+0x15c>)
 800165a:	2200      	movs	r2, #0
 800165c:	745a      	strb	r2, [r3, #17]
	spi2.CPOL = SPI_CPOL_LOW;
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_Init+0x15c>)
 8001660:	2200      	movs	r2, #0
 8001662:	719a      	strb	r2, [r3, #6]
	spi2.CPHA = SPI_CPHA_1EDGE;
 8001664:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <HAL_Init+0x15c>)
 8001666:	2200      	movs	r2, #0
 8001668:	71da      	strb	r2, [r3, #7]
	spi2.BaudRate = SPI_BAUDRATE_DIV2;
 800166a:	4b3e      	ldr	r3, [pc, #248]	; (8001764 <HAL_Init+0x15c>)
 800166c:	2200      	movs	r2, #0
 800166e:	715a      	strb	r2, [r3, #5]
	spi2.NSS = SPI_NSS_HARD;
 8001670:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <HAL_Init+0x15c>)
 8001672:	2201      	movs	r2, #1
 8001674:	751a      	strb	r2, [r3, #20]
	spi2.BiDir = SPI_BIDIR_DISABLE;
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_Init+0x15c>)
 8001678:	2200      	movs	r2, #0
 800167a:	755a      	strb	r2, [r3, #21]
	spi2.CRC = SPI_CRC_DISABLE;
 800167c:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_Init+0x15c>)
 800167e:	2200      	movs	r2, #0
 8001680:	759a      	strb	r2, [r3, #22]
	spi2.FirstBit = SPI_LSB_FIRST;
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <HAL_Init+0x15c>)
 8001684:	2201      	movs	r2, #1
 8001686:	741a      	strb	r2, [r3, #16]
	spi2.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_Init+0x15c>)
 800168a:	2200      	movs	r2, #0
 800168c:	75da      	strb	r2, [r3, #23]
	spi2.CRCDir = SPI_CRC_TX;
 800168e:	4b35      	ldr	r3, [pc, #212]	; (8001764 <HAL_Init+0x15c>)
 8001690:	2201      	movs	r2, #1
 8001692:	761a      	strb	r2, [r3, #24]
	spi2.SpiTxDma = SPI_TX_DMA_DISABLE;
 8001694:	4b33      	ldr	r3, [pc, #204]	; (8001764 <HAL_Init+0x15c>)
 8001696:	2201      	movs	r2, #1
 8001698:	749a      	strb	r2, [r3, #18]
	spi2.SpiRxDma = SPI_RX_DMA_ENABLE;
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_Init+0x15c>)
 800169c:	2200      	movs	r2, #0
 800169e:	74da      	strb	r2, [r3, #19]

	/* Init MOSI,MISO,SCK,NSS pin configs */
	/* Init MOSI pin */
	mosi2.GPIO_TypeDef = PORT_SPI2;
 80016a0:	4b32      	ldr	r3, [pc, #200]	; (800176c <HAL_Init+0x164>)
 80016a2:	4a33      	ldr	r2, [pc, #204]	; (8001770 <HAL_Init+0x168>)
 80016a4:	601a      	str	r2, [r3, #0]
	mosi2.GPIO_Pin = MOSI_SPI2;
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_Init+0x164>)
 80016a8:	220f      	movs	r2, #15
 80016aa:	711a      	strb	r2, [r3, #4]
	mosi2.GPIO_Mode = GPIO_MODE_INPUT;
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <HAL_Init+0x164>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	715a      	strb	r2, [r3, #5]
	mosi2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 80016b2:	4b2e      	ldr	r3, [pc, #184]	; (800176c <HAL_Init+0x164>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&mosi2);
 80016b8:	482c      	ldr	r0, [pc, #176]	; (800176c <HAL_Init+0x164>)
 80016ba:	f7ff fb35 	bl	8000d28 <GPIO_Init>

	/* Init MISO pin */
	miso2.GPIO_TypeDef = PORT_SPI2;
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_Init+0x16c>)
 80016c0:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <HAL_Init+0x168>)
 80016c2:	601a      	str	r2, [r3, #0]
	miso2.GPIO_Pin = MISO_SPI2;
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_Init+0x16c>)
 80016c6:	220e      	movs	r2, #14
 80016c8:	711a      	strb	r2, [r3, #4]
	miso2.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_Init+0x16c>)
 80016cc:	2202      	movs	r2, #2
 80016ce:	715a      	strb	r2, [r3, #5]
	miso2.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <HAL_Init+0x16c>)
 80016d2:	2205      	movs	r2, #5
 80016d4:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&miso2);
 80016d6:	4827      	ldr	r0, [pc, #156]	; (8001774 <HAL_Init+0x16c>)
 80016d8:	f7ff fb26 	bl	8000d28 <GPIO_Init>

	/* Init SCK pin */
	sck2.GPIO_TypeDef = PORT_SPI2;
 80016dc:	4b26      	ldr	r3, [pc, #152]	; (8001778 <HAL_Init+0x170>)
 80016de:	4a24      	ldr	r2, [pc, #144]	; (8001770 <HAL_Init+0x168>)
 80016e0:	601a      	str	r2, [r3, #0]
	sck2.GPIO_Pin = SCK_SPI2;
 80016e2:	4b25      	ldr	r3, [pc, #148]	; (8001778 <HAL_Init+0x170>)
 80016e4:	220d      	movs	r2, #13
 80016e6:	711a      	strb	r2, [r3, #4]
	sck2.GPIO_Mode = GPIO_MODE_INPUT;
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_Init+0x170>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	715a      	strb	r2, [r3, #5]
	sck2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_Init+0x170>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&sck2);
 80016f4:	4820      	ldr	r0, [pc, #128]	; (8001778 <HAL_Init+0x170>)
 80016f6:	f7ff fb17 	bl	8000d28 <GPIO_Init>

	/* Init NSS pin */
	nss2.GPIO_TypeDef = PORT_SPI2;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_Init+0x174>)
 80016fc:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <HAL_Init+0x168>)
 80016fe:	601a      	str	r2, [r3, #0]
	nss2.GPIO_Pin = NSS_SPI2;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_Init+0x174>)
 8001702:	220c      	movs	r2, #12
 8001704:	711a      	strb	r2, [r3, #4]
	nss2.GPIO_Mode = GPIO_MODE_INPUT;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_Init+0x174>)
 8001708:	2200      	movs	r2, #0
 800170a:	715a      	strb	r2, [r3, #5]
	nss2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_Init+0x174>)
 800170e:	2201      	movs	r2, #1
 8001710:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&nss2);
 8001712:	481a      	ldr	r0, [pc, #104]	; (800177c <HAL_Init+0x174>)
 8001714:	f7ff fb08 	bl	8000d28 <GPIO_Init>
	
	/*Init DMA channels */
	spiRxdma.dma_TypeDef = DMA1_4;
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_Init+0x178>)
 800171a:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <HAL_Init+0x17c>)
 800171c:	601a      	str	r2, [r3, #0]
	spiRxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_Init+0x178>)
 8001720:	2201      	movs	r2, #1
 8001722:	721a      	strb	r2, [r3, #8]
	spiRxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <HAL_Init+0x178>)
 8001726:	2201      	movs	r2, #1
 8001728:	711a      	strb	r2, [r3, #4]
	spiRxdma.dma_Direction = DMA_READ_FROM_PERIPHERAL;
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_Init+0x178>)
 800172c:	2200      	movs	r2, #0
 800172e:	715a      	strb	r2, [r3, #5]
	spiRxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <HAL_Init+0x178>)
 8001732:	2200      	movs	r2, #0
 8001734:	719a      	strb	r2, [r3, #6]
	spiRxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_Init+0x178>)
 8001738:	2200      	movs	r2, #0
 800173a:	71da      	strb	r2, [r3, #7]
	spiRxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_Init+0x178>)
 800173e:	2200      	movs	r2, #0
 8001740:	725a      	strb	r2, [r3, #9]
	spiRxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <HAL_Init+0x178>)
 8001744:	2201      	movs	r2, #1
 8001746:	729a      	strb	r2, [r3, #10]
	spiRxdma.dma_Interrupt = DMA_INTERRUPT_ENABLE;
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_Init+0x178>)
 800174a:	2200      	movs	r2, #0
 800174c:	72da      	strb	r2, [r3, #11]

	spi2.rxdma = &spiRxdma;
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_Init+0x15c>)
 8001750:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_Init+0x178>)
 8001752:	60da      	str	r2, [r3, #12]

	//DMA_Init(spi2.rxdma);


	SPI_Init(&spi2);
 8001754:	4803      	ldr	r0, [pc, #12]	; (8001764 <HAL_Init+0x15c>)
 8001756:	f7ff fd41 	bl	80011dc <SPI_Init>
	// DMA_Init(&dma);
	// DMA_SetCallBackFn(&dma,DMA1_1_CallbackFn);
	// DMA_Transfer(&dma, sendArray, receiveArray,2);


}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	200000b4 	.word	0x200000b4
 8001768:	40003800 	.word	0x40003800
 800176c:	200000a4 	.word	0x200000a4
 8001770:	40010c00 	.word	0x40010c00
 8001774:	200000d0 	.word	0x200000d0
 8001778:	200000f8 	.word	0x200000f8
 800177c:	2000010c 	.word	0x2000010c
 8001780:	20000100 	.word	0x20000100
 8001784:	40020044 	.word	0x40020044

08001788 <WWDG_IRQHandler>:
{
	GPIOA->ODR ^= (1<<0);
}

void WWDG_IRQHandler()
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <WWDG_IRQHandler+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <WWDG_IRQHandler+0x18>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40010800 	.word	0x40010800

080017a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a4:	480d      	ldr	r0, [pc, #52]	; (80017dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	; (80017e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LoopForever+0xe>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <LoopForever+0x16>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017d2:	f000 f811 	bl	80017f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d6:	f7ff feeb 	bl	80015b0 <main>

080017da <LoopForever>:

LoopForever:
    b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   r0, =_estack
 80017dc:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80017e8:	08001860 	.word	0x08001860
  ldr r2, =_sbss
 80017ec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80017f0:	20000130 	.word	0x20000130

080017f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_2_IRQHandler>
	...

080017f8 <__libc_init_array>:
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	2600      	movs	r6, #0
 80017fc:	4d0c      	ldr	r5, [pc, #48]	; (8001830 <__libc_init_array+0x38>)
 80017fe:	4c0d      	ldr	r4, [pc, #52]	; (8001834 <__libc_init_array+0x3c>)
 8001800:	1b64      	subs	r4, r4, r5
 8001802:	10a4      	asrs	r4, r4, #2
 8001804:	42a6      	cmp	r6, r4
 8001806:	d109      	bne.n	800181c <__libc_init_array+0x24>
 8001808:	f000 f81a 	bl	8001840 <_init>
 800180c:	2600      	movs	r6, #0
 800180e:	4d0a      	ldr	r5, [pc, #40]	; (8001838 <__libc_init_array+0x40>)
 8001810:	4c0a      	ldr	r4, [pc, #40]	; (800183c <__libc_init_array+0x44>)
 8001812:	1b64      	subs	r4, r4, r5
 8001814:	10a4      	asrs	r4, r4, #2
 8001816:	42a6      	cmp	r6, r4
 8001818:	d105      	bne.n	8001826 <__libc_init_array+0x2e>
 800181a:	bd70      	pop	{r4, r5, r6, pc}
 800181c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001820:	4798      	blx	r3
 8001822:	3601      	adds	r6, #1
 8001824:	e7ee      	b.n	8001804 <__libc_init_array+0xc>
 8001826:	f855 3b04 	ldr.w	r3, [r5], #4
 800182a:	4798      	blx	r3
 800182c:	3601      	adds	r6, #1
 800182e:	e7f2      	b.n	8001816 <__libc_init_array+0x1e>
 8001830:	08001858 	.word	0x08001858
 8001834:	08001858 	.word	0x08001858
 8001838:	08001858 	.word	0x08001858
 800183c:	0800185c 	.word	0x0800185c

08001840 <_init>:
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	bf00      	nop
 8001844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001846:	bc08      	pop	{r3}
 8001848:	469e      	mov	lr, r3
 800184a:	4770      	bx	lr

0800184c <_fini>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	bf00      	nop
 8001850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001852:	bc08      	pop	{r3}
 8001854:	469e      	mov	lr, r3
 8001856:	4770      	bx	lr
