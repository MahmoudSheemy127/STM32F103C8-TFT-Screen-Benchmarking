
ARM-Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bec  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d1c  08000d1c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d1c  08000d1c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000d1c  08000d1c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d1c  08000d1c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000004  08000d28  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08000d28  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c6d  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005e3  00000000  00000000  00021c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00022280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a0  00000000  00000000  00022478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000b09  00000000  00000000  00022618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001240  00000000  00000000  00023121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005db1  00000000  00000000  00024361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002a112  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000650  00000000  00000000  0002a168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d04 	.word	0x08000d04

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000d04 	.word	0x08000d04

08000170 <SYSTICK_Init>:

#include "CortexM3/SYSTICK_M3.h"


void SYSTICK_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/* Disable SYSTICK */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <SYSTICK_Init+0x30>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <SYSTICK_Init+0x30>)
 800017a:	f023 0301 	bic.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt*/
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <SYSTICK_Init+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <SYSTICK_Init+0x30>)
 8000186:	f043 0302 	orr.w	r3, r3, #2
 800018a:	6013      	str	r3, [r2, #0]
	/* Set Prescaler of the Systick*/
	if(SYSTICK_CLK_SRC_PRESCALER == SYSTICK_CLK_SRC_PRESCALER_1)
	{
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_CLKSOURCE_BIT_POS);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <SYSTICK_Init+0x30>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <SYSTICK_Init+0x30>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	6013      	str	r3, [r2, #0]
	}	
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	e000e010 	.word	0xe000e010

080001a4 <SYSTICK_DelayMs>:

void SYSTICK_DelayMs(uint32_t copy_u32DelayMs)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	/* Disable Systick */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 80001ac:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a19      	ldr	r2, [pc, #100]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001b2:	f023 0301 	bic.w	r3, r3, #1
 80001b6:	6013      	str	r3, [r2, #0]
	/* Set number of overflows */
	uint32_t overFlowCounter = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	60fb      	str	r3, [r7, #12]
	uint32_t totalOverFlows = copy_u32DelayMs;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	60bb      	str	r3, [r7, #8]
	/* Set Preload register value */
	SYSTICK_SetNumOfTicks(SYSTICK_ONE_MILLISECOND_TICKS);
 80001c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80001c4:	f000 f82a 	bl	800021c <SYSTICK_SetNumOfTicks>
	/* Disable Systick Interrupt */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 80001c8:	4b13      	ldr	r3, [pc, #76]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a12      	ldr	r2, [pc, #72]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ce:	f023 0302 	bic.w	r3, r3, #2
 80001d2:	6013      	str	r3, [r2, #0]
	/* Enable SYSTICK */
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 80001d4:	4b10      	ldr	r3, [pc, #64]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	6013      	str	r3, [r2, #0]

	/* Loop over number of overflows */
	while(overFlowCounter < totalOverFlows)
 80001e0:	e010      	b.n	8000204 <SYSTICK_DelayMs+0x60>
	{
		/* Wait till flag is raised */
		while(0 == GET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS));
 80001e2:	bf00      	nop
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	0c1b      	lsrs	r3, r3, #16
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f8      	beq.n	80001e4 <SYSTICK_DelayMs+0x40>
		/* Clear flag */
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS);
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a08      	ldr	r2, [pc, #32]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]
		/* Increment overflow counter */
		overFlowCounter++;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	3301      	adds	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]
	while(overFlowCounter < totalOverFlows)
 8000204:	68fa      	ldr	r2, [r7, #12]
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	429a      	cmp	r2, r3
 800020a:	d3ea      	bcc.n	80001e2 <SYSTICK_DelayMs+0x3e>
	}
	/* Wait till flag is raised */
}
 800020c:	bf00      	nop
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <SYSTICK_SetNumOfTicks>:

static void SYSTICK_SetNumOfTicks(uint32_t copy_u32SystickNumOfTicks)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	/* Set Number of ticks*/
	if(copy_u32SystickNumOfTicks > SYSTICK_MAX_PRE_COUNT)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800022a:	d904      	bls.n	8000236 <SYSTICK_SetNumOfTicks+0x1a>
	{
			SYSTICK->SYSRVR	= SYSTICK_MAX_PRE_COUNT;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <SYSTICK_SetNumOfTicks+0x2c>)
 800022e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000232:	605a      	str	r2, [r3, #4]
	}
	else
	{
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
	}
}
 8000234:	e002      	b.n	800023c <SYSTICK_SetNumOfTicks+0x20>
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
 8000236:	4a04      	ldr	r2, [pc, #16]	; (8000248 <SYSTICK_SetNumOfTicks+0x2c>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6053      	str	r3, [r2, #4]
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e010 	.word	0xe000e010

0800024c <SysTick_Handler>:
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
}


void SysTick_Handler()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	if(SYSTICK_OverflowCounter < SYSTICK_NumOfOverflows)
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <SysTick_Handler+0x2c>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <SysTick_Handler+0x30>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	429a      	cmp	r2, r3
 800025a:	d205      	bcs.n	8000268 <SysTick_Handler+0x1c>
	{
		SYSTICK_OverflowCounter++;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <SysTick_Handler+0x2c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <SysTick_Handler+0x2c>)
 8000264:	6013      	str	r3, [r2, #0]
	else
	{
		SYSTICK_OverflowCounter = 0;
		SYSTICK_CallBackFunction();
	}
 8000266:	e005      	b.n	8000274 <SysTick_Handler+0x28>
		SYSTICK_OverflowCounter = 0;
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <SysTick_Handler+0x2c>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
		SYSTICK_CallBackFunction();
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Handler+0x34>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4798      	blx	r3
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000020 	.word	0x20000020
 800027c:	20000028 	.word	0x20000028
 8000280:	20000024 	.word	0x20000024

08000284 <DMA1_Channel1_IRQHandler>:
    return hal_Status;
}


void DMA1_Channel1_IRQHandler()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
    DMA1_1_CallbackFnPtr();
 8000288:	4b02      	ldr	r3, [pc, #8]	; (8000294 <DMA1_Channel1_IRQHandler+0x10>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4798      	blx	r3
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000002c 	.word	0x2000002c

08000298 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    DMA1_2_CallbackFnPtr();
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <DMA1_Channel2_IRQHandler+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4798      	blx	r3
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000038 	.word	0x20000038

080002ac <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 80002b0:	4b02      	ldr	r3, [pc, #8]	; (80002bc <DMA1_Channel3_IRQHandler+0x10>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4798      	blx	r3
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000030 	.word	0x20000030

080002c0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler()
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0

}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler()
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0

}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler()
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr

080002fc <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler()
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0

}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler()
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0

}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr

08000314 <GPIO_Init>:
 */

#include "Drivers/GPIO/GPIO.h"

HAL_Status GPIO_Init(GPIO_HandleTypeDef* gpio_handle)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d102      	bne.n	800032c <GPIO_Init+0x18>
    {
        status = HAL_ERROR;
 8000326:	2301      	movs	r3, #1
 8000328:	73fb      	strb	r3, [r7, #15]
 800032a:	e20e      	b.n	800074a <GPIO_Init+0x436>
    }
    else
    {
        /* Check if pin number is less than 8 */
        if(gpio_handle->GPIO_Pin < GPIO_PIN_8)
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	791b      	ldrb	r3, [r3, #4]
 8000330:	2b07      	cmp	r3, #7
 8000332:	f200 80fd 	bhi.w	8000530 <GPIO_Init+0x21c>
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	795b      	ldrb	r3, [r3, #5]
 800033a:	2b03      	cmp	r3, #3
 800033c:	d876      	bhi.n	800042c <GPIO_Init+0x118>
 800033e:	a201      	add	r2, pc, #4	; (adr r2, 8000344 <GPIO_Init+0x30>)
 8000340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000344:	08000355 	.word	0x08000355
 8000348:	0800038b 	.word	0x0800038b
 800034c:	080003c1 	.word	0x080003c1
 8000350:	080003f7 	.word	0x080003f7
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	6819      	ldr	r1, [r3, #0]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	791b      	ldrb	r3, [r3, #4]
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	220f      	movs	r2, #15
 8000362:	fa02 f303 	lsl.w	r3, r2, r3
 8000366:	43da      	mvns	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	400a      	ands	r2, r1
 800036e:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x04UL << (gpio_handle->GPIO_Pin * 4));
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	6819      	ldr	r1, [r3, #0]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	2204      	movs	r2, #4
 800037e:	409a      	lsls	r2, r3
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	430a      	orrs	r2, r1
 8000386:	601a      	str	r2, [r3, #0]
                    break;
 8000388:	e053      	b.n	8000432 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	6819      	ldr	r1, [r3, #0]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	220f      	movs	r2, #15
 8000398:	fa02 f303 	lsl.w	r3, r2, r3
 800039c:	43da      	mvns	r2, r3
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	400a      	ands	r2, r1
 80003a4:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6819      	ldr	r1, [r3, #0]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	2201      	movs	r2, #1
 80003b4:	409a      	lsls	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	430a      	orrs	r2, r1
 80003bc:	601a      	str	r2, [r3, #0]
                    break;
 80003be:	e038      	b.n	8000432 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	6819      	ldr	r1, [r3, #0]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	791b      	ldrb	r3, [r3, #4]
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	220f      	movs	r2, #15
 80003ce:	fa02 f303 	lsl.w	r3, r2, r3
 80003d2:	43da      	mvns	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	400a      	ands	r2, r1
 80003da:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4));
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	6819      	ldr	r1, [r3, #0]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	2202      	movs	r2, #2
 80003ea:	409a      	lsls	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
                    break;
 80003f4:	e01d      	b.n	8000432 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6819      	ldr	r1, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	220f      	movs	r2, #15
 8000404:	fa02 f303 	lsl.w	r3, r2, r3
 8000408:	43da      	mvns	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	400a      	ands	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6819      	ldr	r1, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	009b      	lsls	r3, r3, #2
 800041e:	2203      	movs	r2, #3
 8000420:	409a      	lsls	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	430a      	orrs	r2, r1
 8000428:	601a      	str	r2, [r3, #0]
                    break;
 800042a:	e002      	b.n	8000432 <GPIO_Init+0x11e>
                default:
                    status = HAL_ERROR;
 800042c:	2301      	movs	r3, #1
 800042e:	73fb      	strb	r3, [r7, #15]
                    break;
 8000430:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	799b      	ldrb	r3, [r3, #6]
 8000436:	2b06      	cmp	r3, #6
 8000438:	d877      	bhi.n	800052a <GPIO_Init+0x216>
 800043a:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <GPIO_Init+0x12c>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	0800045d 	.word	0x0800045d
 8000444:	0800047d 	.word	0x0800047d
 8000448:	080004b7 	.word	0x080004b7
 800044c:	0800045d 	.word	0x0800045d
 8000450:	0800047d 	.word	0x0800047d
 8000454:	080004b7 	.word	0x080004b7
 8000458:	080004f1 	.word	0x080004f1
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6819      	ldr	r1, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	3302      	adds	r3, #2
 800046a:	2203      	movs	r2, #3
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	43da      	mvns	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	400a      	ands	r2, r1
 8000478:	601a      	str	r2, [r3, #0]
                    break;
 800047a:	e166      	b.n	800074a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	6819      	ldr	r1, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	3302      	adds	r3, #2
 800048a:	2203      	movs	r2, #3
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
 8000490:	43da      	mvns	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	400a      	ands	r2, r1
 8000498:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	6819      	ldr	r1, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	791b      	ldrb	r3, [r3, #4]
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	3302      	adds	r3, #2
 80004a8:	2201      	movs	r2, #1
 80004aa:	409a      	lsls	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	430a      	orrs	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
                    break;
 80004b4:	e149      	b.n	800074a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	6819      	ldr	r1, [r3, #0]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	3302      	adds	r3, #2
 80004c4:	2203      	movs	r2, #3
 80004c6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ca:	43da      	mvns	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	400a      	ands	r2, r1
 80004d2:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6819      	ldr	r1, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	3302      	adds	r3, #2
 80004e2:	2202      	movs	r2, #2
 80004e4:	409a      	lsls	r2, r3
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	601a      	str	r2, [r3, #0]
                    break;
 80004ee:	e12c      	b.n	800074a <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	6819      	ldr	r1, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	3302      	adds	r3, #2
 80004fe:	2203      	movs	r2, #3
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	43da      	mvns	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	400a      	ands	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	6819      	ldr	r1, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	3302      	adds	r3, #2
 800051c:	2203      	movs	r2, #3
 800051e:	409a      	lsls	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	430a      	orrs	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
                    break;
 8000528:	e10f      	b.n	800074a <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	73fb      	strb	r3, [r7, #15]
                    break;
 800052e:	e10c      	b.n	800074a <GPIO_Init+0x436>
            }
        }
        else
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d87f      	bhi.n	8000638 <GPIO_Init+0x324>
 8000538:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <GPIO_Init+0x22c>)
 800053a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800053e:	bf00      	nop
 8000540:	08000551 	.word	0x08000551
 8000544:	0800058b 	.word	0x0800058b
 8000548:	080005c5 	.word	0x080005c5
 800054c:	080005ff 	.word	0x080005ff
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	6859      	ldr	r1, [r3, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	3b08      	subs	r3, #8
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	220f      	movs	r2, #15
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	43da      	mvns	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	400a      	ands	r2, r1
 800056c:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x04UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	6859      	ldr	r1, [r3, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	3b08      	subs	r3, #8
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	2204      	movs	r2, #4
 800057e:	409a      	lsls	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	430a      	orrs	r2, r1
 8000586:	605a      	str	r2, [r3, #4]
                    break;
 8000588:	e059      	b.n	800063e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6859      	ldr	r1, [r3, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	3b08      	subs	r3, #8
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	220f      	movs	r2, #15
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	43da      	mvns	r2, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	400a      	ands	r2, r1
 80005a6:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	6859      	ldr	r1, [r3, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	791b      	ldrb	r3, [r3, #4]
 80005b2:	3b08      	subs	r3, #8
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	2201      	movs	r2, #1
 80005b8:	409a      	lsls	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	430a      	orrs	r2, r1
 80005c0:	605a      	str	r2, [r3, #4]
                    break;
 80005c2:	e03c      	b.n	800063e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6859      	ldr	r1, [r3, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	3b08      	subs	r3, #8
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	220f      	movs	r2, #15
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	43da      	mvns	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	400a      	ands	r2, r1
 80005e0:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6859      	ldr	r1, [r3, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	3b08      	subs	r3, #8
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	2202      	movs	r2, #2
 80005f2:	409a      	lsls	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	605a      	str	r2, [r3, #4]
                    break;
 80005fc:	e01f      	b.n	800063e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	6859      	ldr	r1, [r3, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	3b08      	subs	r3, #8
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	220f      	movs	r2, #15
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	43da      	mvns	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	400a      	ands	r2, r1
 800061a:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6859      	ldr	r1, [r3, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	3b08      	subs	r3, #8
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	2203      	movs	r2, #3
 800062c:	409a      	lsls	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	430a      	orrs	r2, r1
 8000634:	605a      	str	r2, [r3, #4]
                    break;
 8000636:	e002      	b.n	800063e <GPIO_Init+0x32a>
                default:
                    status = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
                    break;
 800063c:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	799b      	ldrb	r3, [r3, #6]
 8000642:	2b06      	cmp	r3, #6
 8000644:	d87e      	bhi.n	8000744 <GPIO_Init+0x430>
 8000646:	a201      	add	r2, pc, #4	; (adr r2, 800064c <GPIO_Init+0x338>)
 8000648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800064c:	08000669 	.word	0x08000669
 8000650:	0800068b 	.word	0x0800068b
 8000654:	080006c9 	.word	0x080006c9
 8000658:	08000669 	.word	0x08000669
 800065c:	0800068b 	.word	0x0800068b
 8000660:	080006c9 	.word	0x080006c9
 8000664:	08000707 	.word	0x08000707
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	6859      	ldr	r1, [r3, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	3b08      	subs	r3, #8
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	3302      	adds	r3, #2
 8000678:	2203      	movs	r2, #3
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43da      	mvns	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	400a      	ands	r2, r1
 8000686:	605a      	str	r2, [r3, #4]
                    break;
 8000688:	e05f      	b.n	800074a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6859      	ldr	r1, [r3, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	3b08      	subs	r3, #8
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	3302      	adds	r3, #2
 800069a:	2203      	movs	r2, #3
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	43da      	mvns	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	400a      	ands	r2, r1
 80006a8:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6859      	ldr	r1, [r3, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	3b08      	subs	r3, #8
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	3302      	adds	r3, #2
 80006ba:	2201      	movs	r2, #1
 80006bc:	409a      	lsls	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	605a      	str	r2, [r3, #4]
                    break;
 80006c6:	e040      	b.n	800074a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	6859      	ldr	r1, [r3, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	791b      	ldrb	r3, [r3, #4]
 80006d2:	3b08      	subs	r3, #8
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	3302      	adds	r3, #2
 80006d8:	2203      	movs	r2, #3
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	400a      	ands	r2, r1
 80006e6:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6859      	ldr	r1, [r3, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	3b08      	subs	r3, #8
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	3302      	adds	r3, #2
 80006f8:	2202      	movs	r2, #2
 80006fa:	409a      	lsls	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	430a      	orrs	r2, r1
 8000702:	605a      	str	r2, [r3, #4]
                    break;
 8000704:	e021      	b.n	800074a <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6859      	ldr	r1, [r3, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	3b08      	subs	r3, #8
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	3302      	adds	r3, #2
 8000716:	2203      	movs	r2, #3
 8000718:	fa02 f303 	lsl.w	r3, r2, r3
 800071c:	43da      	mvns	r2, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	400a      	ands	r2, r1
 8000724:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6859      	ldr	r1, [r3, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	3b08      	subs	r3, #8
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	3302      	adds	r3, #2
 8000736:	2203      	movs	r2, #3
 8000738:	409a      	lsls	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	430a      	orrs	r2, r1
 8000740:	605a      	str	r2, [r3, #4]
                    break;
 8000742:	e002      	b.n	800074a <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8000744:	2301      	movs	r3, #1
 8000746:	73fb      	strb	r3, [r7, #15]
                    break;
 8000748:	bf00      	nop
        }

    }    
    }
    return status;
 800074a:	7bfb      	ldrb	r3, [r7, #15]

}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <SPI_Init>:
#include "Drivers/SPI/SPI.h"


HAL_Status SPI_Init(SPI_HandleTypeDef* hspi)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]

    if(NULL == hspi)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d102      	bne.n	8000770 <SPI_Init+0x18>
    {
        status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
 800076e:	e102      	b.n	8000976 <SPI_Init+0x21e>
    }
    else
    {
        
        /* Enable SPI */
        SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800077e:	601a      	str	r2, [r3, #0]
        /* Set SPI mode */
        if(hspi->Mode == SPI_MODE_MASTER)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d108      	bne.n	800079a <SPI_Init+0x42>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 0204 	orr.w	r2, r2, #4
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	e00e      	b.n	80007b8 <SPI_Init+0x60>
        }
        else if(hspi->Mode == SPI_MODE_SLAVE)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d108      	bne.n	80007b4 <SPI_Init+0x5c>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f022 0204 	bic.w	r2, r2, #4
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	e001      	b.n	80007b8 <SPI_Init+0x60>
        }
        else
        {
            status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Data Size */
        if(hspi->DataSize == SPI_DATASIZE_8BIT)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7a5b      	ldrb	r3, [r3, #9]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d108      	bne.n	80007d2 <SPI_Init+0x7a>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	e00e      	b.n	80007f0 <SPI_Init+0x98>
        }
        else if(hspi->DataSize == SPI_DATASIZE_16BIT)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7a5b      	ldrb	r3, [r3, #9]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d108      	bne.n	80007ec <SPI_Init+0x94>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	e001      	b.n	80007f0 <SPI_Init+0x98>
        }
        else
        {
            status = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Polarity */
        if(hspi->CPOL == SPI_CPOL_LOW)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	799b      	ldrb	r3, [r3, #6]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d108      	bne.n	800080a <SPI_Init+0xb2>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f022 0202 	bic.w	r2, r2, #2
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	e00e      	b.n	8000828 <SPI_Init+0xd0>
        }
        else if(hspi->CPOL == SPI_CPOL_HIGH)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	799b      	ldrb	r3, [r3, #6]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d108      	bne.n	8000824 <SPI_Init+0xcc>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f042 0202 	orr.w	r2, r2, #2
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	e001      	b.n	8000828 <SPI_Init+0xd0>
        }
        else
        {
           status = HAL_ERROR;
 8000824:	2301      	movs	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Phase */
        if(hspi->CPHA == SPI_CPHA_1EDGE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	79db      	ldrb	r3, [r3, #7]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d108      	bne.n	8000842 <SPI_Init+0xea>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f022 0201 	bic.w	r2, r2, #1
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e00e      	b.n	8000860 <SPI_Init+0x108>
        }
        else if(hspi->CPHA == SPI_CPHA_2EDGE)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	79db      	ldrb	r3, [r3, #7]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d108      	bne.n	800085c <SPI_Init+0x104>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f042 0201 	orr.w	r2, r2, #1
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	e001      	b.n	8000860 <SPI_Init+0x108>
        }
        else
        {
            status = HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Slave Select */
        if(hspi->NSS == SPI_NSS_HARD)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7a9b      	ldrb	r3, [r3, #10]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d108      	bne.n	800087a <SPI_Init+0x122>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	e00e      	b.n	8000898 <SPI_Init+0x140>
        }
        else if(hspi->NSS == SPI_NSS_SOFT)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	7a9b      	ldrb	r3, [r3, #10]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d108      	bne.n	8000894 <SPI_Init+0x13c>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	e001      	b.n	8000898 <SPI_Init+0x140>
        }
        else
        {
            status = HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Baud Rate */
        switch(hspi->BaudRate)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	795b      	ldrb	r3, [r3, #5]
 800089c:	2b07      	cmp	r3, #7
 800089e:	d867      	bhi.n	8000970 <SPI_Init+0x218>
 80008a0:	a201      	add	r2, pc, #4	; (adr r2, 80008a8 <SPI_Init+0x150>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080008c9 	.word	0x080008c9
 80008ac:	080008db 	.word	0x080008db
 80008b0:	080008f1 	.word	0x080008f1
 80008b4:	08000907 	.word	0x08000907
 80008b8:	0800091d 	.word	0x0800091d
 80008bc:	08000933 	.word	0x08000933
 80008c0:	08000949 	.word	0x08000949
 80008c4:	0800095f 	.word	0x0800095f
        {
            case SPI_BAUDRATE_DIV2:
                // Code for SPI_BAUD_RATE_DIV
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK , SPI_BAUDRATE_DIV2 << SPI_CR1_BR);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80008d6:	601a      	str	r2, [r3, #0]
                break;
 80008d8:	e04d      	b.n	8000976 <SPI_Init+0x21e>
            // Add more cases for other baud rates
            case SPI_BAUDRATE_DIV4:
                // Code for SPI_BAUDRATE_DIV4
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV4 << SPI_CR1_BR);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f042 0208 	orr.w	r2, r2, #8
 80008ec:	601a      	str	r2, [r3, #0]
                break;
 80008ee:	e042      	b.n	8000976 <SPI_Init+0x21e>
            case SPI_BAUDRATE_DIV8:
                // Code for SPI_BAUDRATE_DIV8
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV8 << SPI_CR1_BR);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0210 	orr.w	r2, r2, #16
 8000902:	601a      	str	r2, [r3, #0]
                break;
 8000904:	e037      	b.n	8000976 <SPI_Init+0x21e>
            case SPI_BAUDRATE_DIV16:
                // Code for SPI_BAUDRATE_DIV16
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV16 << SPI_CR1_BR);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f042 0218 	orr.w	r2, r2, #24
 8000918:	601a      	str	r2, [r3, #0]
                break;  
 800091a:	e02c      	b.n	8000976 <SPI_Init+0x21e>
            case SPI_BAUDRATE_DIV32:
                // Code for SPI_BAUDRATE_DIV32
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV32 << SPI_CR1_BR);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f042 0220 	orr.w	r2, r2, #32
 800092e:	601a      	str	r2, [r3, #0]
                break;
 8000930:	e021      	b.n	8000976 <SPI_Init+0x21e>
            case SPI_BAUDRATE_DIV64:
                // Code for SPI_BAUDRATE_DIV64
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV64 << SPI_CR1_BR);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8000944:	601a      	str	r2, [r3, #0]
                break;
 8000946:	e016      	b.n	8000976 <SPI_Init+0x21e>
            case SPI_BAUDRATE_DIV128:
                // Code for SPI_BAUDRATE_DIV128
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV128 << SPI_CR1_BR);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800095a:	601a      	str	r2, [r3, #0]
                break;
 800095c:	e00b      	b.n	8000976 <SPI_Init+0x21e>
            case SPI_BAUDRATE_DIV256:
                // Code for SPI_BAUDRATE_DIV256
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV256 << SPI_CR1_BR);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800096c:	601a      	str	r2, [r3, #0]
                break;
 800096e:	e002      	b.n	8000976 <SPI_Init+0x21e>
            default:
                /*------ Take some action ---- */
                status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	73fb      	strb	r3, [r7, #15]
                break;
 8000974:	bf00      	nop
        }

    }
    return status;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <SPI_Transmit>:
 * @param Timeout 
 * @return HAL_Status 
 */

HAL_Status SPI_Transmit(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size, uint32_t Timeout)
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
 8000990:	603b      	str	r3, [r7, #0]
    HAL_Status status = HAL_OKAY;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]
    if((NULL == hspi) || (NULL == pData))
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <SPI_Transmit+0x1e>
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <SPI_Transmit+0x24>
    {
        status = HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	75fb      	strb	r3, [r7, #23]
 80009a6:	e035      	b.n	8000a14 <SPI_Transmit+0x90>
    }
    else
    {
           /* Init TX counter */
           uint32_t counter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
           /* Check size */
           if(hspi->DataSize == SPI_DATASIZE_8BIT)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7a5b      	ldrb	r3, [r3, #9]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d12b      	bne.n	8000a0c <SPI_Transmit+0x88>
           {
            /* 8-bit DataSize */
            while(counter < Size)
 80009b4:	e012      	b.n	80009dc <SPI_Transmit+0x58>
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 80009b6:	bf00      	nop
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	085b      	lsrs	r3, r3, #1
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d0f7      	beq.n	80009b8 <SPI_Transmit+0x34>
                hspi->Instance->DR = (uint8_t)pData[counter];
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	4413      	add	r3, r2
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60da      	str	r2, [r3, #12]
                counter++;
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	3301      	adds	r3, #1
 80009da:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d3e8      	bcc.n	80009b6 <SPI_Transmit+0x32>
 80009e4:	e016      	b.n	8000a14 <SPI_Transmit+0x90>
            {
            /* 16-bit DataSize */
            while(counter < Size)
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 80009e6:	bf00      	nop
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	085b      	lsrs	r3, r3, #1
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f7      	beq.n	80009e8 <SPI_Transmit+0x64>
                hspi->Instance->DR = (uint16_t)pData[counter];
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	4413      	add	r3, r2
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60da      	str	r2, [r3, #12]
                counter++;
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d3e8      	bcc.n	80009e6 <SPI_Transmit+0x62>
            }           
            }
    }
    return status;
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	371c      	adds	r7, #28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr

08000a20 <main>:
void DMA1_1_CallbackFn();

void HAL_Init();

int main(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

	HAL_Init();
 8000a24:	f000 f810 	bl	8000a48 <HAL_Init>
	/* Loop forever */
	while(1)
	{
		SPI_Transmit(&spi1, sendArray, 2, 1000);
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	4904      	ldr	r1, [pc, #16]	; (8000a40 <main+0x20>)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <main+0x24>)
 8000a32:	f7ff ffa7 	bl	8000984 <SPI_Transmit>
		SYSTICK_DelayMs(500);
 8000a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a3a:	f7ff fbb3 	bl	80001a4 <SYSTICK_DelayMs>
		SPI_Transmit(&spi1, sendArray, 2, 1000);
 8000a3e:	e7f3      	b.n	8000a28 <main+0x8>
 8000a40:	20000000 	.word	0x20000000
 8000a44:	200000a8 	.word	0x200000a8

08000a48 <HAL_Init>:
	_RCC_GPIOD_ENABLE();

}

void HAL_Init()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	/* Init Systick */
	SYSTICK_Init();
 8000a4c:	f7ff fb90 	bl	8000170 <SYSTICK_Init>
	/* enable RCC clock */
	_RCC_GPIOA_ENABLE();
 8000a50:	4b6f      	ldr	r3, [pc, #444]	; (8000c10 <HAL_Init+0x1c8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a6e      	ldr	r2, [pc, #440]	; (8000c10 <HAL_Init+0x1c8>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	6193      	str	r3, [r2, #24]
	_RCC_GPIOB_ENABLE();
 8000a5c:	4b6c      	ldr	r3, [pc, #432]	; (8000c10 <HAL_Init+0x1c8>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a6b      	ldr	r2, [pc, #428]	; (8000c10 <HAL_Init+0x1c8>)
 8000a62:	f043 0308 	orr.w	r3, r3, #8
 8000a66:	6193      	str	r3, [r2, #24]
	_RCC_SPI1_ENABLE();
 8000a68:	4b69      	ldr	r3, [pc, #420]	; (8000c10 <HAL_Init+0x1c8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a68      	ldr	r2, [pc, #416]	; (8000c10 <HAL_Init+0x1c8>)
 8000a6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a72:	6193      	str	r3, [r2, #24]
	/* Init SPI 1 as master */
	spi1.Instance = SPI1;
 8000a74:	4b67      	ldr	r3, [pc, #412]	; (8000c14 <HAL_Init+0x1cc>)
 8000a76:	4a68      	ldr	r2, [pc, #416]	; (8000c18 <HAL_Init+0x1d0>)
 8000a78:	601a      	str	r2, [r3, #0]
	spi1.Mode = SPI_MODE_MASTER;
 8000a7a:	4b66      	ldr	r3, [pc, #408]	; (8000c14 <HAL_Init+0x1cc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	711a      	strb	r2, [r3, #4]
	spi1.DataSize = SPI_DATASIZE_8BIT;
 8000a80:	4b64      	ldr	r3, [pc, #400]	; (8000c14 <HAL_Init+0x1cc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	725a      	strb	r2, [r3, #9]
	spi1.CPOL = SPI_CPOL_LOW;
 8000a86:	4b63      	ldr	r3, [pc, #396]	; (8000c14 <HAL_Init+0x1cc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	719a      	strb	r2, [r3, #6]
	spi1.CPHA = SPI_CPHA_1EDGE;
 8000a8c:	4b61      	ldr	r3, [pc, #388]	; (8000c14 <HAL_Init+0x1cc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	71da      	strb	r2, [r3, #7]
	spi1.BaudRate = SPI_BAUDRATE_DIV2;
 8000a92:	4b60      	ldr	r3, [pc, #384]	; (8000c14 <HAL_Init+0x1cc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	715a      	strb	r2, [r3, #5]
	spi1.NSS = SPI_NSS_HARD;
 8000a98:	4b5e      	ldr	r3, [pc, #376]	; (8000c14 <HAL_Init+0x1cc>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	729a      	strb	r2, [r3, #10]
	spi1.BiDir = SPI_BIDIR_DISABLE;
 8000a9e:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <HAL_Init+0x1cc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	72da      	strb	r2, [r3, #11]
	spi1.CRC = SPI_CRC_DISABLE;
 8000aa4:	4b5b      	ldr	r3, [pc, #364]	; (8000c14 <HAL_Init+0x1cc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	731a      	strb	r2, [r3, #12]
	spi1.FirstBit = SPI_LSB_FIRST;
 8000aaa:	4b5a      	ldr	r3, [pc, #360]	; (8000c14 <HAL_Init+0x1cc>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	721a      	strb	r2, [r3, #8]
	spi1.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 8000ab0:	4b58      	ldr	r3, [pc, #352]	; (8000c14 <HAL_Init+0x1cc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	735a      	strb	r2, [r3, #13]
	spi1.CRCDir = SPI_CRC_TX;
 8000ab6:	4b57      	ldr	r3, [pc, #348]	; (8000c14 <HAL_Init+0x1cc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	739a      	strb	r2, [r3, #14]

	/* Init MOSI,MISO,SCK,NSS pin configs */
	/* Init MOSI pin */
	mosi1.GPIO_TypeDef = PORT_SPI1;
 8000abc:	4b57      	ldr	r3, [pc, #348]	; (8000c1c <HAL_Init+0x1d4>)
 8000abe:	4a58      	ldr	r2, [pc, #352]	; (8000c20 <HAL_Init+0x1d8>)
 8000ac0:	601a      	str	r2, [r3, #0]
	mosi1.GPIO_Pin = MOSI_SPI1;
 8000ac2:	4b56      	ldr	r3, [pc, #344]	; (8000c1c <HAL_Init+0x1d4>)
 8000ac4:	2207      	movs	r2, #7
 8000ac6:	711a      	strb	r2, [r3, #4]
	mosi1.GPIO_Mode = GPIO_MODE_OUTPUT_50MHZ;
 8000ac8:	4b54      	ldr	r3, [pc, #336]	; (8000c1c <HAL_Init+0x1d4>)
 8000aca:	2203      	movs	r2, #3
 8000acc:	715a      	strb	r2, [r3, #5]
	mosi1.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8000ace:	4b53      	ldr	r3, [pc, #332]	; (8000c1c <HAL_Init+0x1d4>)
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&mosi1);
 8000ad4:	4851      	ldr	r0, [pc, #324]	; (8000c1c <HAL_Init+0x1d4>)
 8000ad6:	f7ff fc1d 	bl	8000314 <GPIO_Init>

	/* Init MISO pin */
	miso1.GPIO_TypeDef = PORT_SPI1;
 8000ada:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <HAL_Init+0x1dc>)
 8000adc:	4a50      	ldr	r2, [pc, #320]	; (8000c20 <HAL_Init+0x1d8>)
 8000ade:	601a      	str	r2, [r3, #0]
	miso1.GPIO_Pin = MISO_SPI1;
 8000ae0:	4b50      	ldr	r3, [pc, #320]	; (8000c24 <HAL_Init+0x1dc>)
 8000ae2:	2206      	movs	r2, #6
 8000ae4:	711a      	strb	r2, [r3, #4]
	miso1.GPIO_Mode = GPIO_MODE_INPUT;
 8000ae6:	4b4f      	ldr	r3, [pc, #316]	; (8000c24 <HAL_Init+0x1dc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	715a      	strb	r2, [r3, #5]
	miso1.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8000aec:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <HAL_Init+0x1dc>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&miso1);
 8000af2:	484c      	ldr	r0, [pc, #304]	; (8000c24 <HAL_Init+0x1dc>)
 8000af4:	f7ff fc0e 	bl	8000314 <GPIO_Init>

	/* Init SCK pin */
	sck1.GPIO_TypeDef = PORT_SPI1;
 8000af8:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <HAL_Init+0x1e0>)
 8000afa:	4a49      	ldr	r2, [pc, #292]	; (8000c20 <HAL_Init+0x1d8>)
 8000afc:	601a      	str	r2, [r3, #0]
	sck1.GPIO_Pin = SCK_SPI1;
 8000afe:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <HAL_Init+0x1e0>)
 8000b00:	2205      	movs	r2, #5
 8000b02:	711a      	strb	r2, [r3, #4]
	sck1.GPIO_Mode = GPIO_MODE_OUTPUT_50MHZ;
 8000b04:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <HAL_Init+0x1e0>)
 8000b06:	2203      	movs	r2, #3
 8000b08:	715a      	strb	r2, [r3, #5]
	sck1.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8000b0a:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <HAL_Init+0x1e0>)
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&sck1);
 8000b10:	4845      	ldr	r0, [pc, #276]	; (8000c28 <HAL_Init+0x1e0>)
 8000b12:	f7ff fbff 	bl	8000314 <GPIO_Init>

	/* Init NSS pin */
	nss1.GPIO_TypeDef = PORT_SPI1;
 8000b16:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <HAL_Init+0x1e4>)
 8000b18:	4a41      	ldr	r2, [pc, #260]	; (8000c20 <HAL_Init+0x1d8>)
 8000b1a:	601a      	str	r2, [r3, #0]
	nss1.GPIO_Pin = NSS_SPI1;
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <HAL_Init+0x1e4>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	711a      	strb	r2, [r3, #4]
	nss1.GPIO_Mode = GPIO_MODE_OUTPUT_50MHZ;
 8000b22:	4b42      	ldr	r3, [pc, #264]	; (8000c2c <HAL_Init+0x1e4>)
 8000b24:	2203      	movs	r2, #3
 8000b26:	715a      	strb	r2, [r3, #5]
	nss1.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8000b28:	4b40      	ldr	r3, [pc, #256]	; (8000c2c <HAL_Init+0x1e4>)
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&nss1);
 8000b2e:	483f      	ldr	r0, [pc, #252]	; (8000c2c <HAL_Init+0x1e4>)
 8000b30:	f7ff fbf0 	bl	8000314 <GPIO_Init>

	SPI_Init(&spi1);
 8000b34:	4837      	ldr	r0, [pc, #220]	; (8000c14 <HAL_Init+0x1cc>)
 8000b36:	f7ff fe0f 	bl	8000758 <SPI_Init>

	/* Init SPI 2 as slave */
	_RCC_SPI2_ENABLE();
 8000b3a:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <HAL_Init+0x1c8>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	4a34      	ldr	r2, [pc, #208]	; (8000c10 <HAL_Init+0x1c8>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	61d3      	str	r3, [r2, #28]
	spi2.Instance = SPI2;
 8000b46:	4b3a      	ldr	r3, [pc, #232]	; (8000c30 <HAL_Init+0x1e8>)
 8000b48:	4a3a      	ldr	r2, [pc, #232]	; (8000c34 <HAL_Init+0x1ec>)
 8000b4a:	601a      	str	r2, [r3, #0]
	spi2.Mode = SPI_MODE_SLAVE;
 8000b4c:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <HAL_Init+0x1e8>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	711a      	strb	r2, [r3, #4]
	spi2.DataSize = SPI_DATASIZE_8BIT;
 8000b52:	4b37      	ldr	r3, [pc, #220]	; (8000c30 <HAL_Init+0x1e8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	725a      	strb	r2, [r3, #9]
	spi2.CPOL = SPI_CPOL_LOW;
 8000b58:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <HAL_Init+0x1e8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	719a      	strb	r2, [r3, #6]
	spi2.CPHA = SPI_CPHA_1EDGE;
 8000b5e:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <HAL_Init+0x1e8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	71da      	strb	r2, [r3, #7]
	spi2.BaudRate = SPI_BAUDRATE_DIV2;
 8000b64:	4b32      	ldr	r3, [pc, #200]	; (8000c30 <HAL_Init+0x1e8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	715a      	strb	r2, [r3, #5]
	spi2.NSS = SPI_NSS_HARD;
 8000b6a:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <HAL_Init+0x1e8>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	729a      	strb	r2, [r3, #10]
	spi2.BiDir = SPI_BIDIR_DISABLE;
 8000b70:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <HAL_Init+0x1e8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	72da      	strb	r2, [r3, #11]
	spi2.CRC = SPI_CRC_DISABLE;
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <HAL_Init+0x1e8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	731a      	strb	r2, [r3, #12]
	spi2.FirstBit = SPI_LSB_FIRST;
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <HAL_Init+0x1e8>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	721a      	strb	r2, [r3, #8]
	spi2.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 8000b82:	4b2b      	ldr	r3, [pc, #172]	; (8000c30 <HAL_Init+0x1e8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	735a      	strb	r2, [r3, #13]
	spi2.CRCDir = SPI_CRC_TX;
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <HAL_Init+0x1e8>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	739a      	strb	r2, [r3, #14]

	/* Init MOSI,MISO,SCK,NSS pin configs */
	/* Init MOSI pin */
	mosi2.GPIO_TypeDef = PORT_SPI2;
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_Init+0x1f0>)
 8000b90:	4a2a      	ldr	r2, [pc, #168]	; (8000c3c <HAL_Init+0x1f4>)
 8000b92:	601a      	str	r2, [r3, #0]
	mosi2.GPIO_Pin = MOSI_SPI2;
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_Init+0x1f0>)
 8000b96:	220f      	movs	r2, #15
 8000b98:	711a      	strb	r2, [r3, #4]
	mosi2.GPIO_Mode = GPIO_MODE_OUTPUT_50MHZ;
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_Init+0x1f0>)
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	715a      	strb	r2, [r3, #5]
	mosi2.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8000ba0:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <HAL_Init+0x1f0>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&mosi2);
 8000ba6:	4824      	ldr	r0, [pc, #144]	; (8000c38 <HAL_Init+0x1f0>)
 8000ba8:	f7ff fbb4 	bl	8000314 <GPIO_Init>

	/* Init MISO pin */
	miso2.GPIO_TypeDef = PORT_SPI2;
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <HAL_Init+0x1f8>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <HAL_Init+0x1f4>)
 8000bb0:	601a      	str	r2, [r3, #0]
	miso2.GPIO_Pin = MISO_SPI2;
 8000bb2:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <HAL_Init+0x1f8>)
 8000bb4:	220e      	movs	r2, #14
 8000bb6:	711a      	strb	r2, [r3, #4]
	miso2.GPIO_Mode = GPIO_MODE_INPUT;
 8000bb8:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <HAL_Init+0x1f8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	715a      	strb	r2, [r3, #5]
	miso2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_Init+0x1f8>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&miso2);
 8000bc4:	481e      	ldr	r0, [pc, #120]	; (8000c40 <HAL_Init+0x1f8>)
 8000bc6:	f7ff fba5 	bl	8000314 <GPIO_Init>

	/* Init SCK pin */
	sck2.GPIO_TypeDef = PORT_SPI2;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <HAL_Init+0x1fc>)
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_Init+0x1f4>)
 8000bce:	601a      	str	r2, [r3, #0]
	sck2.GPIO_Pin = SCK_SPI2;
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <HAL_Init+0x1fc>)
 8000bd2:	220d      	movs	r2, #13
 8000bd4:	711a      	strb	r2, [r3, #4]
	sck2.GPIO_Mode = GPIO_MODE_OUTPUT_50MHZ;
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <HAL_Init+0x1fc>)
 8000bd8:	2203      	movs	r2, #3
 8000bda:	715a      	strb	r2, [r3, #5]
	sck2.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_Init+0x1fc>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&sck2);
 8000be2:	4818      	ldr	r0, [pc, #96]	; (8000c44 <HAL_Init+0x1fc>)
 8000be4:	f7ff fb96 	bl	8000314 <GPIO_Init>

	/* Init NSS pin */
	nss2.GPIO_TypeDef = PORT_SPI2;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <HAL_Init+0x200>)
 8000bea:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <HAL_Init+0x1f4>)
 8000bec:	601a      	str	r2, [r3, #0]
	nss2.GPIO_Pin = NSS_SPI2;
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_Init+0x200>)
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	711a      	strb	r2, [r3, #4]
	nss2.GPIO_Mode = GPIO_MODE_OUTPUT_50MHZ;
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <HAL_Init+0x200>)
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	715a      	strb	r2, [r3, #5]
	nss2.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_Init+0x200>)
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&nss2);
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <HAL_Init+0x200>)
 8000c02:	f7ff fb87 	bl	8000314 <GPIO_Init>
	
	SPI_Init(&spi2);
 8000c06:	480a      	ldr	r0, [pc, #40]	; (8000c30 <HAL_Init+0x1e8>)
 8000c08:	f7ff fda6 	bl	8000758 <SPI_Init>
	// DMA_Init(&dma);
	// DMA_SetCallBackFn(&dma,DMA1_1_CallbackFn);
	// DMA_Transfer(&dma, sendArray, receiveArray,2);


}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	200000a8 	.word	0x200000a8
 8000c18:	40013000 	.word	0x40013000
 8000c1c:	20000088 	.word	0x20000088
 8000c20:	40010800 	.word	0x40010800
 8000c24:	20000090 	.word	0x20000090
 8000c28:	2000007c 	.word	0x2000007c
 8000c2c:	2000005c 	.word	0x2000005c
 8000c30:	20000064 	.word	0x20000064
 8000c34:	40003800 	.word	0x40003800
 8000c38:	20000054 	.word	0x20000054
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	20000074 	.word	0x20000074
 8000c44:	20000098 	.word	0x20000098
 8000c48:	200000a0 	.word	0x200000a0

08000c4c <WWDG_IRQHandler>:
{
	GPIOA->ODR ^= (1<<0);
}

void WWDG_IRQHandler()
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <WWDG_IRQHandler+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	4a03      	ldr	r2, [pc, #12]	; (8000c64 <WWDG_IRQHandler+0x18>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40010800 	.word	0x40010800

08000c68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopForever+0xe>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopForever+0x16>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c96:	f000 f811 	bl	8000cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff fec1 	bl	8000a20 <main>

08000c9e <LoopForever>:

LoopForever:
    b LoopForever
 8000c9e:	e7fe      	b.n	8000c9e <LoopForever>
  ldr   r0, =_estack
 8000ca0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000cac:	08000d24 	.word	0x08000d24
  ldr r2, =_sbss
 8000cb0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000cb4:	200000b8 	.word	0x200000b8

08000cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC1_2_IRQHandler>
	...

08000cbc <__libc_init_array>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4d0c      	ldr	r5, [pc, #48]	; (8000cf4 <__libc_init_array+0x38>)
 8000cc2:	4c0d      	ldr	r4, [pc, #52]	; (8000cf8 <__libc_init_array+0x3c>)
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	10a4      	asrs	r4, r4, #2
 8000cc8:	42a6      	cmp	r6, r4
 8000cca:	d109      	bne.n	8000ce0 <__libc_init_array+0x24>
 8000ccc:	f000 f81a 	bl	8000d04 <_init>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	4d0a      	ldr	r5, [pc, #40]	; (8000cfc <__libc_init_array+0x40>)
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	; (8000d00 <__libc_init_array+0x44>)
 8000cd6:	1b64      	subs	r4, r4, r5
 8000cd8:	10a4      	asrs	r4, r4, #2
 8000cda:	42a6      	cmp	r6, r4
 8000cdc:	d105      	bne.n	8000cea <__libc_init_array+0x2e>
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce4:	4798      	blx	r3
 8000ce6:	3601      	adds	r6, #1
 8000ce8:	e7ee      	b.n	8000cc8 <__libc_init_array+0xc>
 8000cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cee:	4798      	blx	r3
 8000cf0:	3601      	adds	r6, #1
 8000cf2:	e7f2      	b.n	8000cda <__libc_init_array+0x1e>
 8000cf4:	08000d1c 	.word	0x08000d1c
 8000cf8:	08000d1c 	.word	0x08000d1c
 8000cfc:	08000d1c 	.word	0x08000d1c
 8000d00:	08000d20 	.word	0x08000d20

08000d04 <_init>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	bf00      	nop
 8000d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0a:	bc08      	pop	{r3}
 8000d0c:	469e      	mov	lr, r3
 8000d0e:	4770      	bx	lr

08000d10 <_fini>:
 8000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d12:	bf00      	nop
 8000d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d16:	bc08      	pop	{r3}
 8000d18:	469e      	mov	lr, r3
 8000d1a:	4770      	bx	lr
