
ARM-Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000504  08000504  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000504  08000504  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000504  08000504  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000504  08000504  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000504  08000504  00010504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800050c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000008  08000514  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000514  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009b4  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000028f  00000000  00000000  000209e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00020c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00020d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000697  00000000  00000000  00020db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000742  00000000  00000000  00021447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004e0d  00000000  00000000  00021b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00026996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001e4  00000000  00000000  000269ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	080004ec 	.word	0x080004ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	080004ec 	.word	0x080004ec

08000170 <DMA_Init>:
 *   copy_dmaHandle: Pointer to the DMA handle structure containing the configuration.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if initialization is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Init(DMA_HandleTypeDef *copy_dmaHandle){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

    HAL_Status hal_Status = HAL_OKAY;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_dmaHandle)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d102      	bne.n	8000188 <DMA_Init+0x18>
    {
        hal_Status = HAL_ERROR;
 8000182:	2301      	movs	r3, #1
 8000184:	73fb      	strb	r3, [r7, #15]
 8000186:	e084      	b.n	8000292 <DMA_Init+0x122>
    }
    else
    {
    switch(copy_dmaHandle->dma_Direction)
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	795b      	ldrb	r3, [r3, #5]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d002      	beq.n	8000196 <DMA_Init+0x26>
 8000190:	2b01      	cmp	r3, #1
 8000192:	d009      	beq.n	80001a8 <DMA_Init+0x38>
 8000194:	e015      	b.n	80001c2 <DMA_Init+0x52>
    {
        case DMA_READ_FROM_PERIPHERAL:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	689a      	ldr	r2, [r3, #8]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	f022 0210 	bic.w	r2, r2, #16
 80001a4:	609a      	str	r2, [r3, #8]
            break;
 80001a6:	e00c      	b.n	80001c2 <DMA_Init+0x52>
        case DMA_READ_FROM_MEMORY:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	689a      	ldr	r2, [r3, #8]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f042 0210 	orr.w	r2, r2, #16
 80001b6:	609a      	str	r2, [r3, #8]
            copy_dmaHandle->dma_TypeDef->CCR = 1<<4;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2210      	movs	r2, #16
 80001be:	609a      	str	r2, [r3, #8]
            break;
 80001c0:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mem2Mem)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	7a1b      	ldrb	r3, [r3, #8]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d002      	beq.n	80001d0 <DMA_Init+0x60>
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d009      	beq.n	80001e2 <DMA_Init+0x72>
 80001ce:	e011      	b.n	80001f4 <DMA_Init+0x84>
    {
        case DMA_MEM2MEM_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	689a      	ldr	r2, [r3, #8]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80001de:	609a      	str	r2, [r3, #8]
            break;
 80001e0:	e008      	b.n	80001f4 <DMA_Init+0x84>
        case DMA_MEM2MEM_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	689a      	ldr	r2, [r3, #8]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80001f0:	609a      	str	r2, [r3, #8]
            break;
 80001f2:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mode)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	791b      	ldrb	r3, [r3, #4]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d00e      	beq.n	800021a <DMA_Init+0xaa>
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d116      	bne.n	800022e <DMA_Init+0xbe>
    {
        case DMA_NON_CIRCULAR_MODE:
            if(copy_dmaHandle->dma_Mem2Mem != DMA_MEM2MEM_ENABLE )
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	7a1b      	ldrb	r3, [r3, #8]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d011      	beq.n	800022c <DMA_Init+0xbc>
            {
                CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	689a      	ldr	r2, [r3, #8]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f022 0220 	bic.w	r2, r2, #32
 8000216:	609a      	str	r2, [r3, #8]

            }
            break;
 8000218:	e008      	b.n	800022c <DMA_Init+0xbc>
        case DMA_CIRCULAR_MODE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	689a      	ldr	r2, [r3, #8]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f042 0220 	orr.w	r2, r2, #32
 8000228:	609a      	str	r2, [r3, #8]
            break;
 800022a:	e000      	b.n	800022e <DMA_Init+0xbe>
            break;
 800022c:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_MemIncMode)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	7a5b      	ldrb	r3, [r3, #9]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <DMA_Init+0xcc>
 8000236:	2b01      	cmp	r3, #1
 8000238:	d009      	beq.n	800024e <DMA_Init+0xde>
 800023a:	e011      	b.n	8000260 <DMA_Init+0xf0>
    {
        case DMA_MEM_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800024a:	609a      	str	r2, [r3, #8]
            break;
 800024c:	e008      	b.n	8000260 <DMA_Init+0xf0>
        case DMA_MEM_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	689a      	ldr	r2, [r3, #8]
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800025c:	609a      	str	r2, [r3, #8]
            break;
 800025e:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_PeriphIncMode)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	7a9b      	ldrb	r3, [r3, #10]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d002      	beq.n	800026e <DMA_Init+0xfe>
 8000268:	2b01      	cmp	r3, #1
 800026a:	d009      	beq.n	8000280 <DMA_Init+0x110>
 800026c:	e011      	b.n	8000292 <DMA_Init+0x122>
    {
        case DMA_PERIPH_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	689a      	ldr	r2, [r3, #8]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800027c:	609a      	str	r2, [r3, #8]
            break;
 800027e:	e008      	b.n	8000292 <DMA_Init+0x122>
        case DMA_PERIPH_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	689a      	ldr	r2, [r3, #8]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800028e:	609a      	str	r2, [r3, #8]
            break;
 8000290:	bf00      	nop
    }
    }
    return hal_Status;
 8000292:	7bfb      	ldrb	r3, [r7, #15]
}
 8000294:	4618      	mov	r0, r3
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr

0800029e <DMA_SetPeriphAddress>:
 *   copy_u32PeriphAddress: Pointer to the peripheral address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetPeriphAddress(DMA_HandleTypeDef *copy_dmaHandle,uint32_t *copy_u32PeriphAddress){
 800029e:	b480      	push	{r7}
 80002a0:	b085      	sub	sp, #20
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80002a8:	2300      	movs	r3, #0
 80002aa:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32PeriphAddress || NULL == copy_dmaHandle )
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d002      	beq.n	80002b8 <DMA_SetPeriphAddress+0x1a>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d102      	bne.n	80002be <DMA_SetPeriphAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 80002b8:	2301      	movs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	e003      	b.n	80002c6 <DMA_SetPeriphAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CPAR = copy_u32PeriphAddress;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	611a      	str	r2, [r3, #16]
    }
    return hal_Status;
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr

080002d2 <DMA_SetMemoryAddress>:
 *   copy_u32MemAddress: Pointer to the memory address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetMemoryAddress(DMA_HandleTypeDef *copy_dmaHandle ,uint32_t *copy_u32MemAddress){
 80002d2:	b480      	push	{r7}
 80002d4:	b085      	sub	sp, #20
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
 80002da:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80002dc:	2300      	movs	r3, #0
 80002de:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32MemAddress || NULL == copy_dmaHandle )
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <DMA_SetMemoryAddress+0x1a>
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d102      	bne.n	80002f2 <DMA_SetMemoryAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 80002ec:	2301      	movs	r3, #1
 80002ee:	73fb      	strb	r3, [r7, #15]
 80002f0:	e003      	b.n	80002fa <DMA_SetMemoryAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CMAR = copy_u32MemAddress;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	683a      	ldr	r2, [r7, #0]
 80002f8:	615a      	str	r2, [r3, #20]
    }
    return hal_Status;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <DMA_Start>:
 *   hdma: Pointer to the DMA handle structure.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if starting the transfer is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Start(DMA_HandleTypeDef *hdma){
 8000306:	b480      	push	{r7}
 8000308:	b085      	sub	sp, #20
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <DMA_Start+0x18>
    {
        hal_Status = HAL_ERROR;
 8000318:	2301      	movs	r3, #1
 800031a:	73fb      	strb	r3, [r7, #15]
 800031c:	e007      	b.n	800032e <DMA_Start+0x28>
    }
    else
    {
        SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	689a      	ldr	r2, [r3, #8]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f042 0201 	orr.w	r2, r2, #1
 800032c:	609a      	str	r2, [r3, #8]
    }
    return hal_Status;
 800032e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000330:	4618      	mov	r0, r3
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr

0800033a <DMA_SetDataCounter>:
 * @param copy_u32DataLength: The number of data items to be transferred by the DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_SetDataCounter(DMA_HandleTypeDef *hdma, uint32_t copy_u32DataLength)
{
 800033a:	b480      	push	{r7}
 800033c:	b085      	sub	sp, #20
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
 8000342:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000344:	2300      	movs	r3, #0
 8000346:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d102      	bne.n	8000354 <DMA_SetDataCounter+0x1a>
    {
        hal_Status = HAL_ERROR;
 800034e:	2301      	movs	r3, #1
 8000350:	73fb      	strb	r3, [r7, #15]
 8000352:	e003      	b.n	800035c <DMA_SetDataCounter+0x22>
    }
    else
    {
        hdma->dma_TypeDef->CNTDR = copy_u32DataLength;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	683a      	ldr	r2, [r7, #0]
 800035a:	60da      	str	r2, [r3, #12]
        // SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
    }
    return hal_Status;
 800035c:	7bfb      	ldrb	r3, [r7, #15]

}
 800035e:	4618      	mov	r0, r3
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <main>:
/* Define Global arrays */
uint32_t sendArray[2] = {2, 3};
uint32_t receiveArray[2];

int main(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0

	RCC->RCC_APB2ENR |= (1 << 2);
 800036e:	4b1e      	ldr	r3, [pc, #120]	; (80003e8 <main+0x80>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a1d      	ldr	r2, [pc, #116]	; (80003e8 <main+0x80>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	6193      	str	r3, [r2, #24]
//	Clock_Config();
	GPIOA->CRL |= (1 << 0);
 800037a:	4b1c      	ldr	r3, [pc, #112]	; (80003ec <main+0x84>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a1b      	ldr	r2, [pc, #108]	; (80003ec <main+0x84>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1 << 2);
 8000386:	4b19      	ldr	r3, [pc, #100]	; (80003ec <main+0x84>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	4a18      	ldr	r2, [pc, #96]	; (80003ec <main+0x84>)
 800038c:	f023 0304 	bic.w	r3, r3, #4
 8000390:	6013      	str	r3, [r2, #0]
	// NVIC_SetEnableInterrupt(NVIC_IRQ_SysTick_Handler);
//	SYSTICK_Start(10UL,blinkLed);
	//set as output
	//GPIOA->ODR |= (1 << 0);
	DMA_HandleTypeDef dma;
	dma.dma_TypeDef = DMA1_1;
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <main+0x88>)
 8000394:	603b      	str	r3, [r7, #0]
	dma.dma_Direction = DMA_READ_FROM_MEMORY;
 8000396:	2301      	movs	r3, #1
 8000398:	717b      	strb	r3, [r7, #5]
	dma.dma_Mem2Mem = DMA_MEM2MEM_ENABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	723b      	strb	r3, [r7, #8]
	dma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 800039e:	2300      	movs	r3, #0
 80003a0:	727b      	strb	r3, [r7, #9]
	dma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 80003a2:	2301      	movs	r3, #1
 80003a4:	713b      	strb	r3, [r7, #4]
	DMA_Init(&dma);
 80003a6:	463b      	mov	r3, r7
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff fee1 	bl	8000170 <DMA_Init>
	DMA_Transfer(&dma, sendArray, receiveArray,2);
 80003ae:	4638      	mov	r0, r7
 80003b0:	2302      	movs	r3, #2
 80003b2:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <main+0x8c>)
 80003b4:	4910      	ldr	r1, [pc, #64]	; (80003f8 <main+0x90>)
 80003b6:	f000 f831 	bl	800041c <DMA_Transfer>
	for (uint32_t i = 0; i < 1000000; i++);
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	e002      	b.n	80003c6 <main+0x5e>
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <main+0x94>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d9f8      	bls.n	80003c0 <main+0x58>
	//GPIOA->ODR |= (1 << 0);
	//GPIOA->ODR ^= (1<<0);
	if(sendArray[0] == receiveArray[0])
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <main+0x90>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <main+0x8c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	429a      	cmp	r2, r3
 80003d8:	d105      	bne.n	80003e6 <main+0x7e>
	{
		GPIOA->ODR |= (1 << 0);
 80003da:	4b04      	ldr	r3, [pc, #16]	; (80003ec <main+0x84>)
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	4a03      	ldr	r2, [pc, #12]	; (80003ec <main+0x84>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	60d3      	str	r3, [r2, #12]
//	}

		/* Start operation move from array to another array */

		/* Loop forever */
		for (;;);
 80003e6:	e7fe      	b.n	80003e6 <main+0x7e>
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010800 	.word	0x40010800
 80003f0:	40020000 	.word	0x40020000
 80003f4:	20000024 	.word	0x20000024
 80003f8:	20000000 	.word	0x20000000
 80003fc:	000f423f 	.word	0x000f423f

08000400 <WWDG_IRQHandler>:
{
	GPIOA->ODR ^= (1<<0);
}

void WWDG_IRQHandler()
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <WWDG_IRQHandler+0x18>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a03      	ldr	r2, [pc, #12]	; (8000418 <WWDG_IRQHandler+0x18>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	60d3      	str	r3, [r2, #12]

}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40010800 	.word	0x40010800

0800041c <DMA_Transfer>:

void DMA_Transfer(DMA_HandleTypeDef *hdma, uint32_t *srcData, uint32_t *destData, uint32_t dataLength)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
 8000428:	603b      	str	r3, [r7, #0]
	DMA_SetMemoryAddress(hdma, srcData);
 800042a:	68b9      	ldr	r1, [r7, #8]
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f7ff ff50 	bl	80002d2 <DMA_SetMemoryAddress>
	DMA_SetPeriphAddress(hdma, destData);
 8000432:	6879      	ldr	r1, [r7, #4]
 8000434:	68f8      	ldr	r0, [r7, #12]
 8000436:	f7ff ff32 	bl	800029e <DMA_SetPeriphAddress>
	DMA_SetDataCounter(hdma, dataLength);
 800043a:	6839      	ldr	r1, [r7, #0]
 800043c:	68f8      	ldr	r0, [r7, #12]
 800043e:	f7ff ff7c 	bl	800033a <DMA_SetDataCounter>
	DMA_Start(hdma);
 8000442:	68f8      	ldr	r0, [r7, #12]
 8000444:	f7ff ff5f 	bl	8000306 <DMA_Start>
}
 8000448:	bf00      	nop
 800044a:	3710      	adds	r7, #16
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000450:	480d      	ldr	r0, [pc, #52]	; (8000488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000452:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000454:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480c      	ldr	r0, [pc, #48]	; (800048c <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490d      	ldr	r1, [pc, #52]	; (8000490 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0a      	ldr	r2, [pc, #40]	; (8000498 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0a      	ldr	r4, [pc, #40]	; (800049c <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800047e:	f000 f811 	bl	80004a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000482:	f7ff ff71 	bl	8000368 <main>

08000486 <LoopForever>:

LoopForever:
    b LoopForever
 8000486:	e7fe      	b.n	8000486 <LoopForever>
  ldr   r0, =_estack
 8000488:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800048c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000490:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000494:	0800050c 	.word	0x0800050c
  ldr r2, =_sbss
 8000498:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800049c:	2000002c 	.word	0x2000002c

080004a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a0:	e7fe      	b.n	80004a0 <ADC1_2_IRQHandler>
	...

080004a4 <__libc_init_array>:
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	2600      	movs	r6, #0
 80004a8:	4d0c      	ldr	r5, [pc, #48]	; (80004dc <__libc_init_array+0x38>)
 80004aa:	4c0d      	ldr	r4, [pc, #52]	; (80004e0 <__libc_init_array+0x3c>)
 80004ac:	1b64      	subs	r4, r4, r5
 80004ae:	10a4      	asrs	r4, r4, #2
 80004b0:	42a6      	cmp	r6, r4
 80004b2:	d109      	bne.n	80004c8 <__libc_init_array+0x24>
 80004b4:	f000 f81a 	bl	80004ec <_init>
 80004b8:	2600      	movs	r6, #0
 80004ba:	4d0a      	ldr	r5, [pc, #40]	; (80004e4 <__libc_init_array+0x40>)
 80004bc:	4c0a      	ldr	r4, [pc, #40]	; (80004e8 <__libc_init_array+0x44>)
 80004be:	1b64      	subs	r4, r4, r5
 80004c0:	10a4      	asrs	r4, r4, #2
 80004c2:	42a6      	cmp	r6, r4
 80004c4:	d105      	bne.n	80004d2 <__libc_init_array+0x2e>
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004cc:	4798      	blx	r3
 80004ce:	3601      	adds	r6, #1
 80004d0:	e7ee      	b.n	80004b0 <__libc_init_array+0xc>
 80004d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d6:	4798      	blx	r3
 80004d8:	3601      	adds	r6, #1
 80004da:	e7f2      	b.n	80004c2 <__libc_init_array+0x1e>
 80004dc:	08000504 	.word	0x08000504
 80004e0:	08000504 	.word	0x08000504
 80004e4:	08000504 	.word	0x08000504
 80004e8:	08000508 	.word	0x08000508

080004ec <_init>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr

080004f8 <_fini>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr
