
ARM-Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001810  08001810  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001810  08001810  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001810  08001810  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001810  08001810  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001810  08001810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001814  08001814  00011814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001818  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000004  0800181c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  0800181c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f27  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000843  00000000  00000000  00022f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  00023798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000240  00000000  00000000  00023a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000c93  00000000  00000000  00023c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000183d  00000000  00000000  00024913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000062a4  00000000  00000000  00026150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002c3f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000900  00000000  00000000  0002c448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080017f8 	.word	0x080017f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080017f8 	.word	0x080017f8

08000170 <SYSTICK_Init>:

#include "CortexM3/SYSTICK_M3.h"


void SYSTICK_Init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/* Disable SYSTICK */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <SYSTICK_Init+0x30>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <SYSTICK_Init+0x30>)
 800017a:	f023 0301 	bic.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt*/
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <SYSTICK_Init+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <SYSTICK_Init+0x30>)
 8000186:	f043 0302 	orr.w	r3, r3, #2
 800018a:	6013      	str	r3, [r2, #0]
	/* Set Prescaler of the Systick*/
	if(SYSTICK_CLK_SRC_PRESCALER == SYSTICK_CLK_SRC_PRESCALER_1)
	{
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_CLKSOURCE_BIT_POS);
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <SYSTICK_Init+0x30>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <SYSTICK_Init+0x30>)
 8000192:	f043 0304 	orr.w	r3, r3, #4
 8000196:	6013      	str	r3, [r2, #0]
	}	
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	e000e010 	.word	0xe000e010

080001a4 <SYSTICK_DelayMs>:

void SYSTICK_DelayMs(uint32_t copy_u32DelayMs)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
	/* Disable Systick */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 80001ac:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a19      	ldr	r2, [pc, #100]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001b2:	f023 0301 	bic.w	r3, r3, #1
 80001b6:	6013      	str	r3, [r2, #0]
	/* Set number of overflows */
	uint32_t overFlowCounter = 0;
 80001b8:	2300      	movs	r3, #0
 80001ba:	60fb      	str	r3, [r7, #12]
	uint32_t totalOverFlows = copy_u32DelayMs;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	60bb      	str	r3, [r7, #8]
	/* Set Preload register value */
	SYSTICK_SetNumOfTicks(SYSTICK_ONE_MILLISECOND_TICKS);
 80001c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80001c4:	f000 f82a 	bl	800021c <SYSTICK_SetNumOfTicks>
	/* Disable Systick Interrupt */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 80001c8:	4b13      	ldr	r3, [pc, #76]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a12      	ldr	r2, [pc, #72]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001ce:	f023 0302 	bic.w	r3, r3, #2
 80001d2:	6013      	str	r3, [r2, #0]
	/* Enable SYSTICK */
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 80001d4:	4b10      	ldr	r3, [pc, #64]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	6013      	str	r3, [r2, #0]

	/* Loop over number of overflows */
	while(overFlowCounter < totalOverFlows)
 80001e0:	e010      	b.n	8000204 <SYSTICK_DelayMs+0x60>
	{
		/* Wait till flag is raised */
		while(0 == GET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS));
 80001e2:	bf00      	nop
 80001e4:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	0c1b      	lsrs	r3, r3, #16
 80001ea:	f003 0301 	and.w	r3, r3, #1
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f8      	beq.n	80001e4 <SYSTICK_DelayMs+0x40>
		/* Clear flag */
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS);
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a08      	ldr	r2, [pc, #32]	; (8000218 <SYSTICK_DelayMs+0x74>)
 80001f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]
		/* Increment overflow counter */
		overFlowCounter++;
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	3301      	adds	r3, #1
 8000202:	60fb      	str	r3, [r7, #12]
	while(overFlowCounter < totalOverFlows)
 8000204:	68fa      	ldr	r2, [r7, #12]
 8000206:	68bb      	ldr	r3, [r7, #8]
 8000208:	429a      	cmp	r2, r3
 800020a:	d3ea      	bcc.n	80001e2 <SYSTICK_DelayMs+0x3e>
	}
	/* Wait till flag is raised */
}
 800020c:	bf00      	nop
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <SYSTICK_SetNumOfTicks>:

static void SYSTICK_SetNumOfTicks(uint32_t copy_u32SystickNumOfTicks)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	/* Set Number of ticks*/
	if(copy_u32SystickNumOfTicks > SYSTICK_MAX_PRE_COUNT)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800022a:	d904      	bls.n	8000236 <SYSTICK_SetNumOfTicks+0x1a>
	{
			SYSTICK->SYSRVR	= SYSTICK_MAX_PRE_COUNT;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <SYSTICK_SetNumOfTicks+0x2c>)
 800022e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000232:	605a      	str	r2, [r3, #4]
	}
	else
	{
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
	}
}
 8000234:	e002      	b.n	800023c <SYSTICK_SetNumOfTicks+0x20>
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
 8000236:	4a04      	ldr	r2, [pc, #16]	; (8000248 <SYSTICK_SetNumOfTicks+0x2c>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	6053      	str	r3, [r2, #4]
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e010 	.word	0xe000e010

0800024c <SysTick_Handler>:
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
}


void SysTick_Handler()
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	if(SYSTICK_OverflowCounter < SYSTICK_NumOfOverflows)
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <SysTick_Handler+0x2c>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <SysTick_Handler+0x30>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	429a      	cmp	r2, r3
 800025a:	d205      	bcs.n	8000268 <SysTick_Handler+0x1c>
	{
		SYSTICK_OverflowCounter++;
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <SysTick_Handler+0x2c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3301      	adds	r3, #1
 8000262:	4a05      	ldr	r2, [pc, #20]	; (8000278 <SysTick_Handler+0x2c>)
 8000264:	6013      	str	r3, [r2, #0]
	else
	{
		SYSTICK_OverflowCounter = 0;
		SYSTICK_CallBackFunction();
	}
 8000266:	e005      	b.n	8000274 <SysTick_Handler+0x28>
		SYSTICK_OverflowCounter = 0;
 8000268:	4b03      	ldr	r3, [pc, #12]	; (8000278 <SysTick_Handler+0x2c>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
		SYSTICK_CallBackFunction();
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Handler+0x34>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4798      	blx	r3
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000020 	.word	0x20000020
 800027c:	20000028 	.word	0x20000028
 8000280:	20000024 	.word	0x20000024

08000284 <DMA_Init>:
 *   copy_dmaHandle: Pointer to the DMA handle structure containing the configuration.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if initialization is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Init(DMA_HandleTypeDef *copy_dmaHandle){
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

    HAL_Status hal_Status = HAL_OKAY;
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_dmaHandle)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d102      	bne.n	800029c <DMA_Init+0x18>
    {
        hal_Status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e09d      	b.n	80003d8 <DMA_Init+0x154>
    }
    else
    {
    switch(copy_dmaHandle->dma_Direction)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	795b      	ldrb	r3, [r3, #5]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <DMA_Init+0x26>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d009      	beq.n	80002bc <DMA_Init+0x38>
 80002a8:	e015      	b.n	80002d6 <DMA_Init+0x52>
    {
        case DMA_READ_FROM_PERIPHERAL:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f022 0210 	bic.w	r2, r2, #16
 80002b8:	601a      	str	r2, [r3, #0]
            break;
 80002ba:	e00c      	b.n	80002d6 <DMA_Init+0x52>
        case DMA_READ_FROM_MEMORY:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f042 0210 	orr.w	r2, r2, #16
 80002ca:	601a      	str	r2, [r3, #0]
            copy_dmaHandle->dma_TypeDef->CCR = 1<<4;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2210      	movs	r2, #16
 80002d2:	601a      	str	r2, [r3, #0]
            break;
 80002d4:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mem2Mem)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7a1b      	ldrb	r3, [r3, #8]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d002      	beq.n	80002e4 <DMA_Init+0x60>
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d009      	beq.n	80002f6 <DMA_Init+0x72>
 80002e2:	e011      	b.n	8000308 <DMA_Init+0x84>
    {
        case DMA_MEM2MEM_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80002f2:	601a      	str	r2, [r3, #0]
            break;
 80002f4:	e008      	b.n	8000308 <DMA_Init+0x84>
        case DMA_MEM2MEM_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000304:	601a      	str	r2, [r3, #0]
            break;
 8000306:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mode)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	791b      	ldrb	r3, [r3, #4]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00e      	beq.n	800032e <DMA_Init+0xaa>
 8000310:	2b01      	cmp	r3, #1
 8000312:	d116      	bne.n	8000342 <DMA_Init+0xbe>
    {
        case DMA_NON_CIRCULAR_MODE:
            if(copy_dmaHandle->dma_Mem2Mem != DMA_MEM2MEM_ENABLE )
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	7a1b      	ldrb	r3, [r3, #8]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d011      	beq.n	8000340 <DMA_Init+0xbc>
            {
                CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f022 0220 	bic.w	r2, r2, #32
 800032a:	601a      	str	r2, [r3, #0]

            }
            break;
 800032c:	e008      	b.n	8000340 <DMA_Init+0xbc>
        case DMA_CIRCULAR_MODE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f042 0220 	orr.w	r2, r2, #32
 800033c:	601a      	str	r2, [r3, #0]
            break;
 800033e:	e000      	b.n	8000342 <DMA_Init+0xbe>
            break;
 8000340:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_MemIncMode)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	7a5b      	ldrb	r3, [r3, #9]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <DMA_Init+0xcc>
 800034a:	2b01      	cmp	r3, #1
 800034c:	d009      	beq.n	8000362 <DMA_Init+0xde>
 800034e:	e011      	b.n	8000374 <DMA_Init+0xf0>
    {
        case DMA_MEM_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800035e:	601a      	str	r2, [r3, #0]
            break;
 8000360:	e008      	b.n	8000374 <DMA_Init+0xf0>
        case DMA_MEM_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000370:	601a      	str	r2, [r3, #0]
            break;
 8000372:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_PeriphIncMode)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	7a9b      	ldrb	r3, [r3, #10]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d002      	beq.n	8000382 <DMA_Init+0xfe>
 800037c:	2b01      	cmp	r3, #1
 800037e:	d009      	beq.n	8000394 <DMA_Init+0x110>
 8000380:	e011      	b.n	80003a6 <DMA_Init+0x122>
    {
        case DMA_PERIPH_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000390:	601a      	str	r2, [r3, #0]
            break;
 8000392:	e008      	b.n	80003a6 <DMA_Init+0x122>
        case DMA_PERIPH_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80003a2:	601a      	str	r2, [r3, #0]
            break;
 80003a4:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Interrupt)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	7adb      	ldrb	r3, [r3, #11]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d002      	beq.n	80003b4 <DMA_Init+0x130>
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d009      	beq.n	80003c6 <DMA_Init+0x142>
 80003b2:	e011      	b.n	80003d8 <DMA_Init+0x154>
    {
        case DMA_INTERRUPT_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f042 0202 	orr.w	r2, r2, #2
 80003c2:	601a      	str	r2, [r3, #0]
            break;
 80003c4:	e008      	b.n	80003d8 <DMA_Init+0x154>
        case DMA_INTERRUPT_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f022 0202 	bic.w	r2, r2, #2
 80003d4:	601a      	str	r2, [r3, #0]
            break;
 80003d6:	bf00      	nop
    }
    }
    return hal_Status;
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003da:	4618      	mov	r0, r3
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr

080003e4 <DMA_SetPeriphAddress>:
 *   copy_u32PeriphAddress: Pointer to the peripheral address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetPeriphAddress(DMA_HandleTypeDef *copy_dmaHandle,uint8_t *copy_u32PeriphAddress){
 80003e4:	b480      	push	{r7}
 80003e6:	b085      	sub	sp, #20
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
 80003ec:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80003ee:	2300      	movs	r3, #0
 80003f0:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32PeriphAddress || NULL == copy_dmaHandle )
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <DMA_SetPeriphAddress+0x1a>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d102      	bne.n	8000404 <DMA_SetPeriphAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 80003fe:	2301      	movs	r3, #1
 8000400:	73fb      	strb	r3, [r7, #15]
 8000402:	e003      	b.n	800040c <DMA_SetPeriphAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CPAR = copy_u32PeriphAddress;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	683a      	ldr	r2, [r7, #0]
 800040a:	609a      	str	r2, [r3, #8]
    }
    return hal_Status;
 800040c:	7bfb      	ldrb	r3, [r7, #15]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <DMA_SetMemoryAddress>:
 *   copy_u32MemAddress: Pointer to the memory address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetMemoryAddress(DMA_HandleTypeDef *copy_dmaHandle ,uint8_t *copy_u32MemAddress){
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000422:	2300      	movs	r3, #0
 8000424:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32MemAddress || NULL == copy_dmaHandle )
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d002      	beq.n	8000432 <DMA_SetMemoryAddress+0x1a>
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d102      	bne.n	8000438 <DMA_SetMemoryAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 8000432:	2301      	movs	r3, #1
 8000434:	73fb      	strb	r3, [r7, #15]
 8000436:	e003      	b.n	8000440 <DMA_SetMemoryAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CMAR = copy_u32MemAddress;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	683a      	ldr	r2, [r7, #0]
 800043e:	60da      	str	r2, [r3, #12]
    }
    return hal_Status;
 8000440:	7bfb      	ldrb	r3, [r7, #15]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr

0800044c <DMA_Start>:
 *   hdma: Pointer to the DMA handle structure.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if starting the transfer is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Start(DMA_HandleTypeDef *hdma){
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 8000454:	2300      	movs	r3, #0
 8000456:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d102      	bne.n	8000464 <DMA_Start+0x18>
    {
        hal_Status = HAL_ERROR;
 800045e:	2301      	movs	r3, #1
 8000460:	73fb      	strb	r3, [r7, #15]
 8000462:	e007      	b.n	8000474 <DMA_Start+0x28>
    }
    else
    {
        SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f042 0201 	orr.w	r2, r2, #1
 8000472:	601a      	str	r2, [r3, #0]
    }
    return hal_Status;
 8000474:	7bfb      	ldrb	r3, [r7, #15]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <DMA_SetDataCounter>:
 * @param copy_u32DataLength: The number of data items to be transferred by the DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_SetDataCounter(DMA_HandleTypeDef *hdma, uint32_t copy_u32DataLength)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 800048a:	2300      	movs	r3, #0
 800048c:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d102      	bne.n	800049a <DMA_SetDataCounter+0x1a>
    {
        hal_Status = HAL_ERROR;
 8000494:	2301      	movs	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	e003      	b.n	80004a2 <DMA_SetDataCounter+0x22>
    }
    else
    {
        hdma->dma_TypeDef->CNTDR = copy_u32DataLength;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	683a      	ldr	r2, [r7, #0]
 80004a0:	605a      	str	r2, [r3, #4]
        // SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
    }
    return hal_Status;
 80004a2:	7bfb      	ldrb	r3, [r7, #15]

}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
	...

080004b0 <DMA1_Channel1_IRQHandler>:
    return hal_Status;
}


void DMA1_Channel1_IRQHandler()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    DMA1_1_CallbackFnPtr();
 80004b4:	4b02      	ldr	r3, [pc, #8]	; (80004c0 <DMA1_Channel1_IRQHandler+0x10>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4798      	blx	r3
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000002c 	.word	0x2000002c

080004c4 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    DMA1_2_CallbackFnPtr();
 80004c8:	4b02      	ldr	r3, [pc, #8]	; (80004d4 <DMA1_Channel2_IRQHandler+0x10>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4798      	blx	r3
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	20000038 	.word	0x20000038

080004d8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler()
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <DMA1_Channel3_IRQHandler+0x10>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4798      	blx	r3
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000030 	.word	0x20000030

080004ec <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <DMA1_Channel4_IRQHandler+0x10>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4798      	blx	r3
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000030 	.word	0x20000030

08000500 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler()
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler()
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler()
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler()
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler()
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	/* Init SPI */
	hspi1.Instance = SPI1;
 800054c:	4b50      	ldr	r3, [pc, #320]	; (8000690 <ILI9341_SPI_Init+0x148>)
 800054e:	4a51      	ldr	r2, [pc, #324]	; (8000694 <ILI9341_SPI_Init+0x14c>)
 8000550:	601a      	str	r2, [r3, #0]
	hspi1.Mode = SPI_MODE_MASTER;
 8000552:	4b4f      	ldr	r3, [pc, #316]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000554:	2200      	movs	r2, #0
 8000556:	711a      	strb	r2, [r3, #4]
	hspi1.DataSize = SPI_DATASIZE_8BIT;
 8000558:	4b4d      	ldr	r3, [pc, #308]	; (8000690 <ILI9341_SPI_Init+0x148>)
 800055a:	2200      	movs	r2, #0
 800055c:	745a      	strb	r2, [r3, #17]
	hspi1.CPOL = SPI_CPOL_LOW;
 800055e:	4b4c      	ldr	r3, [pc, #304]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000560:	2200      	movs	r2, #0
 8000562:	719a      	strb	r2, [r3, #6]
	hspi1.CPHA = SPI_CPHA_1EDGE;
 8000564:	4b4a      	ldr	r3, [pc, #296]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000566:	2200      	movs	r2, #0
 8000568:	71da      	strb	r2, [r3, #7]
	hspi1.BaudRate = SPI_BAUDRATE_DIV2;
 800056a:	4b49      	ldr	r3, [pc, #292]	; (8000690 <ILI9341_SPI_Init+0x148>)
 800056c:	2200      	movs	r2, #0
 800056e:	715a      	strb	r2, [r3, #5]
	hspi1.NSS = SPI_NSS_DISABLE;
 8000570:	4b47      	ldr	r3, [pc, #284]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000572:	2202      	movs	r2, #2
 8000574:	751a      	strb	r2, [r3, #20]
	hspi1.BiDir = SPI_BIDIR_DISABLE;
 8000576:	4b46      	ldr	r3, [pc, #280]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000578:	2200      	movs	r2, #0
 800057a:	755a      	strb	r2, [r3, #21]
	hspi1.CRC = SPI_CRC_DISABLE;
 800057c:	4b44      	ldr	r3, [pc, #272]	; (8000690 <ILI9341_SPI_Init+0x148>)
 800057e:	2200      	movs	r2, #0
 8000580:	759a      	strb	r2, [r3, #22]
	hspi1.FirstBit = SPI_LSB_FIRST;
 8000582:	4b43      	ldr	r3, [pc, #268]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000584:	2201      	movs	r2, #1
 8000586:	741a      	strb	r2, [r3, #16]
	hspi1.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 8000588:	4b41      	ldr	r3, [pc, #260]	; (8000690 <ILI9341_SPI_Init+0x148>)
 800058a:	2200      	movs	r2, #0
 800058c:	75da      	strb	r2, [r3, #23]
	hspi1.CRCDir = SPI_CRC_TX;
 800058e:	4b40      	ldr	r3, [pc, #256]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000590:	2201      	movs	r2, #1
 8000592:	761a      	strb	r2, [r3, #24]
	hspi1.SpiTxDma = SPI_TX_DMA_ENABLE;
 8000594:	4b3e      	ldr	r3, [pc, #248]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000596:	2200      	movs	r2, #0
 8000598:	749a      	strb	r2, [r3, #18]
	hspi1.SpiRxDma = SPI_RX_DMA_DISABLE;
 800059a:	4b3d      	ldr	r3, [pc, #244]	; (8000690 <ILI9341_SPI_Init+0x148>)
 800059c:	2201      	movs	r2, #1
 800059e:	74da      	strb	r2, [r3, #19]

	/* Init GPIOs*/
	/* Init MOSI */
	SDA.GPIO_TypeDef = PORT_SPI1;
 80005a0:	4b3d      	ldr	r3, [pc, #244]	; (8000698 <ILI9341_SPI_Init+0x150>)
 80005a2:	4a3e      	ldr	r2, [pc, #248]	; (800069c <ILI9341_SPI_Init+0x154>)
 80005a4:	601a      	str	r2, [r3, #0]
	SDA.GPIO_Pin = MOSI_SPI1;
 80005a6:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <ILI9341_SPI_Init+0x150>)
 80005a8:	2207      	movs	r2, #7
 80005aa:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <ILI9341_SPI_Init+0x150>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <ILI9341_SPI_Init+0x150>)
 80005b4:	2205      	movs	r2, #5
 80005b6:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&SDA);
 80005b8:	4837      	ldr	r0, [pc, #220]	; (8000698 <ILI9341_SPI_Init+0x150>)
 80005ba:	f000 fb91 	bl	8000ce0 <GPIO_Init>

	/* Init SCK */
	SCK.GPIO_TypeDef = PORT_SPI1;
 80005be:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <ILI9341_SPI_Init+0x158>)
 80005c0:	4a36      	ldr	r2, [pc, #216]	; (800069c <ILI9341_SPI_Init+0x154>)
 80005c2:	601a      	str	r2, [r3, #0]
	SCK.GPIO_Pin = SCK_SPI1;
 80005c4:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <ILI9341_SPI_Init+0x158>)
 80005c6:	2205      	movs	r2, #5
 80005c8:	711a      	strb	r2, [r3, #4]
	SCK.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <ILI9341_SPI_Init+0x158>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	715a      	strb	r2, [r3, #5]
	SCK.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 80005d0:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <ILI9341_SPI_Init+0x158>)
 80005d2:	2205      	movs	r2, #5
 80005d4:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&SCK);
 80005d6:	4832      	ldr	r0, [pc, #200]	; (80006a0 <ILI9341_SPI_Init+0x158>)
 80005d8:	f000 fb82 	bl	8000ce0 <GPIO_Init>

	/* Init CS */
	CS.GPIO_TypeDef = PORT_SPI1;
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <ILI9341_SPI_Init+0x15c>)
 80005de:	4a2f      	ldr	r2, [pc, #188]	; (800069c <ILI9341_SPI_Init+0x154>)
 80005e0:	601a      	str	r2, [r3, #0]
	CS.GPIO_Pin = GPIO_PIN_3;
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <ILI9341_SPI_Init+0x15c>)
 80005e4:	2203      	movs	r2, #3
 80005e6:	711a      	strb	r2, [r3, #4]
	CS.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80005e8:	4b2e      	ldr	r3, [pc, #184]	; (80006a4 <ILI9341_SPI_Init+0x15c>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	715a      	strb	r2, [r3, #5]
	CS.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 80005ee:	4b2d      	ldr	r3, [pc, #180]	; (80006a4 <ILI9341_SPI_Init+0x15c>)
 80005f0:	2203      	movs	r2, #3
 80005f2:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&CS);
 80005f4:	482b      	ldr	r0, [pc, #172]	; (80006a4 <ILI9341_SPI_Init+0x15c>)
 80005f6:	f000 fb73 	bl	8000ce0 <GPIO_Init>

	/* Init DC */
	DC.GPIO_TypeDef = PORT_SPI1;
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <ILI9341_SPI_Init+0x160>)
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <ILI9341_SPI_Init+0x154>)
 80005fe:	601a      	str	r2, [r3, #0]
	DC.GPIO_Pin = GPIO_PIN_2;
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <ILI9341_SPI_Init+0x160>)
 8000602:	2202      	movs	r2, #2
 8000604:	711a      	strb	r2, [r3, #4]
	DC.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8000606:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <ILI9341_SPI_Init+0x160>)
 8000608:	2202      	movs	r2, #2
 800060a:	715a      	strb	r2, [r3, #5]
	DC.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 800060c:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <ILI9341_SPI_Init+0x160>)
 800060e:	2203      	movs	r2, #3
 8000610:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&DC);
 8000612:	4825      	ldr	r0, [pc, #148]	; (80006a8 <ILI9341_SPI_Init+0x160>)
 8000614:	f000 fb64 	bl	8000ce0 <GPIO_Init>


	RST.GPIO_TypeDef = PORT_SPI1;
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <ILI9341_SPI_Init+0x164>)
 800061a:	4a20      	ldr	r2, [pc, #128]	; (800069c <ILI9341_SPI_Init+0x154>)
 800061c:	601a      	str	r2, [r3, #0]
	RST.GPIO_Pin = GPIO_PIN_8;
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <ILI9341_SPI_Init+0x164>)
 8000620:	2208      	movs	r2, #8
 8000622:	711a      	strb	r2, [r3, #4]
	RST.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8000624:	4b21      	ldr	r3, [pc, #132]	; (80006ac <ILI9341_SPI_Init+0x164>)
 8000626:	2202      	movs	r2, #2
 8000628:	715a      	strb	r2, [r3, #5]
	RST.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <ILI9341_SPI_Init+0x164>)
 800062c:	2203      	movs	r2, #3
 800062e:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&RST);
 8000630:	481e      	ldr	r0, [pc, #120]	; (80006ac <ILI9341_SPI_Init+0x164>)
 8000632:	f000 fb55 	bl	8000ce0 <GPIO_Init>

	/*Init DMA channels */
	spiTxdma.dma_TypeDef = DMA1_3;
 8000636:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 8000638:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <ILI9341_SPI_Init+0x16c>)
 800063a:	601a      	str	r2, [r3, #0]
	spiTxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 800063e:	2201      	movs	r2, #1
 8000640:	721a      	strb	r2, [r3, #8]
	spiTxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 8000644:	2201      	movs	r2, #1
 8000646:	711a      	strb	r2, [r3, #4]
	spiTxdma.dma_Direction = DMA_READ_FROM_MEMORY;
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 800064a:	2201      	movs	r2, #1
 800064c:	715a      	strb	r2, [r3, #5]
	spiTxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 8000650:	2200      	movs	r2, #0
 8000652:	719a      	strb	r2, [r3, #6]
	spiTxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 8000656:	2200      	movs	r2, #0
 8000658:	71da      	strb	r2, [r3, #7]
	spiTxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 800065c:	2200      	movs	r2, #0
 800065e:	725a      	strb	r2, [r3, #9]
	spiTxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 8000662:	2201      	movs	r2, #1
 8000664:	729a      	strb	r2, [r3, #10]
	spiTxdma.dma_Interrupt = DMA_INTERRUPT_DISABLE;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 8000668:	2201      	movs	r2, #1
 800066a:	72da      	strb	r2, [r3, #11]

	hspi1.txdma = &spiTxdma;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <ILI9341_SPI_Init+0x148>)
 800066e:	4a10      	ldr	r2, [pc, #64]	; (80006b0 <ILI9341_SPI_Init+0x168>)
 8000670:	609a      	str	r2, [r3, #8]

	DMA_Init(hspi1.txdma);
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <ILI9341_SPI_Init+0x148>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fe04 	bl	8000284 <DMA_Init>

	/* Init SPI */
	SPI_Init(&hspi1);
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <ILI9341_SPI_Init+0x148>)
 800067e:	f000 fd89 	bl	8001194 <SPI_Init>
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8000682:	2100      	movs	r1, #0
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <ILI9341_SPI_Init+0x15c>)
 8000686:	f000 fd4d 	bl	8001124 <GPIO_WritePin>

// MX_SPI5_Init();																							//SPI INIT
// MX_GPIO_Init();																							//GPIO INIT
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000074 	.word	0x20000074
 8000694:	40013000 	.word	0x40013000
 8000698:	20000064 	.word	0x20000064
 800069c:	40010800 	.word	0x40010800
 80006a0:	2000006c 	.word	0x2000006c
 80006a4:	20000090 	.word	0x20000090
 80006a8:	2000005c 	.word	0x2000005c
 80006ac:	20000054 	.word	0x20000054
 80006b0:	20000048 	.word	0x20000048
 80006b4:	40020030 	.word	0x40020030

080006b8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(uint8_t SPI_Data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
//HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
SPI_Transmit(&hspi1, &SPI_Data, 1);
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <ILI9341_SPI_Send+0x20>)
 80006ca:	f000 fed3 	bl	8001474 <SPI_Transmit>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000074 	.word	0x20000074

080006dc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <ILI9341_Write_Command+0x34>)
 80006ea:	f000 fd1b 	bl	8001124 <GPIO_WritePin>
	GPIO_WritePin(&DC, GPIO_PIN_RESET);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <ILI9341_Write_Command+0x38>)
 80006f2:	f000 fd17 	bl	8001124 <GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ffdd 	bl	80006b8 <ILI9341_SPI_Send>
	GPIO_WritePin(&CS, GPIO_PIN_SET);
 80006fe:	2101      	movs	r1, #1
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <ILI9341_Write_Command+0x34>)
 8000702:	f000 fd0f 	bl	8001124 <GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000090 	.word	0x20000090
 8000714:	2000005c 	.word	0x2000005c

08000718 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8000722:	2100      	movs	r1, #0
 8000724:	4809      	ldr	r0, [pc, #36]	; (800074c <ILI9341_Write_Data+0x34>)
 8000726:	f000 fcfd 	bl	8001124 <GPIO_WritePin>
	GPIO_WritePin(&DC, GPIO_PIN_SET);
 800072a:	2101      	movs	r1, #1
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <ILI9341_Write_Data+0x38>)
 800072e:	f000 fcf9 	bl	8001124 <GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ffbf 	bl	80006b8 <ILI9341_SPI_Send>
	GPIO_WritePin(&CS, GPIO_PIN_SET);
 800073a:	2101      	movs	r1, #1
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <ILI9341_Write_Data+0x34>)
 800073e:	f000 fcf1 	bl	8001124 <GPIO_WritePin>

// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
// ILI9341_SPI_Send(Data);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000090 	.word	0x20000090
 8000750:	2000005c 	.word	0x2000005c

08000754 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4604      	mov	r4, r0
 800075c:	4608      	mov	r0, r1
 800075e:	4611      	mov	r1, r2
 8000760:	461a      	mov	r2, r3
 8000762:	4623      	mov	r3, r4
 8000764:	80fb      	strh	r3, [r7, #6]
 8000766:	4603      	mov	r3, r0
 8000768:	80bb      	strh	r3, [r7, #4]
 800076a:	460b      	mov	r3, r1
 800076c:	807b      	strh	r3, [r7, #2]
 800076e:	4613      	mov	r3, r2
 8000770:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000772:	202a      	movs	r0, #42	; 0x2a
 8000774:	f7ff ffb2 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000778:	88fb      	ldrh	r3, [r7, #6]
 800077a:	0a1b      	lsrs	r3, r3, #8
 800077c:	b29b      	uxth	r3, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ffc9 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ffc4 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000790:	887b      	ldrh	r3, [r7, #2]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b29b      	uxth	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ffbd 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800079e:	887b      	ldrh	r3, [r7, #2]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ffb8 	bl	8000718 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80007a8:	202b      	movs	r0, #43	; 0x2b
 80007aa:	f7ff ff97 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ffae 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80007bc:	88bb      	ldrh	r3, [r7, #4]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ffa9 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80007c6:	883b      	ldrh	r3, [r7, #0]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffa2 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80007d4:	883b      	ldrh	r3, [r7, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff9d 	bl	8000718 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80007de:	202c      	movs	r0, #44	; 0x2c
 80007e0:	f7ff ff7c 	bl	80006dc <ILI9341_Write_Command>
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd90      	pop	{r4, r7, pc}

080007ec <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	GPIO_WritePin(&RST, GPIO_PIN_RESET);
 80007f0:	2100      	movs	r1, #0
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <ILI9341_Reset+0x2c>)
 80007f4:	f000 fc96 	bl	8001124 <GPIO_WritePin>
	SYSTICK_DelayMs(200);
 80007f8:	20c8      	movs	r0, #200	; 0xc8
 80007fa:	f7ff fcd3 	bl	80001a4 <SYSTICK_DelayMs>
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80007fe:	2100      	movs	r1, #0
 8000800:	4806      	ldr	r0, [pc, #24]	; (800081c <ILI9341_Reset+0x30>)
 8000802:	f000 fc8f 	bl	8001124 <GPIO_WritePin>
	SYSTICK_DelayMs(200);
 8000806:	20c8      	movs	r0, #200	; 0xc8
 8000808:	f7ff fccc 	bl	80001a4 <SYSTICK_DelayMs>
	GPIO_WritePin(&RST, GPIO_PIN_SET);
 800080c:	2101      	movs	r1, #1
 800080e:	4802      	ldr	r0, [pc, #8]	; (8000818 <ILI9341_Reset+0x2c>)
 8000810:	f000 fc88 	bl	8001124 <GPIO_WritePin>
	// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
	// HAL_Delay(200);
	// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	// HAL_Delay(200);
	// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000054 	.word	0x20000054
 800081c:	20000090 	.word	0x20000090

08000820 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800082e:	2036      	movs	r0, #54	; 0x36
 8000830:	f7ff ff54 	bl	80006dc <ILI9341_Write_Command>
SYSTICK_DelayMs(1);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff fcb5 	bl	80001a4 <SYSTICK_DelayMs>
	
switch(screen_rotation) 
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	2b03      	cmp	r3, #3
 800083e:	d837      	bhi.n	80008b0 <ILI9341_Set_Rotation+0x90>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <ILI9341_Set_Rotation+0x28>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	08000859 	.word	0x08000859
 800084c:	0800086f 	.word	0x0800086f
 8000850:	08000885 	.word	0x08000885
 8000854:	0800089b 	.word	0x0800089b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000858:	2048      	movs	r0, #72	; 0x48
 800085a:	f7ff ff5d 	bl	8000718 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <ILI9341_Set_Rotation+0x9c>)
 8000860:	22f0      	movs	r2, #240	; 0xf0
 8000862:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <ILI9341_Set_Rotation+0xa0>)
 8000866:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800086a:	801a      	strh	r2, [r3, #0]
			break;
 800086c:	e021      	b.n	80008b2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800086e:	2028      	movs	r0, #40	; 0x28
 8000870:	f7ff ff52 	bl	8000718 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <ILI9341_Set_Rotation+0x9c>)
 8000876:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800087a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800087c:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <ILI9341_Set_Rotation+0xa0>)
 800087e:	22f0      	movs	r2, #240	; 0xf0
 8000880:	801a      	strh	r2, [r3, #0]
			break;
 8000882:	e016      	b.n	80008b2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000884:	2088      	movs	r0, #136	; 0x88
 8000886:	f7ff ff47 	bl	8000718 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <ILI9341_Set_Rotation+0x9c>)
 800088c:	22f0      	movs	r2, #240	; 0xf0
 800088e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <ILI9341_Set_Rotation+0xa0>)
 8000892:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000896:	801a      	strh	r2, [r3, #0]
			break;
 8000898:	e00b      	b.n	80008b2 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800089a:	20e8      	movs	r0, #232	; 0xe8
 800089c:	f7ff ff3c 	bl	8000718 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <ILI9341_Set_Rotation+0x9c>)
 80008a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80008a6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <ILI9341_Set_Rotation+0xa0>)
 80008aa:	22f0      	movs	r2, #240	; 0xf0
 80008ac:	801a      	strh	r2, [r3, #0]
			break;
 80008ae:	e000      	b.n	80008b2 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80008b0:	bf00      	nop
	}
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000002 	.word	0x20000002
 80008c0:	20000000 	.word	0x20000000

080008c4 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
	GPIO_WritePin(&RST, GPIO_PIN_SET);
 80008c8:	2101      	movs	r1, #1
 80008ca:	4802      	ldr	r0, [pc, #8]	; (80008d4 <ILI9341_Enable+0x10>)
 80008cc:	f000 fc2a 	bl	8001124 <GPIO_WritePin>

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000054 	.word	0x20000054

080008d8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

ILI9341_SPI_Init();
 80008dc:	f7ff fe34 	bl	8000548 <ILI9341_SPI_Init>
ILI9341_Enable();
 80008e0:	f7ff fff0 	bl	80008c4 <ILI9341_Enable>
ILI9341_Reset();
 80008e4:	f7ff ff82 	bl	80007ec <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fef7 	bl	80006dc <ILI9341_Write_Command>
SYSTICK_DelayMs(1000);
 80008ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f2:	f7ff fc57 	bl	80001a4 <SYSTICK_DelayMs>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80008f6:	20cb      	movs	r0, #203	; 0xcb
 80008f8:	f7ff fef0 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80008fc:	2039      	movs	r0, #57	; 0x39
 80008fe:	f7ff ff0b 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000902:	202c      	movs	r0, #44	; 0x2c
 8000904:	f7ff ff08 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff05 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800090e:	2034      	movs	r0, #52	; 0x34
 8000910:	f7ff ff02 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000914:	2002      	movs	r0, #2
 8000916:	f7ff feff 	bl	8000718 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800091a:	20cf      	movs	r0, #207	; 0xcf
 800091c:	f7ff fede 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fef9 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000926:	20c1      	movs	r0, #193	; 0xc1
 8000928:	f7ff fef6 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800092c:	2030      	movs	r0, #48	; 0x30
 800092e:	f7ff fef3 	bl	8000718 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000932:	20e8      	movs	r0, #232	; 0xe8
 8000934:	f7ff fed2 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000938:	2085      	movs	r0, #133	; 0x85
 800093a:	f7ff feed 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff feea 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000944:	2078      	movs	r0, #120	; 0x78
 8000946:	f7ff fee7 	bl	8000718 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800094a:	20ea      	movs	r0, #234	; 0xea
 800094c:	f7ff fec6 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fee1 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fede 	bl	8000718 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800095c:	20ed      	movs	r0, #237	; 0xed
 800095e:	f7ff febd 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000962:	2064      	movs	r0, #100	; 0x64
 8000964:	f7ff fed8 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000968:	2003      	movs	r0, #3
 800096a:	f7ff fed5 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800096e:	2012      	movs	r0, #18
 8000970:	f7ff fed2 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000974:	2081      	movs	r0, #129	; 0x81
 8000976:	f7ff fecf 	bl	8000718 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800097a:	20f7      	movs	r0, #247	; 0xf7
 800097c:	f7ff feae 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000980:	2020      	movs	r0, #32
 8000982:	f7ff fec9 	bl	8000718 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000986:	20c0      	movs	r0, #192	; 0xc0
 8000988:	f7ff fea8 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800098c:	2023      	movs	r0, #35	; 0x23
 800098e:	f7ff fec3 	bl	8000718 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000992:	20c1      	movs	r0, #193	; 0xc1
 8000994:	f7ff fea2 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000998:	2010      	movs	r0, #16
 800099a:	f7ff febd 	bl	8000718 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800099e:	20c5      	movs	r0, #197	; 0xc5
 80009a0:	f7ff fe9c 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80009a4:	203e      	movs	r0, #62	; 0x3e
 80009a6:	f7ff feb7 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80009aa:	2028      	movs	r0, #40	; 0x28
 80009ac:	f7ff feb4 	bl	8000718 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80009b0:	20c7      	movs	r0, #199	; 0xc7
 80009b2:	f7ff fe93 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80009b6:	2086      	movs	r0, #134	; 0x86
 80009b8:	f7ff feae 	bl	8000718 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80009bc:	2036      	movs	r0, #54	; 0x36
 80009be:	f7ff fe8d 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80009c2:	2048      	movs	r0, #72	; 0x48
 80009c4:	f7ff fea8 	bl	8000718 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80009c8:	203a      	movs	r0, #58	; 0x3a
 80009ca:	f7ff fe87 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80009ce:	2055      	movs	r0, #85	; 0x55
 80009d0:	f7ff fea2 	bl	8000718 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80009d4:	20b1      	movs	r0, #177	; 0xb1
 80009d6:	f7ff fe81 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fe9c 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80009e0:	2018      	movs	r0, #24
 80009e2:	f7ff fe99 	bl	8000718 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80009e6:	20b6      	movs	r0, #182	; 0xb6
 80009e8:	f7ff fe78 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80009ec:	2008      	movs	r0, #8
 80009ee:	f7ff fe93 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80009f2:	2082      	movs	r0, #130	; 0x82
 80009f4:	f7ff fe90 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80009f8:	2027      	movs	r0, #39	; 0x27
 80009fa:	f7ff fe8d 	bl	8000718 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80009fe:	20f2      	movs	r0, #242	; 0xf2
 8000a00:	f7ff fe6c 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff fe87 	bl	8000718 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000a0a:	2026      	movs	r0, #38	; 0x26
 8000a0c:	f7ff fe66 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fe81 	bl	8000718 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000a16:	20e0      	movs	r0, #224	; 0xe0
 8000a18:	f7ff fe60 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000a1c:	200f      	movs	r0, #15
 8000a1e:	f7ff fe7b 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000a22:	2031      	movs	r0, #49	; 0x31
 8000a24:	f7ff fe78 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000a28:	202b      	movs	r0, #43	; 0x2b
 8000a2a:	f7ff fe75 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000a2e:	200c      	movs	r0, #12
 8000a30:	f7ff fe72 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a34:	200e      	movs	r0, #14
 8000a36:	f7ff fe6f 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000a3a:	2008      	movs	r0, #8
 8000a3c:	f7ff fe6c 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000a40:	204e      	movs	r0, #78	; 0x4e
 8000a42:	f7ff fe69 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000a46:	20f1      	movs	r0, #241	; 0xf1
 8000a48:	f7ff fe66 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000a4c:	2037      	movs	r0, #55	; 0x37
 8000a4e:	f7ff fe63 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a52:	2007      	movs	r0, #7
 8000a54:	f7ff fe60 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f7ff fe5d 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f7ff fe5a 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a64:	200e      	movs	r0, #14
 8000a66:	f7ff fe57 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000a6a:	2009      	movs	r0, #9
 8000a6c:	f7ff fe54 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fe51 	bl	8000718 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000a76:	20e1      	movs	r0, #225	; 0xe1
 8000a78:	f7ff fe30 	bl	80006dc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff fe4b 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000a82:	200e      	movs	r0, #14
 8000a84:	f7ff fe48 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000a88:	2014      	movs	r0, #20
 8000a8a:	f7ff fe45 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f7ff fe42 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000a94:	2011      	movs	r0, #17
 8000a96:	f7ff fe3f 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f7ff fe3c 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000aa0:	2031      	movs	r0, #49	; 0x31
 8000aa2:	f7ff fe39 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000aa6:	20c1      	movs	r0, #193	; 0xc1
 8000aa8:	f7ff fe36 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000aac:	2048      	movs	r0, #72	; 0x48
 8000aae:	f7ff fe33 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000ab2:	2008      	movs	r0, #8
 8000ab4:	f7ff fe30 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000ab8:	200f      	movs	r0, #15
 8000aba:	f7ff fe2d 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000abe:	200c      	movs	r0, #12
 8000ac0:	f7ff fe2a 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000ac4:	2031      	movs	r0, #49	; 0x31
 8000ac6:	f7ff fe27 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000aca:	2036      	movs	r0, #54	; 0x36
 8000acc:	f7ff fe24 	bl	8000718 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000ad0:	200f      	movs	r0, #15
 8000ad2:	f7ff fe21 	bl	8000718 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000ad6:	2011      	movs	r0, #17
 8000ad8:	f7ff fe00 	bl	80006dc <ILI9341_Write_Command>
SYSTICK_DelayMs(120);
 8000adc:	2078      	movs	r0, #120	; 0x78
 8000ade:	f7ff fb61 	bl	80001a4 <SYSTICK_DelayMs>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000ae2:	2029      	movs	r0, #41	; 0x29
 8000ae4:	f7ff fdfa 	bl	80006dc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff fe99 	bl	8000820 <ILI9341_Set_Rotation>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000af4:	b5b0      	push	{r4, r5, r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	6039      	str	r1, [r7, #0]
 8000afe:	80fb      	strh	r3, [r7, #6]
 8000b00:	466b      	mov	r3, sp
 8000b02:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b10:	d202      	bcs.n	8000b18 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
 8000b16:	e002      	b.n	8000b1e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000b18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
GPIO_WritePin(&DC, GPIO_PIN_SET);
 8000b1e:	2101      	movs	r1, #1
 8000b20:	483e      	ldr	r0, [pc, #248]	; (8000c1c <ILI9341_Draw_Colour_Burst+0x128>)
 8000b22:	f000 faff 	bl	8001124 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8000b26:	2100      	movs	r1, #0
 8000b28:	483d      	ldr	r0, [pc, #244]	; (8000c20 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000b2a:	f000 fafb 	bl	8001124 <GPIO_WritePin>
// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);

unsigned char chifted = 	Colour>>8;;
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000b38:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000b3a:	4623      	mov	r3, r4
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	4620      	mov	r0, r4
 8000b42:	f04f 0100 	mov.w	r1, #0
 8000b46:	f04f 0200 	mov.w	r2, #0
 8000b4a:	f04f 0300 	mov.w	r3, #0
 8000b4e:	00cb      	lsls	r3, r1, #3
 8000b50:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b54:	00c2      	lsls	r2, r0, #3
 8000b56:	4620      	mov	r0, r4
 8000b58:	f04f 0100 	mov.w	r1, #0
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	00cb      	lsls	r3, r1, #3
 8000b66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b6a:	00c2      	lsls	r2, r0, #3
 8000b6c:	1de3      	adds	r3, r4, #7
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	ebad 0d03 	sub.w	sp, sp, r3
 8000b76:	466b      	mov	r3, sp
 8000b78:	3300      	adds	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b80:	e00e      	b.n	8000ba0 <ILI9341_Draw_Colour_Burst+0xac>
	{
		burst_buffer[j] = 	chifted;
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	4413      	add	r3, r2
 8000b88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000b8c:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b90:	3301      	adds	r3, #1
 8000b92:	88fa      	ldrh	r2, [r7, #6]
 8000b94:	b2d1      	uxtb	r1, r2
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9c:	3302      	adds	r3, #2
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d3ec      	bcc.n	8000b82 <ILI9341_Draw_Colour_Burst+0x8e>
	}

uint32_t Sending_Size = Size*2;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bbc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000bc2:	fb01 f202 	mul.w	r2, r1, r2
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d012      	beq.n	8000bf6 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bd4:	e00b      	b.n	8000bee <ILI9341_Draw_Colour_Burst+0xfa>
		{
		SPI_TransmitDMA(&hspi1, (unsigned char *)burst_buffer, Buffer_Size);
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4811      	ldr	r0, [pc, #68]	; (8000c24 <ILI9341_Draw_Colour_Burst+0x130>)
 8000bde:	f000 fc96 	bl	800150e <SPI_TransmitDMA>
		SYSTICK_DelayMs(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff fade 	bl	80001a4 <SYSTICK_DelayMs>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bea:	3301      	adds	r3, #1
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d3ef      	bcc.n	8000bd6 <ILI9341_Draw_Colour_Burst+0xe2>
		//HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
		}
}

//REMAINDER!
SPI_TransmitDMA(&hspi1, (unsigned char *)burst_buffer, Remainder_from_block);
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4809      	ldr	r0, [pc, #36]	; (8000c24 <ILI9341_Draw_Colour_Burst+0x130>)
 8000bfe:	f000 fc86 	bl	800150e <SPI_TransmitDMA>
SYSTICK_DelayMs(1);
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff face 	bl	80001a4 <SYSTICK_DelayMs>
//SPI_Transmit(&hspi1, (unsigned char *)burst_buffer, Remainder_from_block);
//HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	

GPIO_WritePin(&CS, GPIO_PIN_SET);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <ILI9341_Draw_Colour_Burst+0x12c>)
 8000c0c:	f000 fa8a 	bl	8001124 <GPIO_WritePin>
 8000c10:	46ad      	mov	sp, r5
//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 8000c12:	bf00      	nop
 8000c14:	3730      	adds	r7, #48	; 0x30
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bdb0      	pop	{r4, r5, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000005c 	.word	0x2000005c
 8000c20:	20000090 	.word	0x20000090
 8000c24:	20000074 	.word	0x20000074

08000c28 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4623      	mov	r3, r4
 8000c38:	80fb      	strh	r3, [r7, #6]
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80bb      	strh	r3, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	807b      	strh	r3, [r7, #2]
 8000c42:	4613      	mov	r3, r2
 8000c44:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <ILI9341_Draw_Rectangle+0xb0>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	88fa      	ldrh	r2, [r7, #6]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d23d      	bcs.n	8000cce <ILI9341_Draw_Rectangle+0xa6>
 8000c52:	4b22      	ldr	r3, [pc, #136]	; (8000cdc <ILI9341_Draw_Rectangle+0xb4>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	88ba      	ldrh	r2, [r7, #4]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d237      	bcs.n	8000cce <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8000c5e:	88fa      	ldrh	r2, [r7, #6]
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <ILI9341_Draw_Rectangle+0xb0>)
 8000c66:	8812      	ldrh	r2, [r2, #0]
 8000c68:	b292      	uxth	r2, r2
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	dd05      	ble.n	8000c7a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <ILI9341_Draw_Rectangle+0xb0>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8000c7a:	88ba      	ldrh	r2, [r7, #4]
 8000c7c:	883b      	ldrh	r3, [r7, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <ILI9341_Draw_Rectangle+0xb4>)
 8000c82:	8812      	ldrh	r2, [r2, #0]
 8000c84:	b292      	uxth	r2, r2
 8000c86:	4293      	cmp	r3, r2
 8000c88:	dd05      	ble.n	8000c96 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <ILI9341_Draw_Rectangle+0xb4>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8000c96:	88fa      	ldrh	r2, [r7, #6]
 8000c98:	887b      	ldrh	r3, [r7, #2]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	b29c      	uxth	r4, r3
 8000ca2:	88ba      	ldrh	r2, [r7, #4]
 8000ca4:	883b      	ldrh	r3, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	3b01      	subs	r3, #1
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	88b9      	ldrh	r1, [r7, #4]
 8000cb0:	88f8      	ldrh	r0, [r7, #6]
 8000cb2:	4622      	mov	r2, r4
 8000cb4:	f7ff fd4e 	bl	8000754 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8000cb8:	883b      	ldrh	r3, [r7, #0]
 8000cba:	887a      	ldrh	r2, [r7, #2]
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	8b3b      	ldrh	r3, [r7, #24]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff ff14 	bl	8000af4 <ILI9341_Draw_Colour_Burst>
 8000ccc:	e000      	b.n	8000cd0 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8000cce:	bf00      	nop
}
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd90      	pop	{r4, r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000002 	.word	0x20000002
 8000cdc:	20000000 	.word	0x20000000

08000ce0 <GPIO_Init>:
 */

#include "Drivers/GPIO/GPIO.h"

HAL_Status GPIO_Init(GPIO_HandleTypeDef* gpio_handle)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <GPIO_Init+0x18>
    {
        status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e20e      	b.n	8001116 <GPIO_Init+0x436>
    }
    else
    {
        /* Check if pin number is less than 8 */
        if(gpio_handle->GPIO_Pin < GPIO_PIN_8)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	791b      	ldrb	r3, [r3, #4]
 8000cfc:	2b07      	cmp	r3, #7
 8000cfe:	f200 80fd 	bhi.w	8000efc <GPIO_Init+0x21c>
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	795b      	ldrb	r3, [r3, #5]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d876      	bhi.n	8000df8 <GPIO_Init+0x118>
 8000d0a:	a201      	add	r2, pc, #4	; (adr r2, 8000d10 <GPIO_Init+0x30>)
 8000d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d10:	08000d21 	.word	0x08000d21
 8000d14:	08000d57 	.word	0x08000d57
 8000d18:	08000d8d 	.word	0x08000d8d
 8000d1c:	08000dc3 	.word	0x08000dc3
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	400a      	ands	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x04UL << (gpio_handle->GPIO_Pin * 4));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6819      	ldr	r1, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	791b      	ldrb	r3, [r3, #4]
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	2204      	movs	r2, #4
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	601a      	str	r2, [r3, #0]
                    break;
 8000d54:	e053      	b.n	8000dfe <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6819      	ldr	r1, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	791b      	ldrb	r3, [r3, #4]
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	220f      	movs	r2, #15
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43da      	mvns	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	400a      	ands	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6819      	ldr	r1, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	2201      	movs	r2, #1
 8000d80:	409a      	lsls	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	430a      	orrs	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]
                    break;
 8000d8a:	e038      	b.n	8000dfe <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6819      	ldr	r1, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	791b      	ldrb	r3, [r3, #4]
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	220f      	movs	r2, #15
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	400a      	ands	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	791b      	ldrb	r3, [r3, #4]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	2202      	movs	r2, #2
 8000db6:	409a      	lsls	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	601a      	str	r2, [r3, #0]
                    break;
 8000dc0:	e01d      	b.n	8000dfe <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	791b      	ldrb	r3, [r3, #4]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43da      	mvns	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	400a      	ands	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	791b      	ldrb	r3, [r3, #4]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	2203      	movs	r2, #3
 8000dec:	409a      	lsls	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	430a      	orrs	r2, r1
 8000df4:	601a      	str	r2, [r3, #0]
                    break;
 8000df6:	e002      	b.n	8000dfe <GPIO_Init+0x11e>
                default:
                    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
                    break;
 8000dfc:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	799b      	ldrb	r3, [r3, #6]
 8000e02:	2b06      	cmp	r3, #6
 8000e04:	d877      	bhi.n	8000ef6 <GPIO_Init+0x216>
 8000e06:	a201      	add	r2, pc, #4	; (adr r2, 8000e0c <GPIO_Init+0x12c>)
 8000e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0c:	08000e29 	.word	0x08000e29
 8000e10:	08000e49 	.word	0x08000e49
 8000e14:	08000e83 	.word	0x08000e83
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000e49 	.word	0x08000e49
 8000e20:	08000e83 	.word	0x08000e83
 8000e24:	08000ebd 	.word	0x08000ebd
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6819      	ldr	r1, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	791b      	ldrb	r3, [r3, #4]
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	3302      	adds	r3, #2
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	400a      	ands	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
                    break;
 8000e46:	e166      	b.n	8001116 <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	6819      	ldr	r1, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	791b      	ldrb	r3, [r3, #4]
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	3302      	adds	r3, #2
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43da      	mvns	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	400a      	ands	r2, r1
 8000e64:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6819      	ldr	r1, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	791b      	ldrb	r3, [r3, #4]
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	3302      	adds	r3, #2
 8000e74:	2201      	movs	r2, #1
 8000e76:	409a      	lsls	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
                    break;
 8000e80:	e149      	b.n	8001116 <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6819      	ldr	r1, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	791b      	ldrb	r3, [r3, #4]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	2202      	movs	r2, #2
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
                    break;
 8000eba:	e12c      	b.n	8001116 <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6819      	ldr	r1, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	791b      	ldrb	r3, [r3, #4]
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6819      	ldr	r1, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	791b      	ldrb	r3, [r3, #4]
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	2203      	movs	r2, #3
 8000eea:	409a      	lsls	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
                    break;
 8000ef4:	e10f      	b.n	8001116 <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
                    break;
 8000efa:	e10c      	b.n	8001116 <GPIO_Init+0x436>
            }
        }
        else
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	795b      	ldrb	r3, [r3, #5]
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d87f      	bhi.n	8001004 <GPIO_Init+0x324>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <GPIO_Init+0x22c>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f1d 	.word	0x08000f1d
 8000f10:	08000f57 	.word	0x08000f57
 8000f14:	08000f91 	.word	0x08000f91
 8000f18:	08000fcb 	.word	0x08000fcb
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6859      	ldr	r1, [r3, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	3b08      	subs	r3, #8
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43da      	mvns	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	400a      	ands	r2, r1
 8000f38:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x04UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6859      	ldr	r1, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	791b      	ldrb	r3, [r3, #4]
 8000f44:	3b08      	subs	r3, #8
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	2204      	movs	r2, #4
 8000f4a:	409a      	lsls	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]
                    break;
 8000f54:	e059      	b.n	800100a <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6859      	ldr	r1, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	791b      	ldrb	r3, [r3, #4]
 8000f60:	3b08      	subs	r3, #8
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	400a      	ands	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6859      	ldr	r1, [r3, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	3b08      	subs	r3, #8
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	2201      	movs	r2, #1
 8000f84:	409a      	lsls	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	605a      	str	r2, [r3, #4]
                    break;
 8000f8e:	e03c      	b.n	800100a <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6859      	ldr	r1, [r3, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	791b      	ldrb	r3, [r3, #4]
 8000f9a:	3b08      	subs	r3, #8
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	220f      	movs	r2, #15
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	400a      	ands	r2, r1
 8000fac:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6859      	ldr	r1, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	791b      	ldrb	r3, [r3, #4]
 8000fb8:	3b08      	subs	r3, #8
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	605a      	str	r2, [r3, #4]
                    break;
 8000fc8:	e01f      	b.n	800100a <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6859      	ldr	r1, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	791b      	ldrb	r3, [r3, #4]
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	400a      	ands	r2, r1
 8000fe6:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6859      	ldr	r1, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	3b08      	subs	r3, #8
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	605a      	str	r2, [r3, #4]
                    break;
 8001002:	e002      	b.n	800100a <GPIO_Init+0x32a>
                default:
                    status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
                    break;
 8001008:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	799b      	ldrb	r3, [r3, #6]
 800100e:	2b06      	cmp	r3, #6
 8001010:	d87e      	bhi.n	8001110 <GPIO_Init+0x430>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <GPIO_Init+0x338>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001035 	.word	0x08001035
 800101c:	08001057 	.word	0x08001057
 8001020:	08001095 	.word	0x08001095
 8001024:	08001035 	.word	0x08001035
 8001028:	08001057 	.word	0x08001057
 800102c:	08001095 	.word	0x08001095
 8001030:	080010d3 	.word	0x080010d3
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6859      	ldr	r1, [r3, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	791b      	ldrb	r3, [r3, #4]
 800103e:	3b08      	subs	r3, #8
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	400a      	ands	r2, r1
 8001052:	605a      	str	r2, [r3, #4]
                    break;
 8001054:	e05f      	b.n	8001116 <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	3b08      	subs	r3, #8
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43da      	mvns	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	400a      	ands	r2, r1
 8001074:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6859      	ldr	r1, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	791b      	ldrb	r3, [r3, #4]
 8001080:	3b08      	subs	r3, #8
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	2201      	movs	r2, #1
 8001088:	409a      	lsls	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	430a      	orrs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]
                    break;
 8001092:	e040      	b.n	8001116 <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6859      	ldr	r1, [r3, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	791b      	ldrb	r3, [r3, #4]
 800109e:	3b08      	subs	r3, #8
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	400a      	ands	r2, r1
 80010b2:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6859      	ldr	r1, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	791b      	ldrb	r3, [r3, #4]
 80010be:	3b08      	subs	r3, #8
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	3302      	adds	r3, #2
 80010c4:	2202      	movs	r2, #2
 80010c6:	409a      	lsls	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	605a      	str	r2, [r3, #4]
                    break;
 80010d0:	e021      	b.n	8001116 <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6859      	ldr	r1, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	791b      	ldrb	r3, [r3, #4]
 80010dc:	3b08      	subs	r3, #8
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43da      	mvns	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	400a      	ands	r2, r1
 80010f0:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6859      	ldr	r1, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	791b      	ldrb	r3, [r3, #4]
 80010fc:	3b08      	subs	r3, #8
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	2203      	movs	r2, #3
 8001104:	409a      	lsls	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	605a      	str	r2, [r3, #4]
                    break;
 800110e:	e002      	b.n	8001116 <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
                    break;
 8001114:	bf00      	nop
        }

    }    
    }
    return status;
 8001116:	7bfb      	ldrb	r3, [r7, #15]

}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <GPIO_WritePin>:


HAL_Status GPIO_WritePin(GPIO_HandleTypeDef* gpio_handle, GPIO_PinState pin_state)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
    HAL_Status status = HAL_OKAY;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <GPIO_WritePin+0x1c>
    {
        status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e023      	b.n	8001188 <GPIO_WritePin+0x64>
    }
    else
    {
        if(GPIO_PIN_RESET == pin_state)
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10d      	bne.n	8001162 <GPIO_WritePin+0x3e>
        {
            gpio_handle->GPIO_TypeDef->BRR |= (1UL << gpio_handle->GPIO_Pin);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6959      	ldr	r1, [r3, #20]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	791b      	ldrb	r3, [r3, #4]
 8001150:	461a      	mov	r2, r3
 8001152:	2301      	movs	r3, #1
 8001154:	fa03 f202 	lsl.w	r2, r3, r2
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	e012      	b.n	8001188 <GPIO_WritePin+0x64>
        }
        else if(GPIO_PIN_SET == pin_state)
 8001162:	78fb      	ldrb	r3, [r7, #3]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d10d      	bne.n	8001184 <GPIO_WritePin+0x60>
        {
            gpio_handle->GPIO_TypeDef->BSRR |= (1UL << gpio_handle->GPIO_Pin);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6919      	ldr	r1, [r3, #16]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	791b      	ldrb	r3, [r3, #4]
 8001172:	461a      	mov	r2, r3
 8001174:	2301      	movs	r3, #1
 8001176:	fa03 f202 	lsl.w	r2, r3, r2
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	e001      	b.n	8001188 <GPIO_WritePin+0x64>
        }
        else
        {
            status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <SPI_Init>:

#include "Drivers/SPI/SPI.h"


HAL_Status SPI_Init(SPI_HandleTypeDef* hspi)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

    if(NULL == hspi)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <SPI_Init+0x18>
    {
        status = HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	e15c      	b.n	8001466 <SPI_Init+0x2d2>
    }
    else
    {
        
        /* Set SPI Slave Select */
        if(hspi->NSS == SPI_NSS_HARD)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7d1b      	ldrb	r3, [r3, #20]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d108      	bne.n	80011c6 <SPI_Init+0x32>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e023      	b.n	800120e <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_SOFT)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	7d1b      	ldrb	r3, [r3, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d108      	bne.n	80011e0 <SPI_Init+0x4c>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e016      	b.n	800120e <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_DISABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7d1b      	ldrb	r3, [r3, #20]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d110      	bne.n	800120a <SPI_Init+0x76>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011f6:	601a      	str	r2, [r3, #0]
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e001      	b.n	800120e <SPI_Init+0x7a>
        }
        else
        {
            status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI mode */
        if(hspi->Mode == SPI_MODE_MASTER)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	791b      	ldrb	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d108      	bne.n	8001228 <SPI_Init+0x94>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0204 	orr.w	r2, r2, #4
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e00e      	b.n	8001246 <SPI_Init+0xb2>
        }
        else if(hspi->Mode == SPI_MODE_SLAVE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	791b      	ldrb	r3, [r3, #4]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d108      	bne.n	8001242 <SPI_Init+0xae>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0204 	bic.w	r2, r2, #4
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e001      	b.n	8001246 <SPI_Init+0xb2>
        }
        else
        {
            status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Bi-Directional mode */
        if(hspi->BiDir == SPI_BIDIR_ENABLE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7d5b      	ldrb	r3, [r3, #21]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d108      	bne.n	8001260 <SPI_Init+0xcc>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIMODE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	e00e      	b.n	800127e <SPI_Init+0xea>
        }
        else if(hspi->BiDir == SPI_BIDIR_DISABLE)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7d5b      	ldrb	r3, [r3, #21]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d108      	bne.n	800127a <SPI_Init+0xe6>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_BIDIMODE);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	e001      	b.n	800127e <SPI_Init+0xea>
        }
        else
        {
            status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Data Size */
        if(hspi->DataSize == SPI_DATASIZE_8BIT)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	7c5b      	ldrb	r3, [r3, #17]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d108      	bne.n	8001298 <SPI_Init+0x104>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	e00e      	b.n	80012b6 <SPI_Init+0x122>
        }
        else if(hspi->DataSize == SPI_DATASIZE_16BIT)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	7c5b      	ldrb	r3, [r3, #17]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <SPI_Init+0x11e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e001      	b.n	80012b6 <SPI_Init+0x122>
        }
        else
        {
            status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Polarity */
        if(hspi->CPOL == SPI_CPOL_LOW)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	799b      	ldrb	r3, [r3, #6]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d108      	bne.n	80012d0 <SPI_Init+0x13c>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0202 	bic.w	r2, r2, #2
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e00e      	b.n	80012ee <SPI_Init+0x15a>
        }
        else if(hspi->CPOL == SPI_CPOL_HIGH)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	799b      	ldrb	r3, [r3, #6]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d108      	bne.n	80012ea <SPI_Init+0x156>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f042 0202 	orr.w	r2, r2, #2
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e001      	b.n	80012ee <SPI_Init+0x15a>
        }
        else
        {
           status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Phase */
        if(hspi->CPHA == SPI_CPHA_1EDGE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	79db      	ldrb	r3, [r3, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d108      	bne.n	8001308 <SPI_Init+0x174>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e00e      	b.n	8001326 <SPI_Init+0x192>
        }
        else if(hspi->CPHA == SPI_CPHA_2EDGE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	79db      	ldrb	r3, [r3, #7]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <SPI_Init+0x18e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e001      	b.n	8001326 <SPI_Init+0x192>
        }
        else
        {
            status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
        }

        /*Set TX DMA Option */
        if(hspi->SpiTxDma == SPI_TX_DMA_ENABLE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	7c9b      	ldrb	r3, [r3, #18]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d108      	bne.n	8001340 <SPI_Init+0x1ac>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0202 	orr.w	r2, r2, #2
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	e007      	b.n	8001350 <SPI_Init+0x1bc>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0202 	bic.w	r2, r2, #2
 800134e:	605a      	str	r2, [r3, #4]
        }

        /*Set DMA Option */
        if(hspi->SpiRxDma == SPI_RX_DMA_ENABLE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7cdb      	ldrb	r3, [r3, #19]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d108      	bne.n	800136a <SPI_Init+0x1d6>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 0201 	orr.w	r2, r2, #1
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	e007      	b.n	800137a <SPI_Init+0x1e6>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0201 	bic.w	r2, r2, #1
 8001378:	605a      	str	r2, [r3, #4]
        }



        /* Set SPI Baud Rate */
        switch(hspi->BaudRate)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	795b      	ldrb	r3, [r3, #5]
 800137e:	2b07      	cmp	r3, #7
 8001380:	d866      	bhi.n	8001450 <SPI_Init+0x2bc>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <SPI_Init+0x1f4>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	080013a9 	.word	0x080013a9
 800138c:	080013bb 	.word	0x080013bb
 8001390:	080013d1 	.word	0x080013d1
 8001394:	080013e7 	.word	0x080013e7
 8001398:	080013fd 	.word	0x080013fd
 800139c:	08001413 	.word	0x08001413
 80013a0:	08001429 	.word	0x08001429
 80013a4:	0800143f 	.word	0x0800143f
        {
            case SPI_BAUDRATE_DIV2:
                // Code for SPI_BAUD_RATE_DIV
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK , SPI_BAUDRATE_DIV2 << SPI_CR1_BR);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80013b6:	601a      	str	r2, [r3, #0]
                break;
 80013b8:	e04d      	b.n	8001456 <SPI_Init+0x2c2>
            // Add more cases for other baud rates
            case SPI_BAUDRATE_DIV4:
                // Code for SPI_BAUDRATE_DIV4
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV4 << SPI_CR1_BR);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f042 0208 	orr.w	r2, r2, #8
 80013cc:	601a      	str	r2, [r3, #0]
                break;
 80013ce:	e042      	b.n	8001456 <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV8:
                // Code for SPI_BAUDRATE_DIV8
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV8 << SPI_CR1_BR);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0210 	orr.w	r2, r2, #16
 80013e2:	601a      	str	r2, [r3, #0]
                break;
 80013e4:	e037      	b.n	8001456 <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV16:
                // Code for SPI_BAUDRATE_DIV16
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV16 << SPI_CR1_BR);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f042 0218 	orr.w	r2, r2, #24
 80013f8:	601a      	str	r2, [r3, #0]
                break;  
 80013fa:	e02c      	b.n	8001456 <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV32:
                // Code for SPI_BAUDRATE_DIV32
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV32 << SPI_CR1_BR);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0220 	orr.w	r2, r2, #32
 800140e:	601a      	str	r2, [r3, #0]
                break;
 8001410:	e021      	b.n	8001456 <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV64:
                // Code for SPI_BAUDRATE_DIV64
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV64 << SPI_CR1_BR);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8001424:	601a      	str	r2, [r3, #0]
                break;
 8001426:	e016      	b.n	8001456 <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV128:
                // Code for SPI_BAUDRATE_DIV128
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV128 << SPI_CR1_BR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800143a:	601a      	str	r2, [r3, #0]
                break;
 800143c:	e00b      	b.n	8001456 <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV256:
                // Code for SPI_BAUDRATE_DIV256
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV256 << SPI_CR1_BR);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800144c:	601a      	str	r2, [r3, #0]
                break;
 800144e:	e002      	b.n	8001456 <SPI_Init+0x2c2>
            default:
                /*------ Take some action ---- */
                status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
                break;
 8001454:	bf00      	nop
        }
        /* Enable SPI */
        SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001464:	601a      	str	r2, [r3, #0]

    }

    return status;
 8001466:	7bfb      	ldrb	r3, [r7, #15]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop

08001474 <SPI_Transmit>:
 * @param Timeout 
 * @return HAL_Status 
 */

HAL_Status SPI_Transmit(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8001480:	2300      	movs	r3, #0
 8001482:	75fb      	strb	r3, [r7, #23]
    if((NULL == hspi) || (NULL == pData))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <SPI_Transmit+0x1c>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d102      	bne.n	8001496 <SPI_Transmit+0x22>
    {
        status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	75fb      	strb	r3, [r7, #23]
 8001494:	e035      	b.n	8001502 <SPI_Transmit+0x8e>
    }
    else
    {
           /* Init TX counter */
           uint32_t counter = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
           /* Check size */
           if(hspi->DataSize == SPI_DATASIZE_8BIT)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	7c5b      	ldrb	r3, [r3, #17]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d12b      	bne.n	80014fa <SPI_Transmit+0x86>
           {
            /* 8-bit DataSize */
            while(counter < Size)
 80014a2:	e012      	b.n	80014ca <SPI_Transmit+0x56>
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 80014a4:	bf00      	nop
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	085b      	lsrs	r3, r3, #1
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f7      	beq.n	80014a6 <SPI_Transmit+0x32>
                hspi->Instance->DR = (uint8_t)pData[counter];
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4413      	add	r3, r2
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60da      	str	r2, [r3, #12]
                counter++;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	3301      	adds	r3, #1
 80014c8:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d3e8      	bcc.n	80014a4 <SPI_Transmit+0x30>
 80014d2:	e016      	b.n	8001502 <SPI_Transmit+0x8e>
            {
            /* 16-bit DataSize */
            while(counter < Size)
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 80014d4:	bf00      	nop
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	085b      	lsrs	r3, r3, #1
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f7      	beq.n	80014d6 <SPI_Transmit+0x62>
                hspi->Instance->DR = (uint16_t)pData[counter];
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4413      	add	r3, r2
 80014ec:	781a      	ldrb	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60da      	str	r2, [r3, #12]
                counter++;
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	3301      	adds	r3, #1
 80014f8:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d3e8      	bcc.n	80014d4 <SPI_Transmit+0x60>
            }           
            }
    }
    return status;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
}
 8001504:	4618      	mov	r0, r3
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <SPI_TransmitDMA>:
 * @param pData 
 * @param Size 
 * @return HAL_Status 
 */
HAL_Status SPI_TransmitDMA(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	60f8      	str	r0, [r7, #12]
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
    if(NULL == hspi)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <SPI_TransmitDMA+0x1c>
    {
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	75fb      	strb	r3, [r7, #23]
 8001528:	e019      	b.n	800155e <SPI_TransmitDMA+0x50>
    }
    else
    {
        /* Set the DMA channel memory address */
        DMA_SetMemoryAddress(hspi->txdma, pData);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	68b9      	ldr	r1, [r7, #8]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff71 	bl	8000418 <DMA_SetMemoryAddress>

        /* Set the DMA channel peripheral address */
        DMA_SetPeriphAddress(hspi->txdma, &(hspi->Instance->DR));
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	330c      	adds	r3, #12
 8001540:	4619      	mov	r1, r3
 8001542:	4610      	mov	r0, r2
 8001544:	f7fe ff4e 	bl	80003e4 <DMA_SetPeriphAddress>

        /* Set the DMA channel count */
        DMA_SetDataCounter(hspi->txdma,Size);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff96 	bl	8000480 <DMA_SetDataCounter>

        /* Start sending */
        DMA_Start(hspi->txdma);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ff77 	bl	800044c <DMA_Start>
    }
    return status;
 800155e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <main>:
void HAL_Init();

void transmit(uint8_t cmd);

int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af02      	add	r7, sp, #8
//	_RCC_GPIOA_ENABLE();
//	_RCC_GPIOB_ENABLE();
//	_RCC_SPI1_ENABLE();
//	_RCC_DMA1_ENABLE();

	HAL_Init();
 800156e:	f000 f827 	bl	80015c0 <HAL_Init>
	ILI9341_Init();
 8001572:	f7ff f9b1 	bl	80008d8 <ILI9341_Init>

	uint8_t data = 0x06;
 8001576:	2306      	movs	r3, #6
 8001578:	71fb      	strb	r3, [r7, #7]
		// ILI9341_Fill_Screen(GREEN);
		// SYSTICK_DelayMs(200);
		// ILI9341_Fill_Screen(WHITE);
		// SYSTICK_DelayMs(200);

		ILI9341_Draw_Rectangle(0,0,128,160,BLUE);
 800157a:	231f      	movs	r3, #31
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	23a0      	movs	r3, #160	; 0xa0
 8001580:	2280      	movs	r2, #128	; 0x80
 8001582:	2100      	movs	r1, #0
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fb4f 	bl	8000c28 <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 800158a:	20c8      	movs	r0, #200	; 0xc8
 800158c:	f7fe fe0a 	bl	80001a4 <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,0,128,160,BLACK);
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	23a0      	movs	r3, #160	; 0xa0
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	2100      	movs	r1, #0
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fb44 	bl	8000c28 <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 80015a0:	20c8      	movs	r0, #200	; 0xc8
 80015a2:	f7fe fdff 	bl	80001a4 <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,0,128,160,WHITE);
 80015a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	23a0      	movs	r3, #160	; 0xa0
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	2100      	movs	r1, #0
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fb38 	bl	8000c28 <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 80015b8:	20c8      	movs	r0, #200	; 0xc8
 80015ba:	f7fe fdf3 	bl	80001a4 <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,0,128,160,BLUE);
 80015be:	e7dc      	b.n	800157a <main+0x12>

080015c0 <HAL_Init>:
	_RCC_GPIOD_ENABLE();

}

void HAL_Init()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	 /* Init Systick */
	 SYSTICK_Init();
 80015c4:	f7fe fdd4 	bl	8000170 <SYSTICK_Init>
	 /* enable RCC clock */
	 _RCC_GPIOA_ENABLE();
 80015c8:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_Init+0x158>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_Init+0x158>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6193      	str	r3, [r2, #24]
	 _RCC_GPIOB_ENABLE();
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_Init+0x158>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a4f      	ldr	r2, [pc, #316]	; (8001718 <HAL_Init+0x158>)
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
	 _RCC_SPI1_ENABLE();
 80015e0:	4b4d      	ldr	r3, [pc, #308]	; (8001718 <HAL_Init+0x158>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_Init+0x158>)
 80015e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ea:	6193      	str	r3, [r2, #24]
	 _RCC_DMA1_ENABLE();
 80015ec:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <HAL_Init+0x158>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	4a49      	ldr	r2, [pc, #292]	; (8001718 <HAL_Init+0x158>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6153      	str	r3, [r2, #20]
	//  DMA_Init(spi1.txdma);

	//  SPI_Init(&spi1);

	/* Init SPI 2 as slave */
	_RCC_SPI2_ENABLE();
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_Init+0x158>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	4a46      	ldr	r2, [pc, #280]	; (8001718 <HAL_Init+0x158>)
 80015fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001602:	61d3      	str	r3, [r2, #28]
	spi2.Instance = SPI2;
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_Init+0x15c>)
 8001606:	4a46      	ldr	r2, [pc, #280]	; (8001720 <HAL_Init+0x160>)
 8001608:	601a      	str	r2, [r3, #0]
	spi2.Mode = SPI_MODE_SLAVE;
 800160a:	4b44      	ldr	r3, [pc, #272]	; (800171c <HAL_Init+0x15c>)
 800160c:	2201      	movs	r2, #1
 800160e:	711a      	strb	r2, [r3, #4]
	spi2.DataSize = SPI_DATASIZE_8BIT;
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_Init+0x15c>)
 8001612:	2200      	movs	r2, #0
 8001614:	745a      	strb	r2, [r3, #17]
	spi2.CPOL = SPI_CPOL_LOW;
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_Init+0x15c>)
 8001618:	2200      	movs	r2, #0
 800161a:	719a      	strb	r2, [r3, #6]
	spi2.CPHA = SPI_CPHA_1EDGE;
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_Init+0x15c>)
 800161e:	2200      	movs	r2, #0
 8001620:	71da      	strb	r2, [r3, #7]
	spi2.BaudRate = SPI_BAUDRATE_DIV2;
 8001622:	4b3e      	ldr	r3, [pc, #248]	; (800171c <HAL_Init+0x15c>)
 8001624:	2200      	movs	r2, #0
 8001626:	715a      	strb	r2, [r3, #5]
	spi2.NSS = SPI_NSS_HARD;
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <HAL_Init+0x15c>)
 800162a:	2201      	movs	r2, #1
 800162c:	751a      	strb	r2, [r3, #20]
	spi2.BiDir = SPI_BIDIR_DISABLE;
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_Init+0x15c>)
 8001630:	2200      	movs	r2, #0
 8001632:	755a      	strb	r2, [r3, #21]
	spi2.CRC = SPI_CRC_DISABLE;
 8001634:	4b39      	ldr	r3, [pc, #228]	; (800171c <HAL_Init+0x15c>)
 8001636:	2200      	movs	r2, #0
 8001638:	759a      	strb	r2, [r3, #22]
	spi2.FirstBit = SPI_LSB_FIRST;
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_Init+0x15c>)
 800163c:	2201      	movs	r2, #1
 800163e:	741a      	strb	r2, [r3, #16]
	spi2.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 8001640:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_Init+0x15c>)
 8001642:	2200      	movs	r2, #0
 8001644:	75da      	strb	r2, [r3, #23]
	spi2.CRCDir = SPI_CRC_TX;
 8001646:	4b35      	ldr	r3, [pc, #212]	; (800171c <HAL_Init+0x15c>)
 8001648:	2201      	movs	r2, #1
 800164a:	761a      	strb	r2, [r3, #24]
	spi2.SpiTxDma = SPI_TX_DMA_DISABLE;
 800164c:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_Init+0x15c>)
 800164e:	2201      	movs	r2, #1
 8001650:	749a      	strb	r2, [r3, #18]
	spi2.SpiRxDma = SPI_RX_DMA_ENABLE;
 8001652:	4b32      	ldr	r3, [pc, #200]	; (800171c <HAL_Init+0x15c>)
 8001654:	2200      	movs	r2, #0
 8001656:	74da      	strb	r2, [r3, #19]

	/* Init MOSI,MISO,SCK,NSS pin configs */
	/* Init MOSI pin */
	mosi2.GPIO_TypeDef = PORT_SPI2;
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <HAL_Init+0x164>)
 800165a:	4a33      	ldr	r2, [pc, #204]	; (8001728 <HAL_Init+0x168>)
 800165c:	601a      	str	r2, [r3, #0]
	mosi2.GPIO_Pin = MOSI_SPI2;
 800165e:	4b31      	ldr	r3, [pc, #196]	; (8001724 <HAL_Init+0x164>)
 8001660:	220f      	movs	r2, #15
 8001662:	711a      	strb	r2, [r3, #4]
	mosi2.GPIO_Mode = GPIO_MODE_INPUT;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_Init+0x164>)
 8001666:	2200      	movs	r2, #0
 8001668:	715a      	strb	r2, [r3, #5]
	mosi2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_Init+0x164>)
 800166c:	2201      	movs	r2, #1
 800166e:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&mosi2);
 8001670:	482c      	ldr	r0, [pc, #176]	; (8001724 <HAL_Init+0x164>)
 8001672:	f7ff fb35 	bl	8000ce0 <GPIO_Init>

	/* Init MISO pin */
	miso2.GPIO_TypeDef = PORT_SPI2;
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_Init+0x16c>)
 8001678:	4a2b      	ldr	r2, [pc, #172]	; (8001728 <HAL_Init+0x168>)
 800167a:	601a      	str	r2, [r3, #0]
	miso2.GPIO_Pin = MISO_SPI2;
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_Init+0x16c>)
 800167e:	220e      	movs	r2, #14
 8001680:	711a      	strb	r2, [r3, #4]
	miso2.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_Init+0x16c>)
 8001684:	2202      	movs	r2, #2
 8001686:	715a      	strb	r2, [r3, #5]
	miso2.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <HAL_Init+0x16c>)
 800168a:	2205      	movs	r2, #5
 800168c:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&miso2);
 800168e:	4827      	ldr	r0, [pc, #156]	; (800172c <HAL_Init+0x16c>)
 8001690:	f7ff fb26 	bl	8000ce0 <GPIO_Init>

	/* Init SCK pin */
	sck2.GPIO_TypeDef = PORT_SPI2;
 8001694:	4b26      	ldr	r3, [pc, #152]	; (8001730 <HAL_Init+0x170>)
 8001696:	4a24      	ldr	r2, [pc, #144]	; (8001728 <HAL_Init+0x168>)
 8001698:	601a      	str	r2, [r3, #0]
	sck2.GPIO_Pin = SCK_SPI2;
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_Init+0x170>)
 800169c:	220d      	movs	r2, #13
 800169e:	711a      	strb	r2, [r3, #4]
	sck2.GPIO_Mode = GPIO_MODE_INPUT;
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_Init+0x170>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	715a      	strb	r2, [r3, #5]
	sck2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_Init+0x170>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&sck2);
 80016ac:	4820      	ldr	r0, [pc, #128]	; (8001730 <HAL_Init+0x170>)
 80016ae:	f7ff fb17 	bl	8000ce0 <GPIO_Init>

	/* Init NSS pin */
	nss2.GPIO_TypeDef = PORT_SPI2;
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_Init+0x174>)
 80016b4:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_Init+0x168>)
 80016b6:	601a      	str	r2, [r3, #0]
	nss2.GPIO_Pin = NSS_SPI2;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_Init+0x174>)
 80016ba:	220c      	movs	r2, #12
 80016bc:	711a      	strb	r2, [r3, #4]
	nss2.GPIO_Mode = GPIO_MODE_INPUT;
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_Init+0x174>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	715a      	strb	r2, [r3, #5]
	nss2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_Init+0x174>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&nss2);
 80016ca:	481a      	ldr	r0, [pc, #104]	; (8001734 <HAL_Init+0x174>)
 80016cc:	f7ff fb08 	bl	8000ce0 <GPIO_Init>
	
	/*Init DMA channels */
	spiRxdma.dma_TypeDef = DMA1_4;
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <HAL_Init+0x178>)
 80016d2:	4a1a      	ldr	r2, [pc, #104]	; (800173c <HAL_Init+0x17c>)
 80016d4:	601a      	str	r2, [r3, #0]
	spiRxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_Init+0x178>)
 80016d8:	2201      	movs	r2, #1
 80016da:	721a      	strb	r2, [r3, #8]
	spiRxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <HAL_Init+0x178>)
 80016de:	2201      	movs	r2, #1
 80016e0:	711a      	strb	r2, [r3, #4]
	spiRxdma.dma_Direction = DMA_READ_FROM_PERIPHERAL;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_Init+0x178>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	715a      	strb	r2, [r3, #5]
	spiRxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_Init+0x178>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	719a      	strb	r2, [r3, #6]
	spiRxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_Init+0x178>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	71da      	strb	r2, [r3, #7]
	spiRxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_Init+0x178>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	725a      	strb	r2, [r3, #9]
	spiRxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_Init+0x178>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	729a      	strb	r2, [r3, #10]
	spiRxdma.dma_Interrupt = DMA_INTERRUPT_ENABLE;
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_Init+0x178>)
 8001702:	2200      	movs	r2, #0
 8001704:	72da      	strb	r2, [r3, #11]

	spi2.rxdma = &spiRxdma;
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_Init+0x15c>)
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_Init+0x178>)
 800170a:	60da      	str	r2, [r3, #12]

	//DMA_Init(spi2.rxdma);


	SPI_Init(&spi2);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <HAL_Init+0x15c>)
 800170e:	f7ff fd41 	bl	8001194 <SPI_Init>
	// DMA_Init(&dma);
	// DMA_SetCallBackFn(&dma,DMA1_1_CallbackFn);
	// DMA_Transfer(&dma, sendArray, receiveArray,2);


}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40021000 	.word	0x40021000
 800171c:	200000b4 	.word	0x200000b4
 8001720:	40003800 	.word	0x40003800
 8001724:	200000a4 	.word	0x200000a4
 8001728:	40010c00 	.word	0x40010c00
 800172c:	200000d0 	.word	0x200000d0
 8001730:	200000f8 	.word	0x200000f8
 8001734:	2000010c 	.word	0x2000010c
 8001738:	20000100 	.word	0x20000100
 800173c:	40020044 	.word	0x40020044

08001740 <WWDG_IRQHandler>:
{
	GPIOA->ODR ^= (1<<0);
}

void WWDG_IRQHandler()
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <WWDG_IRQHandler+0x18>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4a03      	ldr	r2, [pc, #12]	; (8001758 <WWDG_IRQHandler+0x18>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	60d3      	str	r3, [r2, #12]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr
 8001758:	40010800 	.word	0x40010800

0800175c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800175e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001760:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <LoopForever+0x6>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	; (800179c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <LoopForever+0xe>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	; (80017a8 <LoopForever+0x16>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800178a:	f000 f811 	bl	80017b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7ff feeb 	bl	8001568 <main>

08001792 <LoopForever>:

LoopForever:
    b LoopForever
 8001792:	e7fe      	b.n	8001792 <LoopForever>
  ldr   r0, =_estack
 8001794:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80017a0:	08001818 	.word	0x08001818
  ldr r2, =_sbss
 80017a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80017a8:	20000130 	.word	0x20000130

080017ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_2_IRQHandler>
	...

080017b0 <__libc_init_array>:
 80017b0:	b570      	push	{r4, r5, r6, lr}
 80017b2:	2600      	movs	r6, #0
 80017b4:	4d0c      	ldr	r5, [pc, #48]	; (80017e8 <__libc_init_array+0x38>)
 80017b6:	4c0d      	ldr	r4, [pc, #52]	; (80017ec <__libc_init_array+0x3c>)
 80017b8:	1b64      	subs	r4, r4, r5
 80017ba:	10a4      	asrs	r4, r4, #2
 80017bc:	42a6      	cmp	r6, r4
 80017be:	d109      	bne.n	80017d4 <__libc_init_array+0x24>
 80017c0:	f000 f81a 	bl	80017f8 <_init>
 80017c4:	2600      	movs	r6, #0
 80017c6:	4d0a      	ldr	r5, [pc, #40]	; (80017f0 <__libc_init_array+0x40>)
 80017c8:	4c0a      	ldr	r4, [pc, #40]	; (80017f4 <__libc_init_array+0x44>)
 80017ca:	1b64      	subs	r4, r4, r5
 80017cc:	10a4      	asrs	r4, r4, #2
 80017ce:	42a6      	cmp	r6, r4
 80017d0:	d105      	bne.n	80017de <__libc_init_array+0x2e>
 80017d2:	bd70      	pop	{r4, r5, r6, pc}
 80017d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80017d8:	4798      	blx	r3
 80017da:	3601      	adds	r6, #1
 80017dc:	e7ee      	b.n	80017bc <__libc_init_array+0xc>
 80017de:	f855 3b04 	ldr.w	r3, [r5], #4
 80017e2:	4798      	blx	r3
 80017e4:	3601      	adds	r6, #1
 80017e6:	e7f2      	b.n	80017ce <__libc_init_array+0x1e>
 80017e8:	08001810 	.word	0x08001810
 80017ec:	08001810 	.word	0x08001810
 80017f0:	08001810 	.word	0x08001810
 80017f4:	08001814 	.word	0x08001814

080017f8 <_init>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	bf00      	nop
 80017fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fe:	bc08      	pop	{r3}
 8001800:	469e      	mov	lr, r3
 8001802:	4770      	bx	lr

08001804 <_fini>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	bf00      	nop
 8001808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800180a:	bc08      	pop	{r3}
 800180c:	469e      	mov	lr, r3
 800180e:	4770      	bx	lr
