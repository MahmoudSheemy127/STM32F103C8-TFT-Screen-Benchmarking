
ARM-Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000338  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000468  08000470  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000468  08000468  00010470  2**0
                  CONTENTS
  4 .ARM          00000000  08000468  08000468  00010470  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000468  08000470  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800046c  0800046c  0001046c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000000  08000470  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000470  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010470  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000121f  00000000  00000000  00010499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d7  00000000  00000000  000116b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00011b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  00011d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001221  00000000  00000000  00011ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b7e  00000000  00000000  00013109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005a3f  00000000  00000000  00013c87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000196c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005fc  00000000  00000000  0001971c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000450 	.word	0x08000450

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000450 	.word	0x08000450

08000170 <NVIC_SetEnableInterrupt>:
 * @brief Enable interrupt for a given irq
 * 
 * @param copy_enumIRQ irq number for interrupt 
 */
void NVIC_SetEnableInterrupt(NVIC_IRQ copy_enumIRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
    NVIC->ISER[(copy_enumIRQ >> 5)] |= (1 << (copy_enumIRQ & 0x1F));
 800017a:	4a0d      	ldr	r2, [pc, #52]	; (80001b0 <NVIC_SetEnableInterrupt+0x40>)
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	115b      	asrs	r3, r3, #5
 8000182:	b25b      	sxtb	r3, r3
 8000184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000188:	79fa      	ldrb	r2, [r7, #7]
 800018a:	f002 021f 	and.w	r2, r2, #31
 800018e:	2101      	movs	r1, #1
 8000190:	fa01 f202 	lsl.w	r2, r1, r2
 8000194:	4610      	mov	r0, r2
 8000196:	4906      	ldr	r1, [pc, #24]	; (80001b0 <NVIC_SetEnableInterrupt+0x40>)
 8000198:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800019c:	1152      	asrs	r2, r2, #5
 800019e:	b252      	sxtb	r2, r2
 80001a0:	4303      	orrs	r3, r0
 80001a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
    
}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	e000e100 	.word	0xe000e100

080001b4 <SYSTICK_Init>:

#include "CortexM3/SYSTICK_M3.h"


void SYSTICK_Init()
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	/* Disable SYSTICK */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 80001b8:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <SYSTICK_Init+0x30>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a09      	ldr	r2, [pc, #36]	; (80001e4 <SYSTICK_Init+0x30>)
 80001be:	f023 0301 	bic.w	r3, r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt*/
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <SYSTICK_Init+0x30>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <SYSTICK_Init+0x30>)
 80001ca:	f043 0302 	orr.w	r3, r3, #2
 80001ce:	6013      	str	r3, [r2, #0]
	/* Set Prescaler of the Systick*/
	if(SYSTICK_CLK_SRC_PRESCALER == SYSTICK_CLK_SRC_PRESCALER_1)
	{
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_CLKSOURCE_BIT_POS);
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <SYSTICK_Init+0x30>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <SYSTICK_Init+0x30>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6013      	str	r3, [r2, #0]
	}	
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e010 	.word	0xe000e010

080001e8 <SYSTICK_SetNumOfTicks>:
	}
	/* Wait till flag is raised */
}

static void SYSTICK_SetNumOfTicks(uint32_t copy_u32SystickNumOfTicks)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	/* Set Number of ticks*/
	if(copy_u32SystickNumOfTicks > SYSTICK_MAX_PRE_COUNT)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001f6:	d904      	bls.n	8000202 <SYSTICK_SetNumOfTicks+0x1a>
	{
			SYSTICK->SYSRVR	= SYSTICK_MAX_PRE_COUNT;
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <SYSTICK_SetNumOfTicks+0x2c>)
 80001fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80001fe:	605a      	str	r2, [r3, #4]
	}
	else
	{
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
	}
}
 8000200:	e002      	b.n	8000208 <SYSTICK_SetNumOfTicks+0x20>
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
 8000202:	4a04      	ldr	r2, [pc, #16]	; (8000214 <SYSTICK_SetNumOfTicks+0x2c>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	6053      	str	r3, [r2, #4]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	e000e010 	.word	0xe000e010

08000218 <SYSTICK_StartTimer>:
	/* Start SYSTICK */	
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
}

void SYSTICK_StartTimer(uint32_t copy_u32SystickNumOfMilliseconds, void(*copy_SystickCallBackFun))
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]

	/* Set number of ticks */
	SYSTICK_SetNumOfTicks(copy_u32SystickNumOfMilliseconds * SYSTICK_ONE_MILLISECOND_TICKS);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000228:	fb02 f303 	mul.w	r3, r2, r3
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffdb 	bl	80001e8 <SYSTICK_SetNumOfTicks>
	/* Set Callback function */
	SYSTICK_CallBackFunction = copy_SystickCallBackFun;
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	4a07      	ldr	r2, [pc, #28]	; (8000254 <SYSTICK_StartTimer+0x3c>)
 8000236:	6013      	str	r3, [r2, #0]
	/* Reset counter */
	SYSTICK_OverflowCounter = 0;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <SYSTICK_StartTimer+0x40>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
	/* Start SYSTICK */	
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <SYSTICK_StartTimer+0x44>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a06      	ldr	r2, [pc, #24]	; (800025c <SYSTICK_StartTimer+0x44>)
 8000244:	f043 0301 	orr.w	r3, r3, #1
 8000248:	6013      	str	r3, [r2, #0]
}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	20000020 	.word	0x20000020
 8000258:	2000001c 	.word	0x2000001c
 800025c:	e000e010 	.word	0xe000e010

08000260 <SysTick_Handler>:
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
}


void SysTick_Handler()
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	if(SYSTICK_OverflowCounter < SYSTICK_NumOfOverflows)
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <SysTick_Handler+0x2c>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b09      	ldr	r3, [pc, #36]	; (8000290 <SysTick_Handler+0x30>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	429a      	cmp	r2, r3
 800026e:	d205      	bcs.n	800027c <SysTick_Handler+0x1c>
	{
		SYSTICK_OverflowCounter++;
 8000270:	4b06      	ldr	r3, [pc, #24]	; (800028c <SysTick_Handler+0x2c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3301      	adds	r3, #1
 8000276:	4a05      	ldr	r2, [pc, #20]	; (800028c <SysTick_Handler+0x2c>)
 8000278:	6013      	str	r3, [r2, #0]
	else
	{
		SYSTICK_OverflowCounter = 0;
		SYSTICK_CallBackFunction();
	}
 800027a:	e005      	b.n	8000288 <SysTick_Handler+0x28>
		SYSTICK_OverflowCounter = 0;
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <SysTick_Handler+0x2c>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		SYSTICK_CallBackFunction();
 8000282:	4b04      	ldr	r3, [pc, #16]	; (8000294 <SysTick_Handler+0x34>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4798      	blx	r3
 8000288:	bf00      	nop
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000001c 	.word	0x2000001c
 8000290:	20000024 	.word	0x20000024
 8000294:	20000020 	.word	0x20000020

08000298 <DMA1_Channel1_IRQHandler>:
    return hal_Status;
}


void DMA1_Channel1_IRQHandler()
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    DMA1_1_CallbackFnPtr();
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <DMA1_Channel1_IRQHandler+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4798      	blx	r3
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000028 	.word	0x20000028

080002ac <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler()
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
    DMA1_2_CallbackFnPtr();
 80002b0:	4b02      	ldr	r3, [pc, #8]	; (80002bc <DMA1_Channel2_IRQHandler+0x10>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4798      	blx	r3
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000034 	.word	0x20000034

080002c0 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 80002c4:	4b02      	ldr	r3, [pc, #8]	; (80002d0 <DMA1_Channel3_IRQHandler+0x10>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4798      	blx	r3
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	2000002c 	.word	0x2000002c

080002d4 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler()
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0

}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0

}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler()
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0

}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler()
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr

08000304 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler()
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0

}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	bc80      	pop	{r7}
 800030e:	4770      	bx	lr

08000310 <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler()
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler()
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr

08000328 <main>:

/* Define callback function */
void DMA1_1_CallbackFn();

int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

	// RCC->RCC_APB2ENR |= (1 << 2);
	_RCC_GPIOA_ENABLE();
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <main+0x48>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a0f      	ldr	r2, [pc, #60]	; (8000370 <main+0x48>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
	_RCC_DMA1_ENABLE();
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <main+0x48>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a0c      	ldr	r2, [pc, #48]	; (8000370 <main+0x48>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6153      	str	r3, [r2, #20]
	//ENABLE NVIC Interrupt on DMA1 Channel1
	NVIC_SetEnableInterrupt(NVIC_IRQ_DMA1_Channel1_IRQHandler);
 8000344:	200b      	movs	r0, #11
 8000346:	f7ff ff13 	bl	8000170 <NVIC_SetEnableInterrupt>
//	Clock_Config();
	GPIOA->CRL |= (1 << 0);
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <main+0x4c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a09      	ldr	r2, [pc, #36]	; (8000374 <main+0x4c>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1 << 2);
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <main+0x4c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a06      	ldr	r2, [pc, #24]	; (8000374 <main+0x4c>)
 800035c:	f023 0304 	bic.w	r3, r3, #4
 8000360:	6013      	str	r3, [r2, #0]
	SYSTICK_Init();
 8000362:	f7ff ff27 	bl	80001b4 <SYSTICK_Init>
	SYSTICK_StartTimer(200,blinkLed);
 8000366:	4904      	ldr	r1, [pc, #16]	; (8000378 <main+0x50>)
 8000368:	20c8      	movs	r0, #200	; 0xc8
 800036a:	f7ff ff55 	bl	8000218 <SYSTICK_StartTimer>
	//GPIOA->ODR ^= (1<<0);

		/* Start operation move from array to another array */

		/* Loop forever */
		while(1)
 800036e:	e7fe      	b.n	800036e <main+0x46>
 8000370:	40021000 	.word	0x40021000
 8000374:	40010800 	.word	0x40010800
 8000378:	0800037d 	.word	0x0800037d

0800037c <blinkLed>:

}


void blinkLed()
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	GPIOA->ODR ^= (1<<0);
 8000380:	4b04      	ldr	r3, [pc, #16]	; (8000394 <blinkLed+0x18>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <blinkLed+0x18>)
 8000386:	f083 0301 	eor.w	r3, r3, #1
 800038a:	60d3      	str	r3, [r2, #12]
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr
 8000394:	40010800 	.word	0x40010800

08000398 <WWDG_IRQHandler>:

void WWDG_IRQHandler()
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <WWDG_IRQHandler+0x18>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a03      	ldr	r2, [pc, #12]	; (80003b0 <WWDG_IRQHandler+0x18>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	60d3      	str	r3, [r2, #12]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40010800 	.word	0x40010800

080003b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b4:	480d      	ldr	r0, [pc, #52]	; (80003ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003bc:	480c      	ldr	r0, [pc, #48]	; (80003f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003be:	490d      	ldr	r1, [pc, #52]	; (80003f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c0:	4a0d      	ldr	r2, [pc, #52]	; (80003f8 <LoopForever+0xe>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d4:	4c0a      	ldr	r4, [pc, #40]	; (8000400 <LoopForever+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e2:	f000 f811 	bl	8000408 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e6:	f7ff ff9f 	bl	8000328 <main>

080003ea <LoopForever>:

LoopForever:
    b LoopForever
 80003ea:	e7fe      	b.n	80003ea <LoopForever>
  ldr   r0, =_estack
 80003ec:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f8:	08000470 	.word	0x08000470
  ldr r2, =_sbss
 80003fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000400:	20000044 	.word	0x20000044

08000404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000404:	e7fe      	b.n	8000404 <ADC1_2_IRQHandler>
	...

08000408 <__libc_init_array>:
 8000408:	b570      	push	{r4, r5, r6, lr}
 800040a:	2600      	movs	r6, #0
 800040c:	4d0c      	ldr	r5, [pc, #48]	; (8000440 <__libc_init_array+0x38>)
 800040e:	4c0d      	ldr	r4, [pc, #52]	; (8000444 <__libc_init_array+0x3c>)
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	42a6      	cmp	r6, r4
 8000416:	d109      	bne.n	800042c <__libc_init_array+0x24>
 8000418:	f000 f81a 	bl	8000450 <_init>
 800041c:	2600      	movs	r6, #0
 800041e:	4d0a      	ldr	r5, [pc, #40]	; (8000448 <__libc_init_array+0x40>)
 8000420:	4c0a      	ldr	r4, [pc, #40]	; (800044c <__libc_init_array+0x44>)
 8000422:	1b64      	subs	r4, r4, r5
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	42a6      	cmp	r6, r4
 8000428:	d105      	bne.n	8000436 <__libc_init_array+0x2e>
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000430:	4798      	blx	r3
 8000432:	3601      	adds	r6, #1
 8000434:	e7ee      	b.n	8000414 <__libc_init_array+0xc>
 8000436:	f855 3b04 	ldr.w	r3, [r5], #4
 800043a:	4798      	blx	r3
 800043c:	3601      	adds	r6, #1
 800043e:	e7f2      	b.n	8000426 <__libc_init_array+0x1e>
 8000440:	08000468 	.word	0x08000468
 8000444:	08000468 	.word	0x08000468
 8000448:	08000468 	.word	0x08000468
 800044c:	0800046c 	.word	0x0800046c

08000450 <_init>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr

0800045c <_fini>:
 800045c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045e:	bf00      	nop
 8000460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000462:	bc08      	pop	{r3}
 8000464:	469e      	mov	lr, r3
 8000466:	4770      	bx	lr
