
NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a0  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  080032d0  080032d0  000132d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800355c  0800355c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800355c  0800355c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800355c  0800355c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003560  08003560  00013560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000068  080035cc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080035cc  00020400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006005  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fd0  00000000  00000000  00026096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00027068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000368  00000000  00000000  00027478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b96  00000000  00000000  000277e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bec  00000000  00000000  0002a376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bb1e  00000000  00000000  0002cf62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00038a80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001398  00000000  00000000  00038ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	080032b8 	.word	0x080032b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	080032b8 	.word	0x080032b8

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	; 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__aeabi_d2f>:
 800074c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000750:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000754:	bf24      	itt	cs
 8000756:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800075a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800075e:	d90d      	bls.n	800077c <__aeabi_d2f+0x30>
 8000760:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000764:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000768:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800076c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000770:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000774:	bf08      	it	eq
 8000776:	f020 0001 	biceq.w	r0, r0, #1
 800077a:	4770      	bx	lr
 800077c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000780:	d121      	bne.n	80007c6 <__aeabi_d2f+0x7a>
 8000782:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000786:	bfbc      	itt	lt
 8000788:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800078c:	4770      	bxlt	lr
 800078e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000792:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000796:	f1c2 0218 	rsb	r2, r2, #24
 800079a:	f1c2 0c20 	rsb	ip, r2, #32
 800079e:	fa10 f30c 	lsls.w	r3, r0, ip
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	bf18      	it	ne
 80007a8:	f040 0001 	orrne.w	r0, r0, #1
 80007ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007b8:	ea40 000c 	orr.w	r0, r0, ip
 80007bc:	fa23 f302 	lsr.w	r3, r3, r2
 80007c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007c4:	e7cc      	b.n	8000760 <__aeabi_d2f+0x14>
 80007c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007ca:	d107      	bne.n	80007dc <__aeabi_d2f+0x90>
 80007cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007d0:	bf1e      	ittt	ne
 80007d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007da:	4770      	bxne	lr
 80007dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_frsub>:
 80007ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007f0:	e002      	b.n	80007f8 <__addsf3>
 80007f2:	bf00      	nop

080007f4 <__aeabi_fsub>:
 80007f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007f8 <__addsf3>:
 80007f8:	0042      	lsls	r2, r0, #1
 80007fa:	bf1f      	itttt	ne
 80007fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000800:	ea92 0f03 	teqne	r2, r3
 8000804:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000808:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080c:	d06a      	beq.n	80008e4 <__addsf3+0xec>
 800080e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000812:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000816:	bfc1      	itttt	gt
 8000818:	18d2      	addgt	r2, r2, r3
 800081a:	4041      	eorgt	r1, r0
 800081c:	4048      	eorgt	r0, r1
 800081e:	4041      	eorgt	r1, r0
 8000820:	bfb8      	it	lt
 8000822:	425b      	neglt	r3, r3
 8000824:	2b19      	cmp	r3, #25
 8000826:	bf88      	it	hi
 8000828:	4770      	bxhi	lr
 800082a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800082e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000832:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000836:	bf18      	it	ne
 8000838:	4240      	negne	r0, r0
 800083a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800083e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000842:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000846:	bf18      	it	ne
 8000848:	4249      	negne	r1, r1
 800084a:	ea92 0f03 	teq	r2, r3
 800084e:	d03f      	beq.n	80008d0 <__addsf3+0xd8>
 8000850:	f1a2 0201 	sub.w	r2, r2, #1
 8000854:	fa41 fc03 	asr.w	ip, r1, r3
 8000858:	eb10 000c 	adds.w	r0, r0, ip
 800085c:	f1c3 0320 	rsb	r3, r3, #32
 8000860:	fa01 f103 	lsl.w	r1, r1, r3
 8000864:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000868:	d502      	bpl.n	8000870 <__addsf3+0x78>
 800086a:	4249      	negs	r1, r1
 800086c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000870:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000874:	d313      	bcc.n	800089e <__addsf3+0xa6>
 8000876:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800087a:	d306      	bcc.n	800088a <__addsf3+0x92>
 800087c:	0840      	lsrs	r0, r0, #1
 800087e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000882:	f102 0201 	add.w	r2, r2, #1
 8000886:	2afe      	cmp	r2, #254	; 0xfe
 8000888:	d251      	bcs.n	800092e <__addsf3+0x136>
 800088a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800088e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000892:	bf08      	it	eq
 8000894:	f020 0001 	biceq.w	r0, r0, #1
 8000898:	ea40 0003 	orr.w	r0, r0, r3
 800089c:	4770      	bx	lr
 800089e:	0049      	lsls	r1, r1, #1
 80008a0:	eb40 0000 	adc.w	r0, r0, r0
 80008a4:	3a01      	subs	r2, #1
 80008a6:	bf28      	it	cs
 80008a8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008ac:	d2ed      	bcs.n	800088a <__addsf3+0x92>
 80008ae:	fab0 fc80 	clz	ip, r0
 80008b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008b6:	ebb2 020c 	subs.w	r2, r2, ip
 80008ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80008be:	bfaa      	itet	ge
 80008c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008c4:	4252      	neglt	r2, r2
 80008c6:	4318      	orrge	r0, r3
 80008c8:	bfbc      	itt	lt
 80008ca:	40d0      	lsrlt	r0, r2
 80008cc:	4318      	orrlt	r0, r3
 80008ce:	4770      	bx	lr
 80008d0:	f092 0f00 	teq	r2, #0
 80008d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008d8:	bf06      	itte	eq
 80008da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008de:	3201      	addeq	r2, #1
 80008e0:	3b01      	subne	r3, #1
 80008e2:	e7b5      	b.n	8000850 <__addsf3+0x58>
 80008e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008ec:	bf18      	it	ne
 80008ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008f2:	d021      	beq.n	8000938 <__addsf3+0x140>
 80008f4:	ea92 0f03 	teq	r2, r3
 80008f8:	d004      	beq.n	8000904 <__addsf3+0x10c>
 80008fa:	f092 0f00 	teq	r2, #0
 80008fe:	bf08      	it	eq
 8000900:	4608      	moveq	r0, r1
 8000902:	4770      	bx	lr
 8000904:	ea90 0f01 	teq	r0, r1
 8000908:	bf1c      	itt	ne
 800090a:	2000      	movne	r0, #0
 800090c:	4770      	bxne	lr
 800090e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000912:	d104      	bne.n	800091e <__addsf3+0x126>
 8000914:	0040      	lsls	r0, r0, #1
 8000916:	bf28      	it	cs
 8000918:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800091c:	4770      	bx	lr
 800091e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000922:	bf3c      	itt	cc
 8000924:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000928:	4770      	bxcc	lr
 800092a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800092e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000932:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000936:	4770      	bx	lr
 8000938:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800093c:	bf16      	itet	ne
 800093e:	4608      	movne	r0, r1
 8000940:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000944:	4601      	movne	r1, r0
 8000946:	0242      	lsls	r2, r0, #9
 8000948:	bf06      	itte	eq
 800094a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800094e:	ea90 0f01 	teqeq	r0, r1
 8000952:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000956:	4770      	bx	lr

08000958 <__aeabi_ui2f>:
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	e004      	b.n	8000968 <__aeabi_i2f+0x8>
 800095e:	bf00      	nop

08000960 <__aeabi_i2f>:
 8000960:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000964:	bf48      	it	mi
 8000966:	4240      	negmi	r0, r0
 8000968:	ea5f 0c00 	movs.w	ip, r0
 800096c:	bf08      	it	eq
 800096e:	4770      	bxeq	lr
 8000970:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000974:	4601      	mov	r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	e01c      	b.n	80009b6 <__aeabi_l2f+0x2a>

0800097c <__aeabi_ul2f>:
 800097c:	ea50 0201 	orrs.w	r2, r0, r1
 8000980:	bf08      	it	eq
 8000982:	4770      	bxeq	lr
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	e00a      	b.n	80009a0 <__aeabi_l2f+0x14>
 800098a:	bf00      	nop

0800098c <__aeabi_l2f>:
 800098c:	ea50 0201 	orrs.w	r2, r0, r1
 8000990:	bf08      	it	eq
 8000992:	4770      	bxeq	lr
 8000994:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000998:	d502      	bpl.n	80009a0 <__aeabi_l2f+0x14>
 800099a:	4240      	negs	r0, r0
 800099c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009a0:	ea5f 0c01 	movs.w	ip, r1
 80009a4:	bf02      	ittt	eq
 80009a6:	4684      	moveq	ip, r0
 80009a8:	4601      	moveq	r1, r0
 80009aa:	2000      	moveq	r0, #0
 80009ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009b0:	bf08      	it	eq
 80009b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ba:	fabc f28c 	clz	r2, ip
 80009be:	3a08      	subs	r2, #8
 80009c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009c4:	db10      	blt.n	80009e8 <__aeabi_l2f+0x5c>
 80009c6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009ca:	4463      	add	r3, ip
 80009cc:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d0:	f1c2 0220 	rsb	r2, r2, #32
 80009d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009d8:	fa20 f202 	lsr.w	r2, r0, r2
 80009dc:	eb43 0002 	adc.w	r0, r3, r2
 80009e0:	bf08      	it	eq
 80009e2:	f020 0001 	biceq.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	f102 0220 	add.w	r2, r2, #32
 80009ec:	fa01 fc02 	lsl.w	ip, r1, r2
 80009f0:	f1c2 0220 	rsb	r2, r2, #32
 80009f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009f8:	fa21 f202 	lsr.w	r2, r1, r2
 80009fc:	eb43 0002 	adc.w	r0, r3, r2
 8000a00:	bf08      	it	eq
 8000a02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a06:	4770      	bx	lr

08000a08 <__aeabi_f2iz>:
 8000a08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000a10:	d30f      	bcc.n	8000a32 <__aeabi_f2iz+0x2a>
 8000a12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000a16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000a1a:	d90d      	bls.n	8000a38 <__aeabi_f2iz+0x30>
 8000a1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000a20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a28:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2c:	bf18      	it	ne
 8000a2e:	4240      	negne	r0, r0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0000 	mov.w	r0, #0
 8000a36:	4770      	bx	lr
 8000a38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000a3c:	d101      	bne.n	8000a42 <__aeabi_f2iz+0x3a>
 8000a3e:	0242      	lsls	r2, r0, #9
 8000a40:	d105      	bne.n	8000a4e <__aeabi_f2iz+0x46>
 8000a42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a4c:	4770      	bx	lr
 8000a4e:	f04f 0000 	mov.w	r0, #0
 8000a52:	4770      	bx	lr

08000a54 <NVIC_SetEnableInterrupt>:
 * @brief Enable interrupt for a given irq
 * 
 * @param copy_enumIRQ irq number for interrupt 
 */
void NVIC_SetEnableInterrupt(NVIC_IRQ copy_enumIRQ)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
    NVIC->ISER[(copy_enumIRQ >> 5)] |= (1 << (copy_enumIRQ & 0x1F));
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <NVIC_SetEnableInterrupt+0x40>)
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	115b      	asrs	r3, r3, #5
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	79fa      	ldrb	r2, [r7, #7]
 8000a6e:	f002 021f 	and.w	r2, r2, #31
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f202 	lsl.w	r2, r1, r2
 8000a78:	4610      	mov	r0, r2
 8000a7a:	4906      	ldr	r1, [pc, #24]	; (8000a94 <NVIC_SetEnableInterrupt+0x40>)
 8000a7c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000a80:	1152      	asrs	r2, r2, #5
 8000a82:	b252      	sxtb	r2, r2
 8000a84:	4303      	orrs	r3, r0
 8000a86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <SYSTICK_Init>:

#include "CortexM3/SYSTICK_M3.h"


void SYSTICK_Init()
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	/* Disable SYSTICK */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SYSTICK_Init+0x30>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <SYSTICK_Init+0x30>)
 8000aa2:	f023 0301 	bic.w	r3, r3, #1
 8000aa6:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt*/
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <SYSTICK_Init+0x30>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <SYSTICK_Init+0x30>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	6013      	str	r3, [r2, #0]
	/* Set Prescaler of the Systick*/
	if(SYSTICK_CLK_SRC_PRESCALER == SYSTICK_CLK_SRC_PRESCALER_1)
	{
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_CLKSOURCE_BIT_POS);
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SYSTICK_Init+0x30>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <SYSTICK_Init+0x30>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6013      	str	r3, [r2, #0]
	}	
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <SYSTICK_DelayMs>:

void SYSTICK_DelayMs(uint32_t copy_u32DelayMs)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	/* Disable Systick */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000ada:	f023 0301 	bic.w	r3, r3, #1
 8000ade:	6013      	str	r3, [r2, #0]
	/* Set number of overflows */
	uint32_t overFlowCounter = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
	uint32_t totalOverFlows = copy_u32DelayMs;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	60bb      	str	r3, [r7, #8]
	/* Set Preload register value */
	SYSTICK_SetNumOfTicks(SYSTICK_ONE_MILLISECOND_TICKS);
 8000ae8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000aec:	f000 f82a 	bl	8000b44 <SYSTICK_SetNumOfTicks>
	/* Disable Systick Interrupt */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000af6:	f023 0302 	bic.w	r3, r3, #2
 8000afa:	6013      	str	r3, [r2, #0]
	/* Enable SYSTICK */
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0f      	ldr	r2, [pc, #60]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]

	/* Loop over number of overflows */
	while(overFlowCounter < totalOverFlows)
 8000b08:	e010      	b.n	8000b2c <SYSTICK_DelayMs+0x60>
	{
		/* Wait till flag is raised */
		while(0 == GET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS));
 8000b0a:	bf00      	nop
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	0c1b      	lsrs	r3, r3, #16
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0f8      	beq.n	8000b0c <SYSTICK_DelayMs+0x40>
		/* Clear flag */
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS);
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <SYSTICK_DelayMs+0x74>)
 8000b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b24:	6013      	str	r3, [r2, #0]
		/* Increment overflow counter */
		overFlowCounter++;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
	while(overFlowCounter < totalOverFlows)
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d3ea      	bcc.n	8000b0a <SYSTICK_DelayMs+0x3e>
	}
	/* Wait till flag is raised */
}
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	e000e010 	.word	0xe000e010

08000b44 <SYSTICK_SetNumOfTicks>:

static void SYSTICK_SetNumOfTicks(uint32_t copy_u32SystickNumOfTicks)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	/* Set Number of ticks*/
	if(copy_u32SystickNumOfTicks > SYSTICK_MAX_PRE_COUNT)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b52:	d904      	bls.n	8000b5e <SYSTICK_SetNumOfTicks+0x1a>
	{
			SYSTICK->SYSRVR	= SYSTICK_MAX_PRE_COUNT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <SYSTICK_SetNumOfTicks+0x2c>)
 8000b56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b5a:	605a      	str	r2, [r3, #4]
	}
	else
	{
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
	}
}
 8000b5c:	e002      	b.n	8000b64 <SYSTICK_SetNumOfTicks+0x20>
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <SYSTICK_SetNumOfTicks+0x2c>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6053      	str	r3, [r2, #4]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <SysTick_Handler>:
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
}


void SysTick_Handler()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	if(SYSTICK_OverflowCounter < SYSTICK_NumOfOverflows)
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <SysTick_Handler+0x2c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <SysTick_Handler+0x30>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d205      	bcs.n	8000b90 <SysTick_Handler+0x1c>
	{
		SYSTICK_OverflowCounter++;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <SysTick_Handler+0x2c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <SysTick_Handler+0x2c>)
 8000b8c:	6013      	str	r3, [r2, #0]
	else
	{
		SYSTICK_OverflowCounter = 0;
		SYSTICK_CallBackFunction();
	}
 8000b8e:	e005      	b.n	8000b9c <SysTick_Handler+0x28>
		SYSTICK_OverflowCounter = 0;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <SysTick_Handler+0x2c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
		SYSTICK_CallBackFunction();
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Handler+0x34>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4798      	blx	r3
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200000a8 	.word	0x200000a8
 8000ba4:	200000b0 	.word	0x200000b0
 8000ba8:	200000ac 	.word	0x200000ac

08000bac <DMA_Init>:
 *   copy_dmaHandle: Pointer to the DMA handle structure containing the configuration.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if initialization is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Init(DMA_HandleTypeDef *copy_dmaHandle){
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

    HAL_Status hal_Status = HAL_OKAY;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_dmaHandle)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <DMA_Init+0x18>
    {
        hal_Status = HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e09d      	b.n	8000d00 <DMA_Init+0x154>
    }
    else
    {
    switch(copy_dmaHandle->dma_Direction)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7a5b      	ldrb	r3, [r3, #9]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <DMA_Init+0x26>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d009      	beq.n	8000be4 <DMA_Init+0x38>
 8000bd0:	e015      	b.n	8000bfe <DMA_Init+0x52>
    {
        case DMA_READ_FROM_PERIPHERAL:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0210 	bic.w	r2, r2, #16
 8000be0:	601a      	str	r2, [r3, #0]
            break;
 8000be2:	e00c      	b.n	8000bfe <DMA_Init+0x52>
        case DMA_READ_FROM_MEMORY:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f042 0210 	orr.w	r2, r2, #16
 8000bf2:	601a      	str	r2, [r3, #0]
            copy_dmaHandle->dma_TypeDef->CCR = 1<<4;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2210      	movs	r2, #16
 8000bfa:	601a      	str	r2, [r3, #0]
            break;
 8000bfc:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mem2Mem)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7b1b      	ldrb	r3, [r3, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <DMA_Init+0x60>
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d009      	beq.n	8000c1e <DMA_Init+0x72>
 8000c0a:	e011      	b.n	8000c30 <DMA_Init+0x84>
    {
        case DMA_MEM2MEM_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c1a:	601a      	str	r2, [r3, #0]
            break;
 8000c1c:	e008      	b.n	8000c30 <DMA_Init+0x84>
        case DMA_MEM2MEM_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000c2c:	601a      	str	r2, [r3, #0]
            break;
 8000c2e:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mode)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7a1b      	ldrb	r3, [r3, #8]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00e      	beq.n	8000c56 <DMA_Init+0xaa>
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d116      	bne.n	8000c6a <DMA_Init+0xbe>
    {
        case DMA_NON_CIRCULAR_MODE:
            if(copy_dmaHandle->dma_Mem2Mem != DMA_MEM2MEM_ENABLE )
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7b1b      	ldrb	r3, [r3, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d011      	beq.n	8000c68 <DMA_Init+0xbc>
            {
                CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f022 0220 	bic.w	r2, r2, #32
 8000c52:	601a      	str	r2, [r3, #0]

            }
            break;
 8000c54:	e008      	b.n	8000c68 <DMA_Init+0xbc>
        case DMA_CIRCULAR_MODE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f042 0220 	orr.w	r2, r2, #32
 8000c64:	601a      	str	r2, [r3, #0]
            break;
 8000c66:	e000      	b.n	8000c6a <DMA_Init+0xbe>
            break;
 8000c68:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_MemIncMode)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7b5b      	ldrb	r3, [r3, #13]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <DMA_Init+0xcc>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d009      	beq.n	8000c8a <DMA_Init+0xde>
 8000c76:	e011      	b.n	8000c9c <DMA_Init+0xf0>
    {
        case DMA_MEM_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c86:	601a      	str	r2, [r3, #0]
            break;
 8000c88:	e008      	b.n	8000c9c <DMA_Init+0xf0>
        case DMA_MEM_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c98:	601a      	str	r2, [r3, #0]
            break;
 8000c9a:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_PeriphIncMode)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7b9b      	ldrb	r3, [r3, #14]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <DMA_Init+0xfe>
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d009      	beq.n	8000cbc <DMA_Init+0x110>
 8000ca8:	e011      	b.n	8000cce <DMA_Init+0x122>
    {
        case DMA_PERIPH_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cb8:	601a      	str	r2, [r3, #0]
            break;
 8000cba:	e008      	b.n	8000cce <DMA_Init+0x122>
        case DMA_PERIPH_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cca:	601a      	str	r2, [r3, #0]
            break;
 8000ccc:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Interrupt)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	7bdb      	ldrb	r3, [r3, #15]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d002      	beq.n	8000cdc <DMA_Init+0x130>
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d009      	beq.n	8000cee <DMA_Init+0x142>
 8000cda:	e011      	b.n	8000d00 <DMA_Init+0x154>
    {
        case DMA_INTERRUPT_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0202 	orr.w	r2, r2, #2
 8000cea:	601a      	str	r2, [r3, #0]
            break;
 8000cec:	e008      	b.n	8000d00 <DMA_Init+0x154>
        case DMA_INTERRUPT_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 0202 	bic.w	r2, r2, #2
 8000cfc:	601a      	str	r2, [r3, #0]
            break;
 8000cfe:	bf00      	nop
    }
    }
    return hal_Status;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <DMA_SetPeriphAddress>:
 *   copy_u32PeriphAddress: Pointer to the peripheral address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetPeriphAddress(DMA_HandleTypeDef *copy_dmaHandle,uint8_t *copy_u32PeriphAddress){
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000d16:	2300      	movs	r3, #0
 8000d18:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32PeriphAddress || NULL == copy_dmaHandle )
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <DMA_SetPeriphAddress+0x1a>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <DMA_SetPeriphAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e003      	b.n	8000d34 <DMA_SetPeriphAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CPAR = copy_u32PeriphAddress;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	609a      	str	r2, [r3, #8]
    }
    return hal_Status;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <DMA_SetMemoryAddress>:
 *   copy_u32MemAddress: Pointer to the memory address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetMemoryAddress(DMA_HandleTypeDef *copy_dmaHandle ,uint8_t *copy_u32MemAddress){
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32MemAddress || NULL == copy_dmaHandle )
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d002      	beq.n	8000d5a <DMA_SetMemoryAddress+0x1a>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d102      	bne.n	8000d60 <DMA_SetMemoryAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e003      	b.n	8000d68 <DMA_SetMemoryAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CMAR = copy_u32MemAddress;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	60da      	str	r2, [r3, #12]
    }
    return hal_Status;
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <DMA_Start>:
 *   hdma: Pointer to the DMA handle structure.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if starting the transfer is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Start(DMA_HandleTypeDef *hdma){
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <DMA_Start+0x18>
    {
        hal_Status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	73fb      	strb	r3, [r7, #15]
 8000d8a:	e007      	b.n	8000d9c <DMA_Start+0x28>
    }
    else
    {
        SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f042 0201 	orr.w	r2, r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
    }
    return hal_Status;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <DMA_Stop>:
 *
 * @param hdma: Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the specified DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_Stop(DMA_HandleTypeDef *hdma){
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <DMA_Stop+0x18>
    {
        hal_Status = HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	73fb      	strb	r3, [r7, #15]
 8000dbe:	e007      	b.n	8000dd0 <DMA_Stop+0x28>
    }
    else
    {
        CLR_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f022 0201 	bic.w	r2, r2, #1
 8000dce:	601a      	str	r2, [r3, #0]
    }
    return hal_Status;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <DMA_SetDataCounter>:
 * @param copy_u32DataLength: The number of data items to be transferred by the DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_SetDataCounter(DMA_HandleTypeDef *hdma, uint32_t copy_u32DataLength)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <DMA_SetDataCounter+0x1a>
    {
        hal_Status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e003      	b.n	8000dfe <DMA_SetDataCounter+0x22>
    }
    else
    {
        hdma->dma_TypeDef->CNTDR = copy_u32DataLength;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	683a      	ldr	r2, [r7, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
        // SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
    }
    return hal_Status;
 8000dfe:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
	...

08000e0c <DMA_SetCallBackFn>:
    return hal_Status;

}

HAL_Status DMA_SetCallBackFn(DMA_HandleTypeDef *hdma, DMA_CallbackFn callbackFn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d102      	bne.n	8000e26 <DMA_SetCallBackFn+0x1a>
    {
        hal_Status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e01b      	b.n	8000e5e <DMA_SetCallBackFn+0x52>
    }
    else
    {
    switch ((uint32_t)hdma->dma_TypeDef)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <DMA_SetCallBackFn+0x60>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d011      	beq.n	8000e54 <DMA_SetCallBackFn+0x48>
 8000e30:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <DMA_SetCallBackFn+0x60>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d812      	bhi.n	8000e5c <DMA_SetCallBackFn+0x50>
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <DMA_SetCallBackFn+0x64>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d003      	beq.n	8000e44 <DMA_SetCallBackFn+0x38>
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <DMA_SetCallBackFn+0x68>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d004      	beq.n	8000e4c <DMA_SetCallBackFn+0x40>
            // Code for DMA1_3
            DMA1_3_CallbackFnPtr = callbackFn;
            break;
        default:
            // Default case
            break;
 8000e42:	e00b      	b.n	8000e5c <DMA_SetCallBackFn+0x50>
            DMA1_1_CallbackFnPtr = callbackFn;
 8000e44:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <DMA_SetCallBackFn+0x6c>)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	6013      	str	r3, [r2, #0]
            break;
 8000e4a:	e008      	b.n	8000e5e <DMA_SetCallBackFn+0x52>
            DMA1_2_CallbackFnPtr = callbackFn;
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <DMA_SetCallBackFn+0x70>)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	6013      	str	r3, [r2, #0]
            break;
 8000e52:	e004      	b.n	8000e5e <DMA_SetCallBackFn+0x52>
            DMA1_3_CallbackFnPtr = callbackFn;
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <DMA_SetCallBackFn+0x74>)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	6013      	str	r3, [r2, #0]
            break;
 8000e5a:	e000      	b.n	8000e5e <DMA_SetCallBackFn+0x52>
            break;
 8000e5c:	bf00      	nop
    }
    }
    return hal_Status;
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40020030 	.word	0x40020030
 8000e70:	40020008 	.word	0x40020008
 8000e74:	4002001c 	.word	0x4002001c
 8000e78:	200000b4 	.word	0x200000b4
 8000e7c:	200000c0 	.word	0x200000c0
 8000e80:	200000b8 	.word	0x200000b8

08000e84 <DMA_ClearInterruptFlag>:
        CLR_BIT(hdma->dma_TypeDef->CCR,DMA_CCR_TCIE_Pos);
    }
}

HAL_Status DMA_ClearInterruptFlag(DMA_HandleTypeDef *hdma)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <DMA_ClearInterruptFlag+0x18>
    {
        hal_Status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e02a      	b.n	8000ef2 <DMA_ClearInterruptFlag+0x6e>
    }
    else
    {
    switch ((uint32_t)hdma->dma_TypeDef)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <DMA_ClearInterruptFlag+0x7c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01b      	beq.n	8000ede <DMA_ClearInterruptFlag+0x5a>
 8000ea6:	4a16      	ldr	r2, [pc, #88]	; (8000f00 <DMA_ClearInterruptFlag+0x7c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d821      	bhi.n	8000ef0 <DMA_ClearInterruptFlag+0x6c>
 8000eac:	4a15      	ldr	r2, [pc, #84]	; (8000f04 <DMA_ClearInterruptFlag+0x80>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d003      	beq.n	8000eba <DMA_ClearInterruptFlag+0x36>
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <DMA_ClearInterruptFlag+0x84>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d009      	beq.n	8000ecc <DMA_ClearInterruptFlag+0x48>
            // Code for DMA1_3
            SET_BIT(hdma->dma_StatusTypedef->IFCR,9);
            break;
        default:
            // Default case
            break;
 8000eb8:	e01a      	b.n	8000ef0 <DMA_ClearInterruptFlag+0x6c>
            SET_BIT(hdma->dma_StatusTypedef->IFCR,1);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f042 0202 	orr.w	r2, r2, #2
 8000ec8:	605a      	str	r2, [r3, #4]
            break;
 8000eca:	e012      	b.n	8000ef2 <DMA_ClearInterruptFlag+0x6e>
            SET_BIT(hdma->dma_StatusTypedef->IFCR,5);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f042 0220 	orr.w	r2, r2, #32
 8000eda:	605a      	str	r2, [r3, #4]
            break;
 8000edc:	e009      	b.n	8000ef2 <DMA_ClearInterruptFlag+0x6e>
            SET_BIT(hdma->dma_StatusTypedef->IFCR,9);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000eec:	605a      	str	r2, [r3, #4]
            break;
 8000eee:	e000      	b.n	8000ef2 <DMA_ClearInterruptFlag+0x6e>
            break;
 8000ef0:	bf00      	nop
    }        
    }
}
 8000ef2:	bf00      	nop
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40020030 	.word	0x40020030
 8000f04:	40020008 	.word	0x40020008
 8000f08:	4002001c 	.word	0x4002001c

08000f0c <DMA1_Channel1_IRQHandler>:



void DMA1_Channel1_IRQHandler()
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    DMA1_1_CallbackFnPtr();
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <DMA1_Channel1_IRQHandler+0x10>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4798      	blx	r3
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000b4 	.word	0x200000b4

08000f20 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
    DMA1_2_CallbackFnPtr();
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <DMA1_Channel2_IRQHandler+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4798      	blx	r3
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000c0 	.word	0x200000c0

08000f34 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

    DMA1_3_CallbackFnPtr();
 8000f38:	4b02      	ldr	r3, [pc, #8]	; (8000f44 <DMA1_Channel3_IRQHandler+0x10>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4798      	blx	r3
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000b8 	.word	0x200000b8

08000f48 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 8000f4c:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <DMA1_Channel4_IRQHandler+0x10>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4798      	blx	r3
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000b8 	.word	0x200000b8

08000f5c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler()
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler()
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler()
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler()
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr

08000fa4 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	4611      	mov	r1, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4623      	mov	r3, r4
 8000fb4:	71fb      	strb	r3, [r7, #7]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	717b      	strb	r3, [r7, #5]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	807b      	strh	r3, [r7, #2]
	uint8_t 	function_char;
    uint8_t 	i,j;
		
	function_char = Character;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	2b1f      	cmp	r3, #31
 8000fca:	d802      	bhi.n	8000fd2 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	e002      	b.n	8000fd8 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	3b20      	subs	r3, #32
 8000fd6:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	753b      	strb	r3, [r7, #20]
 8000fdc:	e014      	b.n	8001008 <ILI9341_Draw_Char+0x64>
		{
		temp[k] = font[function_char][CHAR_WIDTH-k-1];
 8000fde:	7dfa      	ldrb	r2, [r7, #23]
 8000fe0:	7d3b      	ldrb	r3, [r7, #20]
 8000fe2:	f1c3 0005 	rsb	r0, r3, #5
 8000fe6:	7d39      	ldrb	r1, [r7, #20]
 8000fe8:	4c3c      	ldr	r4, [pc, #240]	; (80010dc <ILI9341_Draw_Char+0x138>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4423      	add	r3, r4
 8000ff4:	4403      	add	r3, r0
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	f107 0318 	add.w	r3, r7, #24
 8000ffc:	440b      	add	r3, r1
 8000ffe:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001002:	7d3b      	ldrb	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	753b      	strb	r3, [r7, #20]
 8001008:	7d3b      	ldrb	r3, [r7, #20]
 800100a:	2b05      	cmp	r3, #5
 800100c:	d9e7      	bls.n	8000fde <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	b298      	uxth	r0, r3
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	b299      	uxth	r1, r3
 8001016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001018:	461a      	mov	r2, r3
 800101a:	0052      	lsls	r2, r2, #1
 800101c:	4413      	add	r3, r2
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b29a      	uxth	r2, r3
 8001022:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	b29c      	uxth	r4, r3
 8001028:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	4623      	mov	r3, r4
 800102e:	f000 fd75 	bl	8001b1c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001032:	2300      	movs	r3, #0
 8001034:	757b      	strb	r3, [r7, #21]
 8001036:	e048      	b.n	80010ca <ILI9341_Draw_Char+0x126>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	75bb      	strb	r3, [r7, #22]
 800103c:	e03f      	b.n	80010be <ILI9341_Draw_Char+0x11a>
            if (temp[j] & (1<<i)) {			
 800103e:	7d7b      	ldrb	r3, [r7, #21]
 8001040:	f107 0218 	add.w	r2, r7, #24
 8001044:	4413      	add	r3, r2
 8001046:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800104a:	461a      	mov	r2, r3
 800104c:	7dbb      	ldrb	r3, [r7, #22]
 800104e:	fa42 f303 	asr.w	r3, r2, r3
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d02e      	beq.n	80010b8 <ILI9341_Draw_Char+0x114>
							if(Size == 1)
 800105a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800105c:	2b01      	cmp	r3, #1
 800105e:	d110      	bne.n	8001082 <ILI9341_Draw_Char+0xde>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	b29a      	uxth	r2, r3
 8001064:	7d7b      	ldrb	r3, [r7, #21]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4413      	add	r3, r2
 800106a:	b298      	uxth	r0, r3
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	b29a      	uxth	r2, r3
 8001070:	7dbb      	ldrb	r3, [r7, #22]
 8001072:	b29b      	uxth	r3, r3
 8001074:	4413      	add	r3, r2
 8001076:	b29b      	uxth	r3, r3
 8001078:	887a      	ldrh	r2, [r7, #2]
 800107a:	4619      	mov	r1, r3
 800107c:	f000 fc96 	bl	80019ac <ILI9341_Draw_Pixel>
 8001080:	e01a      	b.n	80010b8 <ILI9341_Draw_Char+0x114>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001082:	79bb      	ldrb	r3, [r7, #6]
 8001084:	b29a      	uxth	r2, r3
 8001086:	7d7b      	ldrb	r3, [r7, #21]
 8001088:	b29b      	uxth	r3, r3
 800108a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800108c:	fb01 f303 	mul.w	r3, r1, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	4413      	add	r3, r2
 8001094:	b298      	uxth	r0, r3
 8001096:	797b      	ldrb	r3, [r7, #5]
 8001098:	b29a      	uxth	r2, r3
 800109a:	7dbb      	ldrb	r3, [r7, #22]
 800109c:	b29b      	uxth	r3, r3
 800109e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80010a0:	fb01 f303 	mul.w	r3, r1, r3
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	4413      	add	r3, r2
 80010a8:	b299      	uxth	r1, r3
 80010aa:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80010ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	4623      	mov	r3, r4
 80010b4:	f000 fd32 	bl	8001b1c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80010b8:	7dbb      	ldrb	r3, [r7, #22]
 80010ba:	3301      	adds	r3, #1
 80010bc:	75bb      	strb	r3, [r7, #22]
 80010be:	7dbb      	ldrb	r3, [r7, #22]
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d9bc      	bls.n	800103e <ILI9341_Draw_Char+0x9a>
    for (j=0; j<CHAR_WIDTH; j++) {
 80010c4:	7d7b      	ldrb	r3, [r7, #21]
 80010c6:	3301      	adds	r3, #1
 80010c8:	757b      	strb	r3, [r7, #21]
 80010ca:	7d7b      	ldrb	r3, [r7, #21]
 80010cc:	2b05      	cmp	r3, #5
 80010ce:	d9b3      	bls.n	8001038 <ILI9341_Draw_Char+0x94>
							}
            }						
        }
    }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}
 80010da:	bf00      	nop
 80010dc:	080032e8 	.word	0x080032e8

080010e0 <ILI9341_Text_Format>:

void ILI9341_Text_Format(char* dest_str, uint8_t *msg, ...)
{
 80010e0:	b40e      	push	{r1, r2, r3}
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b085      	sub	sp, #20
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
    va_list arg_list;
    va_start(arg_list,msg);
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	60fb      	str	r3, [r7, #12]
    vsprintf(dest_str,msg,arg_list);
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	69f9      	ldr	r1, [r7, #28]
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f001 fcbb 	bl	8002a70 <vsiprintf>
	va_end (arg_list);
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001104:	b003      	add	sp, #12
 8001106:	4770      	bx	lr

08001108 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b087      	sub	sp, #28
 800110c:	af02      	add	r7, sp, #8
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	4608      	mov	r0, r1
 8001112:	4611      	mov	r1, r2
 8001114:	461a      	mov	r2, r3
 8001116:	4603      	mov	r3, r0
 8001118:	70fb      	strb	r3, [r7, #3]
 800111a:	460b      	mov	r3, r1
 800111c:	70bb      	strb	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	803b      	strh	r3, [r7, #0]
	
	for(int i=strlen(Text)-1;i>=0;i--)
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff f824 	bl	8000170 <strlen>
 8001128:	4603      	mov	r3, r0
 800112a:	3b01      	subs	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	e01a      	b.n	8001166 <ILI9341_Draw_Text+0x5e>
	{
			ILI9341_Draw_Char(Text[i], X, Y, Colour, Size, Background_Colour);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	7818      	ldrb	r0, [r3, #0]
 8001138:	883c      	ldrh	r4, [r7, #0]
 800113a:	78ba      	ldrb	r2, [r7, #2]
 800113c:	78f9      	ldrb	r1, [r7, #3]
 800113e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	8c3b      	ldrh	r3, [r7, #32]
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	4623      	mov	r3, r4
 8001148:	f7ff ff2c 	bl	8000fa4 <ILI9341_Draw_Char>
			X += CHAR_WIDTH*Size;
 800114c:	8c3b      	ldrh	r3, [r7, #32]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	0052      	lsls	r2, r2, #1
 8001154:	4413      	add	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	b2da      	uxtb	r2, r3
 800115a:	78fb      	ldrb	r3, [r7, #3]
 800115c:	4413      	add	r3, r2
 800115e:	70fb      	strb	r3, [r7, #3]
	for(int i=strlen(Text)-1;i>=0;i--)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3b01      	subs	r3, #1
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2b00      	cmp	r3, #0
 800116a:	dae1      	bge.n	8001130 <ILI9341_Draw_Text+0x28>
	}
    // while (*Text) {
    // }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bd90      	pop	{r4, r7, pc}
	...

08001178 <ILI9341_SPI_Init>:
float ILI9341_OverallTimeElapsedMs = 0;
TIM_HandleTypeDef TIM2;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	/* Init SPI */
	hspi1.Instance = SPI1;
 800117c:	4b5e      	ldr	r3, [pc, #376]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 800117e:	4a5f      	ldr	r2, [pc, #380]	; (80012fc <ILI9341_SPI_Init+0x184>)
 8001180:	601a      	str	r2, [r3, #0]
	hspi1.Mode = SPI_MODE_MASTER;
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 8001184:	2200      	movs	r2, #0
 8001186:	711a      	strb	r2, [r3, #4]
	hspi1.DataSize = SPI_DATASIZE_8BIT;
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 800118a:	2200      	movs	r2, #0
 800118c:	745a      	strb	r2, [r3, #17]
	hspi1.CPOL = SPI_CPOL_LOW;
 800118e:	4b5a      	ldr	r3, [pc, #360]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 8001190:	2200      	movs	r2, #0
 8001192:	719a      	strb	r2, [r3, #6]
	hspi1.CPHA = SPI_CPHA_1EDGE;
 8001194:	4b58      	ldr	r3, [pc, #352]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 8001196:	2200      	movs	r2, #0
 8001198:	71da      	strb	r2, [r3, #7]
	hspi1.BaudRate = SPI_BAUDRATE_DIV2;
 800119a:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 800119c:	2200      	movs	r2, #0
 800119e:	715a      	strb	r2, [r3, #5]
	hspi1.NSS = SPI_NSS_DISABLE;
 80011a0:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	751a      	strb	r2, [r3, #20]
	hspi1.BiDir = SPI_BIDIR_DISABLE;
 80011a6:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	755a      	strb	r2, [r3, #21]
	hspi1.CRC = SPI_CRC_DISABLE;
 80011ac:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	759a      	strb	r2, [r3, #22]
	hspi1.FirstBit = SPI_LSB_FIRST;
 80011b2:	4b51      	ldr	r3, [pc, #324]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	741a      	strb	r2, [r3, #16]
	hspi1.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 80011b8:	4b4f      	ldr	r3, [pc, #316]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	75da      	strb	r2, [r3, #23]
	hspi1.CRCDir = SPI_CRC_TX;
 80011be:	4b4e      	ldr	r3, [pc, #312]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	761a      	strb	r2, [r3, #24]
	hspi1.SpiTxDma = SPI_TX_DMA_ENABLE;
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	749a      	strb	r2, [r3, #18]
	hspi1.SpiRxDma = SPI_RX_DMA_DISABLE;
 80011ca:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	74da      	strb	r2, [r3, #19]

	/* Init GPIOs*/
	/* Init MOSI */
	SDA.GPIO_TypeDef = PORT_SPI1;
 80011d0:	4b4b      	ldr	r3, [pc, #300]	; (8001300 <ILI9341_SPI_Init+0x188>)
 80011d2:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <ILI9341_SPI_Init+0x18c>)
 80011d4:	601a      	str	r2, [r3, #0]
	SDA.GPIO_Pin = MOSI_SPI1;
 80011d6:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <ILI9341_SPI_Init+0x188>)
 80011d8:	2207      	movs	r2, #7
 80011da:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80011dc:	4b48      	ldr	r3, [pc, #288]	; (8001300 <ILI9341_SPI_Init+0x188>)
 80011de:	2202      	movs	r2, #2
 80011e0:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 80011e2:	4b47      	ldr	r3, [pc, #284]	; (8001300 <ILI9341_SPI_Init+0x188>)
 80011e4:	2205      	movs	r2, #5
 80011e6:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&SDA);
 80011e8:	4845      	ldr	r0, [pc, #276]	; (8001300 <ILI9341_SPI_Init+0x188>)
 80011ea:	f000 fcf3 	bl	8001bd4 <GPIO_Init>

	/* Init SCK */
	SCK.GPIO_TypeDef = PORT_SPI1;
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <ILI9341_SPI_Init+0x190>)
 80011f0:	4a44      	ldr	r2, [pc, #272]	; (8001304 <ILI9341_SPI_Init+0x18c>)
 80011f2:	601a      	str	r2, [r3, #0]
	SCK.GPIO_Pin = SCK_SPI1;
 80011f4:	4b44      	ldr	r3, [pc, #272]	; (8001308 <ILI9341_SPI_Init+0x190>)
 80011f6:	2205      	movs	r2, #5
 80011f8:	711a      	strb	r2, [r3, #4]
	SCK.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <ILI9341_SPI_Init+0x190>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	715a      	strb	r2, [r3, #5]
	SCK.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 8001200:	4b41      	ldr	r3, [pc, #260]	; (8001308 <ILI9341_SPI_Init+0x190>)
 8001202:	2205      	movs	r2, #5
 8001204:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&SCK);
 8001206:	4840      	ldr	r0, [pc, #256]	; (8001308 <ILI9341_SPI_Init+0x190>)
 8001208:	f000 fce4 	bl	8001bd4 <GPIO_Init>

	/* Init CS */
	CS.GPIO_TypeDef = PORT_SPI1;
 800120c:	4b3f      	ldr	r3, [pc, #252]	; (800130c <ILI9341_SPI_Init+0x194>)
 800120e:	4a3d      	ldr	r2, [pc, #244]	; (8001304 <ILI9341_SPI_Init+0x18c>)
 8001210:	601a      	str	r2, [r3, #0]
	CS.GPIO_Pin = GPIO_PIN_3;
 8001212:	4b3e      	ldr	r3, [pc, #248]	; (800130c <ILI9341_SPI_Init+0x194>)
 8001214:	2203      	movs	r2, #3
 8001216:	711a      	strb	r2, [r3, #4]
	CS.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8001218:	4b3c      	ldr	r3, [pc, #240]	; (800130c <ILI9341_SPI_Init+0x194>)
 800121a:	2202      	movs	r2, #2
 800121c:	715a      	strb	r2, [r3, #5]
	CS.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <ILI9341_SPI_Init+0x194>)
 8001220:	2203      	movs	r2, #3
 8001222:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&CS);
 8001224:	4839      	ldr	r0, [pc, #228]	; (800130c <ILI9341_SPI_Init+0x194>)
 8001226:	f000 fcd5 	bl	8001bd4 <GPIO_Init>

	/* Init DC */
	DC.GPIO_TypeDef = PORT_SPI1;
 800122a:	4b39      	ldr	r3, [pc, #228]	; (8001310 <ILI9341_SPI_Init+0x198>)
 800122c:	4a35      	ldr	r2, [pc, #212]	; (8001304 <ILI9341_SPI_Init+0x18c>)
 800122e:	601a      	str	r2, [r3, #0]
	DC.GPIO_Pin = GPIO_PIN_2;
 8001230:	4b37      	ldr	r3, [pc, #220]	; (8001310 <ILI9341_SPI_Init+0x198>)
 8001232:	2202      	movs	r2, #2
 8001234:	711a      	strb	r2, [r3, #4]
	DC.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <ILI9341_SPI_Init+0x198>)
 8001238:	2202      	movs	r2, #2
 800123a:	715a      	strb	r2, [r3, #5]
	DC.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <ILI9341_SPI_Init+0x198>)
 800123e:	2203      	movs	r2, #3
 8001240:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&DC);
 8001242:	4833      	ldr	r0, [pc, #204]	; (8001310 <ILI9341_SPI_Init+0x198>)
 8001244:	f000 fcc6 	bl	8001bd4 <GPIO_Init>


	RST.GPIO_TypeDef = PORT_SPI1;
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <ILI9341_SPI_Init+0x19c>)
 800124a:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <ILI9341_SPI_Init+0x18c>)
 800124c:	601a      	str	r2, [r3, #0]
	RST.GPIO_Pin = GPIO_PIN_8;
 800124e:	4b31      	ldr	r3, [pc, #196]	; (8001314 <ILI9341_SPI_Init+0x19c>)
 8001250:	2208      	movs	r2, #8
 8001252:	711a      	strb	r2, [r3, #4]
	RST.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <ILI9341_SPI_Init+0x19c>)
 8001256:	2202      	movs	r2, #2
 8001258:	715a      	strb	r2, [r3, #5]
	RST.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <ILI9341_SPI_Init+0x19c>)
 800125c:	2203      	movs	r2, #3
 800125e:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&RST);
 8001260:	482c      	ldr	r0, [pc, #176]	; (8001314 <ILI9341_SPI_Init+0x19c>)
 8001262:	f000 fcb7 	bl	8001bd4 <GPIO_Init>

	/*Init DMA channels */
	spiTxdma.dma_TypeDef = DMA1_3;
 8001266:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 8001268:	4a2c      	ldr	r2, [pc, #176]	; (800131c <ILI9341_SPI_Init+0x1a4>)
 800126a:	601a      	str	r2, [r3, #0]
	spiTxdma.dma_StatusTypedef = DMA1;
 800126c:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 800126e:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <ILI9341_SPI_Init+0x1a8>)
 8001270:	605a      	str	r2, [r3, #4]
	spiTxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 8001272:	4b29      	ldr	r3, [pc, #164]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 8001274:	2201      	movs	r2, #1
 8001276:	731a      	strb	r2, [r3, #12]
	spiTxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8001278:	4b27      	ldr	r3, [pc, #156]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 800127a:	2201      	movs	r2, #1
 800127c:	721a      	strb	r2, [r3, #8]
	spiTxdma.dma_Direction = DMA_READ_FROM_MEMORY;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 8001280:	2201      	movs	r2, #1
 8001282:	725a      	strb	r2, [r3, #9]
	spiTxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 8001286:	2200      	movs	r2, #0
 8001288:	729a      	strb	r2, [r3, #10]
	spiTxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 800128a:	4b23      	ldr	r3, [pc, #140]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 800128c:	2200      	movs	r2, #0
 800128e:	72da      	strb	r2, [r3, #11]
	spiTxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 8001292:	2200      	movs	r2, #0
 8001294:	735a      	strb	r2, [r3, #13]
	spiTxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 8001298:	2201      	movs	r2, #1
 800129a:	739a      	strb	r2, [r3, #14]
	spiTxdma.dma_Interrupt = DMA_INTERRUPT_ENABLE;
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 800129e:	2200      	movs	r2, #0
 80012a0:	73da      	strb	r2, [r3, #15]

	hspi1.txdma = &spiTxdma;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80012a4:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <ILI9341_SPI_Init+0x1a0>)
 80012a6:	609a      	str	r2, [r3, #8]

	DMA_Init(hspi1.txdma);
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fc7d 	bl	8000bac <DMA_Init>
	DMA_SetCallBackFn(hspi1.txdma,ILI9341_SPI_DMACallbackFn);
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	491b      	ldr	r1, [pc, #108]	; (8001324 <ILI9341_SPI_Init+0x1ac>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fda7 	bl	8000e0c <DMA_SetCallBackFn>

	/* Init SPI */
	SPI_Init(&hspi1);
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <ILI9341_SPI_Init+0x180>)
 80012c0:	f000 fee2 	bl	8002088 <SPI_Init>


	/* Init Timer for benchmarking */
	TIM2.Instance = TIM_2_BASE;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <ILI9341_SPI_Init+0x1b0>)
 80012c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ca:	601a      	str	r2, [r3, #0]
	TIM2.Interrupt = TIM_INTERRUPT_ENABLE;
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <ILI9341_SPI_Init+0x1b0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	731a      	strb	r2, [r3, #12]
	TIM2.NumberOfMilliseconds = 1;
 80012d2:	4b15      	ldr	r3, [pc, #84]	; (8001328 <ILI9341_SPI_Init+0x1b0>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	605a      	str	r2, [r3, #4]
	TIM2.Prescaler = TIM_PRESCALAR_VALUE_DIV_8;
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <ILI9341_SPI_Init+0x1b0>)
 80012da:	2208      	movs	r2, #8
 80012dc:	609a      	str	r2, [r3, #8]

	/* Set Callback function for timer */
	TIM_SetCallBackFn(&TIM2,ILI9341_TimerCallbackFn);
 80012de:	4913      	ldr	r1, [pc, #76]	; (800132c <ILI9341_SPI_Init+0x1b4>)
 80012e0:	4811      	ldr	r0, [pc, #68]	; (8001328 <ILI9341_SPI_Init+0x1b0>)
 80012e2:	f001 f949 	bl	8002578 <TIM_SetCallBackFn>
	/* Init */
	TIM_Init(&TIM2);	
 80012e6:	4810      	ldr	r0, [pc, #64]	; (8001328 <ILI9341_SPI_Init+0x1b0>)
 80012e8:	f001 f8b8 	bl	800245c <TIM_Init>
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80012ec:	2100      	movs	r1, #0
 80012ee:	4807      	ldr	r0, [pc, #28]	; (800130c <ILI9341_SPI_Init+0x194>)
 80012f0:	f000 fe92 	bl	8002018 <GPIO_WritePin>

// MX_SPI5_Init();																							//SPI INIT
// MX_GPIO_Init();																							//GPIO INIT
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000100 	.word	0x20000100
 80012fc:	40013000 	.word	0x40013000
 8001300:	200000f0 	.word	0x200000f0
 8001304:	40010800 	.word	0x40010800
 8001308:	200000f8 	.word	0x200000f8
 800130c:	2000011c 	.word	0x2000011c
 8001310:	200000e8 	.word	0x200000e8
 8001314:	200000e0 	.word	0x200000e0
 8001318:	200000d0 	.word	0x200000d0
 800131c:	40020030 	.word	0x40020030
 8001320:	40020000 	.word	0x40020000
 8001324:	080013e9 	.word	0x080013e9
 8001328:	2000031c 	.word	0x2000031c
 800132c:	080013cd 	.word	0x080013cd

08001330 <ILI9341_StartBenchmark>:


void ILI9341_StartBenchmark()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
	/* Reset Timer Elapsed counter */
	ILI9341_CurrentTimeElapsedMs = 0;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <ILI9341_StartBenchmark+0x1c>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
	/* Reset Timer Counter */
	TIM2.Instance->CNT = 0;
 800133a:	4b05      	ldr	r3, [pc, #20]	; (8001350 <ILI9341_StartBenchmark+0x20>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
	/* Start Timer */
	TIM_Start(&TIM2);
 8001342:	4803      	ldr	r0, [pc, #12]	; (8001350 <ILI9341_StartBenchmark+0x20>)
 8001344:	f001 f8e4 	bl	8002510 <TIM_Start>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000090 	.word	0x20000090
 8001350:	2000031c 	.word	0x2000031c
 8001354:	00000000 	.word	0x00000000

08001358 <ILI9341_StopBenchmark>:

void ILI9341_StopBenchmark()
{
 8001358:	b598      	push	{r3, r4, r7, lr}
 800135a:	af00      	add	r7, sp, #0
	/* Stop Timer */
	TIM_Stop(&TIM2);
 800135c:	4818      	ldr	r0, [pc, #96]	; (80013c0 <ILI9341_StopBenchmark+0x68>)
 800135e:	f001 f8f1 	bl	8002544 <TIM_Stop>
	/* Calculate TimeElapsed and add it to overallTimeElapsed */
	ILI9341_OverallTimeElapsedMs += ILI9341_CurrentTimeElapsedMs + (float)((TIM2.Instance->CNT) * 0.001);
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <ILI9341_StopBenchmark+0x6c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff faf6 	bl	8000958 <__aeabi_ui2f>
 800136c:	4604      	mov	r4, r0
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <ILI9341_StopBenchmark+0x68>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f96f 	bl	8000658 <__aeabi_ui2d>
 800137a:	a30f      	add	r3, pc, #60	; (adr r3, 80013b8 <ILI9341_StopBenchmark+0x60>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7fe fefe 	bl	8000180 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff f9de 	bl	800074c <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4619      	mov	r1, r3
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff fa2f 	bl	80007f8 <__addsf3>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <ILI9341_StopBenchmark+0x70>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4610      	mov	r0, r2
 80013a6:	f7ff fa27 	bl	80007f8 <__addsf3>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <ILI9341_StopBenchmark+0x70>)
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	bd98      	pop	{r3, r4, r7, pc}
 80013b6:	bf00      	nop
 80013b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013bc:	3f50624d 	.word	0x3f50624d
 80013c0:	2000031c 	.word	0x2000031c
 80013c4:	20000090 	.word	0x20000090
 80013c8:	20000094 	.word	0x20000094

080013cc <ILI9341_TimerCallbackFn>:

void ILI9341_TimerCallbackFn()
{	
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	ILI9341_CurrentTimeElapsedMs++;
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <ILI9341_TimerCallbackFn+0x18>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <ILI9341_TimerCallbackFn+0x18>)
 80013d8:	6013      	str	r3, [r2, #0]
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000090 	.word	0x20000090

080013e8 <ILI9341_SPI_DMACallbackFn>:


void ILI9341_SPI_DMACallbackFn()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

	DMA_Stop(hspi1.txdma);
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <ILI9341_SPI_DMACallbackFn+0x54>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fcd9 	bl	8000da8 <DMA_Stop>
	//DMA_InterruptDisable(hspi1.txdma);
	DMA_ClearInterruptFlag(hspi1.txdma);
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <ILI9341_SPI_DMACallbackFn+0x54>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fd42 	bl	8000e84 <DMA_ClearInterruptFlag>
	if(Color_burstCounter < Color_burstSize)
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <ILI9341_SPI_DMACallbackFn+0x58>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <ILI9341_SPI_DMACallbackFn+0x5c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	d20c      	bcs.n	8001426 <ILI9341_SPI_DMACallbackFn+0x3e>
	{
		SPI_TransmitDMA(&hspi1, (unsigned char *)Color_buffer, Color_bufferSize);
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <ILI9341_SPI_DMACallbackFn+0x60>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	490e      	ldr	r1, [pc, #56]	; (800144c <ILI9341_SPI_DMACallbackFn+0x64>)
 8001414:	4809      	ldr	r0, [pc, #36]	; (800143c <ILI9341_SPI_DMACallbackFn+0x54>)
 8001416:	f000 fff4 	bl	8002402 <SPI_TransmitDMA>
		Color_burstCounter++;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <ILI9341_SPI_DMACallbackFn+0x58>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <ILI9341_SPI_DMACallbackFn+0x58>)
 8001422:	6013      	str	r3, [r2, #0]
		/* STOP benchmarking */
		#if BENCHMARK_ENABLE
		ILI9341_StopBenchmark();
		#endif
	}
}
 8001424:	e008      	b.n	8001438 <ILI9341_SPI_DMACallbackFn+0x50>
		Color_burstCounter = 0;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <ILI9341_SPI_DMACallbackFn+0x58>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
		GPIO_WritePin(&CS, GPIO_PIN_SET);
 800142c:	2101      	movs	r1, #1
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <ILI9341_SPI_DMACallbackFn+0x68>)
 8001430:	f000 fdf2 	bl	8002018 <GPIO_WritePin>
		ILI9341_StopBenchmark();
 8001434:	f7ff ff90 	bl	8001358 <ILI9341_StopBenchmark>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000100 	.word	0x20000100
 8001440:	20000088 	.word	0x20000088
 8001444:	2000008c 	.word	0x2000008c
 8001448:	20000084 	.word	0x20000084
 800144c:	20000128 	.word	0x20000128
 8001450:	2000011c 	.word	0x2000011c

08001454 <ILI9341_Return_TimeElapsed>:

float ILI9341_Return_TimeElapsed()
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
	float buff = ILI9341_OverallTimeElapsedMs;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <ILI9341_Return_TimeElapsed+0x28>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	607b      	str	r3, [r7, #4]
	ILI9341_OverallTimeElapsedMs = 0;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <ILI9341_Return_TimeElapsed+0x28>)
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
	ILI9341_CurrentTimeElapsedMs = 0;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <ILI9341_Return_TimeElapsed+0x2c>)
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
	return buff;
 800146e:	687b      	ldr	r3, [r7, #4]
} 
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000094 	.word	0x20000094
 8001480:	20000090 	.word	0x20000090

08001484 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(uint8_t SPI_Data)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
//HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
SPI_Transmit(&hspi1, &SPI_Data, 1);
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	2201      	movs	r2, #1
 8001492:	4619      	mov	r1, r3
 8001494:	4803      	ldr	r0, [pc, #12]	; (80014a4 <ILI9341_SPI_Send+0x20>)
 8001496:	f000 ff67 	bl	8002368 <SPI_Transmit>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000100 	.word	0x20000100

080014a8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80014b2:	2100      	movs	r1, #0
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <ILI9341_Write_Command+0x34>)
 80014b6:	f000 fdaf 	bl	8002018 <GPIO_WritePin>
	GPIO_WritePin(&DC, GPIO_PIN_RESET);
 80014ba:	2100      	movs	r1, #0
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <ILI9341_Write_Command+0x38>)
 80014be:	f000 fdab 	bl	8002018 <GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ffdd 	bl	8001484 <ILI9341_SPI_Send>
	GPIO_WritePin(&CS, GPIO_PIN_SET);
 80014ca:	2101      	movs	r1, #1
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <ILI9341_Write_Command+0x34>)
 80014ce:	f000 fda3 	bl	8002018 <GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000011c 	.word	0x2000011c
 80014e0:	200000e8 	.word	0x200000e8

080014e4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80014ee:	2100      	movs	r1, #0
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <ILI9341_Write_Data+0x34>)
 80014f2:	f000 fd91 	bl	8002018 <GPIO_WritePin>
	GPIO_WritePin(&DC, GPIO_PIN_SET);
 80014f6:	2101      	movs	r1, #1
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <ILI9341_Write_Data+0x38>)
 80014fa:	f000 fd8d 	bl	8002018 <GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ffbf 	bl	8001484 <ILI9341_SPI_Send>
	GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001506:	2101      	movs	r1, #1
 8001508:	4803      	ldr	r0, [pc, #12]	; (8001518 <ILI9341_Write_Data+0x34>)
 800150a:	f000 fd85 	bl	8002018 <GPIO_WritePin>

// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
// ILI9341_SPI_Send(Data);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2000011c 	.word	0x2000011c
 800151c:	200000e8 	.word	0x200000e8

08001520 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4604      	mov	r4, r0
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	80fb      	strh	r3, [r7, #6]
 8001532:	4603      	mov	r3, r0
 8001534:	80bb      	strh	r3, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	807b      	strh	r3, [r7, #2]
 800153a:	4613      	mov	r3, r2
 800153c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800153e:	202a      	movs	r0, #42	; 0x2a
 8001540:	f7ff ffb2 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	0a1b      	lsrs	r3, r3, #8
 8001548:	b29b      	uxth	r3, r3
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ffc9 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ffc4 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	0a1b      	lsrs	r3, r3, #8
 8001560:	b29b      	uxth	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ffbd 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ffb8 	bl	80014e4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001574:	202b      	movs	r0, #43	; 0x2b
 8001576:	f7ff ff97 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	b29b      	uxth	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffae 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ffa9 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001592:	883b      	ldrh	r3, [r7, #0]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	b2db      	uxtb	r3, r3
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ffa2 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80015a0:	883b      	ldrh	r3, [r7, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff9d 	bl	80014e4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80015aa:	202c      	movs	r0, #44	; 0x2c
 80015ac:	f7ff ff7c 	bl	80014a8 <ILI9341_Write_Command>
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}

080015b8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	GPIO_WritePin(&RST, GPIO_PIN_RESET);
 80015bc:	2100      	movs	r1, #0
 80015be:	4809      	ldr	r0, [pc, #36]	; (80015e4 <ILI9341_Reset+0x2c>)
 80015c0:	f000 fd2a 	bl	8002018 <GPIO_WritePin>
	SYSTICK_DelayMs(200);
 80015c4:	20c8      	movs	r0, #200	; 0xc8
 80015c6:	f7ff fa81 	bl	8000acc <SYSTICK_DelayMs>
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80015ca:	2100      	movs	r1, #0
 80015cc:	4806      	ldr	r0, [pc, #24]	; (80015e8 <ILI9341_Reset+0x30>)
 80015ce:	f000 fd23 	bl	8002018 <GPIO_WritePin>
	SYSTICK_DelayMs(200);
 80015d2:	20c8      	movs	r0, #200	; 0xc8
 80015d4:	f7ff fa7a 	bl	8000acc <SYSTICK_DelayMs>
	GPIO_WritePin(&RST, GPIO_PIN_SET);
 80015d8:	2101      	movs	r1, #1
 80015da:	4802      	ldr	r0, [pc, #8]	; (80015e4 <ILI9341_Reset+0x2c>)
 80015dc:	f000 fd1c 	bl	8002018 <GPIO_WritePin>
	// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
	// HAL_Delay(200);
	// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	// HAL_Delay(200);
	// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000e0 	.word	0x200000e0
 80015e8:	2000011c 	.word	0x2000011c

080015ec <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80015fa:	2036      	movs	r0, #54	; 0x36
 80015fc:	f7ff ff54 	bl	80014a8 <ILI9341_Write_Command>
SYSTICK_DelayMs(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fa63 	bl	8000acc <SYSTICK_DelayMs>
	
switch(screen_rotation) 
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b03      	cmp	r3, #3
 800160a:	d837      	bhi.n	800167c <ILI9341_Set_Rotation+0x90>
 800160c:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <ILI9341_Set_Rotation+0x28>)
 800160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001612:	bf00      	nop
 8001614:	08001625 	.word	0x08001625
 8001618:	0800163b 	.word	0x0800163b
 800161c:	08001651 	.word	0x08001651
 8001620:	08001667 	.word	0x08001667
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001624:	2048      	movs	r0, #72	; 0x48
 8001626:	f7ff ff5d 	bl	80014e4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <ILI9341_Set_Rotation+0x9c>)
 800162c:	22f0      	movs	r2, #240	; 0xf0
 800162e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <ILI9341_Set_Rotation+0xa0>)
 8001632:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001636:	801a      	strh	r2, [r3, #0]
			break;
 8001638:	e021      	b.n	800167e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800163a:	2028      	movs	r0, #40	; 0x28
 800163c:	f7ff ff52 	bl	80014e4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <ILI9341_Set_Rotation+0x9c>)
 8001642:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001646:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001648:	4b10      	ldr	r3, [pc, #64]	; (800168c <ILI9341_Set_Rotation+0xa0>)
 800164a:	22f0      	movs	r2, #240	; 0xf0
 800164c:	801a      	strh	r2, [r3, #0]
			break;
 800164e:	e016      	b.n	800167e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001650:	2088      	movs	r0, #136	; 0x88
 8001652:	f7ff ff47 	bl	80014e4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <ILI9341_Set_Rotation+0x9c>)
 8001658:	22f0      	movs	r2, #240	; 0xf0
 800165a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <ILI9341_Set_Rotation+0xa0>)
 800165e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001662:	801a      	strh	r2, [r3, #0]
			break;
 8001664:	e00b      	b.n	800167e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001666:	20e8      	movs	r0, #232	; 0xe8
 8001668:	f7ff ff3c 	bl	80014e4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <ILI9341_Set_Rotation+0x9c>)
 800166e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001672:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <ILI9341_Set_Rotation+0xa0>)
 8001676:	22f0      	movs	r2, #240	; 0xf0
 8001678:	801a      	strh	r2, [r3, #0]
			break;
 800167a:	e000      	b.n	800167e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800167c:	bf00      	nop
	}
}
 800167e:	bf00      	nop
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000002 	.word	0x20000002
 800168c:	20000000 	.word	0x20000000

08001690 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
	GPIO_WritePin(&RST, GPIO_PIN_SET);
 8001694:	2101      	movs	r1, #1
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <ILI9341_Enable+0x10>)
 8001698:	f000 fcbe 	bl	8002018 <GPIO_WritePin>

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200000e0 	.word	0x200000e0

080016a4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

ILI9341_SPI_Init();
 80016a8:	f7ff fd66 	bl	8001178 <ILI9341_SPI_Init>
ILI9341_Enable();
 80016ac:	f7ff fff0 	bl	8001690 <ILI9341_Enable>
ILI9341_Reset();
 80016b0:	f7ff ff82 	bl	80015b8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fef7 	bl	80014a8 <ILI9341_Write_Command>
SYSTICK_DelayMs(1000);
 80016ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016be:	f7ff fa05 	bl	8000acc <SYSTICK_DelayMs>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80016c2:	20cb      	movs	r0, #203	; 0xcb
 80016c4:	f7ff fef0 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80016c8:	2039      	movs	r0, #57	; 0x39
 80016ca:	f7ff ff0b 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80016ce:	202c      	movs	r0, #44	; 0x2c
 80016d0:	f7ff ff08 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f7ff ff05 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80016da:	2034      	movs	r0, #52	; 0x34
 80016dc:	f7ff ff02 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80016e0:	2002      	movs	r0, #2
 80016e2:	f7ff feff 	bl	80014e4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80016e6:	20cf      	movs	r0, #207	; 0xcf
 80016e8:	f7ff fede 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff fef9 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80016f2:	20c1      	movs	r0, #193	; 0xc1
 80016f4:	f7ff fef6 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80016f8:	2030      	movs	r0, #48	; 0x30
 80016fa:	f7ff fef3 	bl	80014e4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80016fe:	20e8      	movs	r0, #232	; 0xe8
 8001700:	f7ff fed2 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001704:	2085      	movs	r0, #133	; 0x85
 8001706:	f7ff feed 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff feea 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001710:	2078      	movs	r0, #120	; 0x78
 8001712:	f7ff fee7 	bl	80014e4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001716:	20ea      	movs	r0, #234	; 0xea
 8001718:	f7ff fec6 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fee1 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff fede 	bl	80014e4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001728:	20ed      	movs	r0, #237	; 0xed
 800172a:	f7ff febd 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800172e:	2064      	movs	r0, #100	; 0x64
 8001730:	f7ff fed8 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001734:	2003      	movs	r0, #3
 8001736:	f7ff fed5 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800173a:	2012      	movs	r0, #18
 800173c:	f7ff fed2 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001740:	2081      	movs	r0, #129	; 0x81
 8001742:	f7ff fecf 	bl	80014e4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001746:	20f7      	movs	r0, #247	; 0xf7
 8001748:	f7ff feae 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800174c:	2020      	movs	r0, #32
 800174e:	f7ff fec9 	bl	80014e4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001752:	20c0      	movs	r0, #192	; 0xc0
 8001754:	f7ff fea8 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001758:	2023      	movs	r0, #35	; 0x23
 800175a:	f7ff fec3 	bl	80014e4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800175e:	20c1      	movs	r0, #193	; 0xc1
 8001760:	f7ff fea2 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001764:	2010      	movs	r0, #16
 8001766:	f7ff febd 	bl	80014e4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800176a:	20c5      	movs	r0, #197	; 0xc5
 800176c:	f7ff fe9c 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001770:	203e      	movs	r0, #62	; 0x3e
 8001772:	f7ff feb7 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001776:	2028      	movs	r0, #40	; 0x28
 8001778:	f7ff feb4 	bl	80014e4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800177c:	20c7      	movs	r0, #199	; 0xc7
 800177e:	f7ff fe93 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001782:	2086      	movs	r0, #134	; 0x86
 8001784:	f7ff feae 	bl	80014e4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001788:	2036      	movs	r0, #54	; 0x36
 800178a:	f7ff fe8d 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800178e:	2048      	movs	r0, #72	; 0x48
 8001790:	f7ff fea8 	bl	80014e4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001794:	203a      	movs	r0, #58	; 0x3a
 8001796:	f7ff fe87 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800179a:	2055      	movs	r0, #85	; 0x55
 800179c:	f7ff fea2 	bl	80014e4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80017a0:	20b1      	movs	r0, #177	; 0xb1
 80017a2:	f7ff fe81 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fe9c 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80017ac:	2018      	movs	r0, #24
 80017ae:	f7ff fe99 	bl	80014e4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80017b2:	20b6      	movs	r0, #182	; 0xb6
 80017b4:	f7ff fe78 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80017b8:	2008      	movs	r0, #8
 80017ba:	f7ff fe93 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80017be:	2082      	movs	r0, #130	; 0x82
 80017c0:	f7ff fe90 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80017c4:	2027      	movs	r0, #39	; 0x27
 80017c6:	f7ff fe8d 	bl	80014e4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80017ca:	20f2      	movs	r0, #242	; 0xf2
 80017cc:	f7ff fe6c 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f7ff fe87 	bl	80014e4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80017d6:	2026      	movs	r0, #38	; 0x26
 80017d8:	f7ff fe66 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80017dc:	2001      	movs	r0, #1
 80017de:	f7ff fe81 	bl	80014e4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80017e2:	20e0      	movs	r0, #224	; 0xe0
 80017e4:	f7ff fe60 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80017e8:	200f      	movs	r0, #15
 80017ea:	f7ff fe7b 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80017ee:	2031      	movs	r0, #49	; 0x31
 80017f0:	f7ff fe78 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80017f4:	202b      	movs	r0, #43	; 0x2b
 80017f6:	f7ff fe75 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80017fa:	200c      	movs	r0, #12
 80017fc:	f7ff fe72 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001800:	200e      	movs	r0, #14
 8001802:	f7ff fe6f 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001806:	2008      	movs	r0, #8
 8001808:	f7ff fe6c 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 800180c:	204e      	movs	r0, #78	; 0x4e
 800180e:	f7ff fe69 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001812:	20f1      	movs	r0, #241	; 0xf1
 8001814:	f7ff fe66 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001818:	2037      	movs	r0, #55	; 0x37
 800181a:	f7ff fe63 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800181e:	2007      	movs	r0, #7
 8001820:	f7ff fe60 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001824:	2010      	movs	r0, #16
 8001826:	f7ff fe5d 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800182a:	2003      	movs	r0, #3
 800182c:	f7ff fe5a 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001830:	200e      	movs	r0, #14
 8001832:	f7ff fe57 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001836:	2009      	movs	r0, #9
 8001838:	f7ff fe54 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800183c:	2000      	movs	r0, #0
 800183e:	f7ff fe51 	bl	80014e4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001842:	20e1      	movs	r0, #225	; 0xe1
 8001844:	f7ff fe30 	bl	80014a8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fe4b 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800184e:	200e      	movs	r0, #14
 8001850:	f7ff fe48 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001854:	2014      	movs	r0, #20
 8001856:	f7ff fe45 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800185a:	2003      	movs	r0, #3
 800185c:	f7ff fe42 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001860:	2011      	movs	r0, #17
 8001862:	f7ff fe3f 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001866:	2007      	movs	r0, #7
 8001868:	f7ff fe3c 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800186c:	2031      	movs	r0, #49	; 0x31
 800186e:	f7ff fe39 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001872:	20c1      	movs	r0, #193	; 0xc1
 8001874:	f7ff fe36 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001878:	2048      	movs	r0, #72	; 0x48
 800187a:	f7ff fe33 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800187e:	2008      	movs	r0, #8
 8001880:	f7ff fe30 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001884:	200f      	movs	r0, #15
 8001886:	f7ff fe2d 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800188a:	200c      	movs	r0, #12
 800188c:	f7ff fe2a 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001890:	2031      	movs	r0, #49	; 0x31
 8001892:	f7ff fe27 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001896:	2036      	movs	r0, #54	; 0x36
 8001898:	f7ff fe24 	bl	80014e4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800189c:	200f      	movs	r0, #15
 800189e:	f7ff fe21 	bl	80014e4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80018a2:	2011      	movs	r0, #17
 80018a4:	f7ff fe00 	bl	80014a8 <ILI9341_Write_Command>
SYSTICK_DelayMs(120);
 80018a8:	2078      	movs	r0, #120	; 0x78
 80018aa:	f7ff f90f 	bl	8000acc <SYSTICK_DelayMs>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80018ae:	2029      	movs	r0, #41	; 0x29
 80018b0:	f7ff fdfa 	bl	80014a8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80018b4:	2000      	movs	r0, #0
 80018b6:	f7ff fe99 	bl	80015ec <ILI9341_Set_Rotation>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	80fb      	strh	r3, [r7, #6]
//SENDS COLOUR
	
GPIO_WritePin(&DC, GPIO_PIN_SET);
 80018cc:	2101      	movs	r1, #1
 80018ce:	4831      	ldr	r0, [pc, #196]	; (8001994 <ILI9341_Draw_Colour_Burst+0xd4>)
 80018d0:	f000 fba2 	bl	8002018 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80018d4:	2100      	movs	r1, #0
 80018d6:	4830      	ldr	r0, [pc, #192]	; (8001998 <ILI9341_Draw_Colour_Burst+0xd8>)
 80018d8:	f000 fb9e 	bl	8002018 <GPIO_WritePin>
if((Size*2) < BURST_MAX_SIZE)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018e4:	d203      	bcs.n	80018ee <ILI9341_Draw_Colour_Burst+0x2e>
{
	Color_bufferSize = Size;
 80018e6:	4a2d      	ldr	r2, [pc, #180]	; (800199c <ILI9341_Draw_Colour_Burst+0xdc>)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e003      	b.n	80018f6 <ILI9341_Draw_Colour_Burst+0x36>
}
else
{
	Color_bufferSize = BURST_MAX_SIZE;
 80018ee:	4b2b      	ldr	r3, [pc, #172]	; (800199c <ILI9341_Draw_Colour_Burst+0xdc>)
 80018f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018f4:	601a      	str	r2, [r3, #0]
}

unsigned char shifted = 	Colour>>8;;
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	75fb      	strb	r3, [r7, #23]
for(uint32_t j = 0; j < Color_bufferSize; j+=2)
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
 8001902:	e00d      	b.n	8001920 <ILI9341_Draw_Colour_Burst+0x60>
{
	Color_buffer[j] = 	shifted;
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <ILI9341_Draw_Colour_Burst+0xe0>)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	7dfa      	ldrb	r2, [r7, #23]
 800190c:	701a      	strb	r2, [r3, #0]
	Color_buffer[j+1] = Colour;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3301      	adds	r3, #1
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	b2d1      	uxtb	r1, r2
 8001916:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <ILI9341_Draw_Colour_Burst+0xe0>)
 8001918:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Color_bufferSize; j+=2)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3302      	adds	r3, #2
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <ILI9341_Draw_Colour_Burst+0xdc>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3ec      	bcc.n	8001904 <ILI9341_Draw_Colour_Burst+0x44>
}
uint32_t Sending_Size = Size*2;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
Color_burstSize = Sending_Size/Color_bufferSize;
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <ILI9341_Draw_Colour_Burst+0xdc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <ILI9341_Draw_Colour_Burst+0xe4>)
 800193c:	6013      	str	r3, [r2, #0]
uint32_t Remainder_from_block = Sending_Size%Color_bufferSize;
 800193e:	4b17      	ldr	r3, [pc, #92]	; (800199c <ILI9341_Draw_Colour_Burst+0xdc>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fbb3 f1f2 	udiv	r1, r3, r2
 8001948:	fb02 f201 	mul.w	r2, r2, r1
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	60fb      	str	r3, [r7, #12]

#if BENCHMARK_ENABLE
ILI9341_StartBenchmark();
 8001950:	f7ff fcee 	bl	8001330 <ILI9341_StartBenchmark>
{
	SPI_TransmitDMA(&hspi1, (unsigned char *)Color_buffer, Color_bufferSize);
}

#else
if(Color_burstSize != 0)
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <ILI9341_Draw_Colour_Burst+0xe4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d011      	beq.n	8001980 <ILI9341_Draw_Colour_Burst+0xc0>
{
	for(uint32_t j = 0; j < (Color_burstSize); j++)
 800195c:	2300      	movs	r3, #0
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	e009      	b.n	8001976 <ILI9341_Draw_Colour_Burst+0xb6>
		{
		SPI_Transmit(&hspi1, (unsigned char *)Color_buffer, Color_bufferSize);
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <ILI9341_Draw_Colour_Burst+0xdc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	490d      	ldr	r1, [pc, #52]	; (80019a0 <ILI9341_Draw_Colour_Burst+0xe0>)
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <ILI9341_Draw_Colour_Burst+0xe8>)
 800196c:	f000 fcfc 	bl	8002368 <SPI_Transmit>
	for(uint32_t j = 0; j < (Color_burstSize); j++)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	3301      	adds	r3, #1
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <ILI9341_Draw_Colour_Burst+0xe4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	429a      	cmp	r2, r3
 800197e:	d3f0      	bcc.n	8001962 <ILI9341_Draw_Colour_Burst+0xa2>
		}
}

#if BENCHMARK_ENABLE
/* Stop Benchmark */
ILI9341_StopBenchmark();
 8001980:	f7ff fcea 	bl	8001358 <ILI9341_StopBenchmark>
#endif

/* Transmit Remainder if exists */
//SPI_TransmitDMA(&hspi1, (unsigned char *)Color_buffer, Remainder_from_block);
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001984:	2101      	movs	r1, #1
 8001986:	4804      	ldr	r0, [pc, #16]	; (8001998 <ILI9341_Draw_Colour_Burst+0xd8>)
 8001988:	f000 fb46 	bl	8002018 <GPIO_WritePin>

#endif

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200000e8 	.word	0x200000e8
 8001998:	2000011c 	.word	0x2000011c
 800199c:	20000084 	.word	0x20000084
 80019a0:	20000128 	.word	0x20000128
 80019a4:	2000008c 	.word	0x2000008c
 80019a8:	20000100 	.word	0x20000100

080019ac <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	80fb      	strh	r3, [r7, #6]
 80019b6:	460b      	mov	r3, r1
 80019b8:	80bb      	strh	r3, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80019be:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <ILI9341_Draw_Pixel+0x15c>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	88fa      	ldrh	r2, [r7, #6]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	f080 809a 	bcs.w	8001b00 <ILI9341_Draw_Pixel+0x154>
 80019cc:	4b4f      	ldr	r3, [pc, #316]	; (8001b0c <ILI9341_Draw_Pixel+0x160>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	88ba      	ldrh	r2, [r7, #4]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f080 8093 	bcs.w	8001b00 <ILI9341_Draw_Pixel+0x154>
	
//ADDRESS
GPIO_WritePin(&DC, GPIO_PIN_RESET);
 80019da:	2100      	movs	r1, #0
 80019dc:	484c      	ldr	r0, [pc, #304]	; (8001b10 <ILI9341_Draw_Pixel+0x164>)
 80019de:	f000 fb1b 	bl	8002018 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80019e2:	2100      	movs	r1, #0
 80019e4:	484b      	ldr	r0, [pc, #300]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 80019e6:	f000 fb17 	bl	8002018 <GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80019ea:	202a      	movs	r0, #42	; 0x2a
 80019ec:	f7ff fd4a 	bl	8001484 <ILI9341_SPI_Send>
GPIO_WritePin(&DC, GPIO_PIN_SET);
 80019f0:	2101      	movs	r1, #1
 80019f2:	4847      	ldr	r0, [pc, #284]	; (8001b10 <ILI9341_Draw_Pixel+0x164>)
 80019f4:	f000 fb10 	bl	8002018 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 80019f8:	2101      	movs	r1, #1
 80019fa:	4846      	ldr	r0, [pc, #280]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 80019fc:	f000 fb0c 	bl	8002018 <GPIO_WritePin>
// ILI9341_SPI_Send(0x2A);
// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		

//XDATA
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001a00:	2100      	movs	r1, #0
 8001a02:	4844      	ldr	r0, [pc, #272]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001a04:	f000 fb08 	bl	8002018 <GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	753b      	strb	r3, [r7, #20]
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	757b      	strb	r3, [r7, #21]
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	121b      	asrs	r3, r3, #8
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	75bb      	strb	r3, [r7, #22]
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	3301      	adds	r3, #1
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	75fb      	strb	r3, [r7, #23]
SPI_Transmit(&hspi1, Temp_Buffer, 4);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2204      	movs	r2, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4838      	ldr	r0, [pc, #224]	; (8001b18 <ILI9341_Draw_Pixel+0x16c>)
 8001a36:	f000 fc97 	bl	8002368 <SPI_Transmit>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	4835      	ldr	r0, [pc, #212]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001a3e:	f000 faeb 	bl	8002018 <GPIO_WritePin>
// unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
// HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);

//ADDRESS
GPIO_WritePin(&DC, GPIO_PIN_RESET);
 8001a42:	2100      	movs	r1, #0
 8001a44:	4832      	ldr	r0, [pc, #200]	; (8001b10 <ILI9341_Draw_Pixel+0x164>)
 8001a46:	f000 fae7 	bl	8002018 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4831      	ldr	r0, [pc, #196]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001a4e:	f000 fae3 	bl	8002018 <GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001a52:	202b      	movs	r0, #43	; 0x2b
 8001a54:	f7ff fd16 	bl	8001484 <ILI9341_SPI_Send>
GPIO_WritePin(&DC, GPIO_PIN_SET);
 8001a58:	2101      	movs	r1, #1
 8001a5a:	482d      	ldr	r0, [pc, #180]	; (8001b10 <ILI9341_Draw_Pixel+0x164>)
 8001a5c:	f000 fadc 	bl	8002018 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001a60:	2101      	movs	r1, #1
 8001a62:	482c      	ldr	r0, [pc, #176]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001a64:	f000 fad8 	bl	8002018 <GPIO_WritePin>
// ILI9341_SPI_Send(0x2B);
// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			

//YDATA
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	482a      	ldr	r0, [pc, #168]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001a6c:	f000 fad4 	bl	8002018 <GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001a70:	88bb      	ldrh	r3, [r7, #4]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	743b      	strb	r3, [r7, #16]
 8001a7a:	88bb      	ldrh	r3, [r7, #4]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	747b      	strb	r3, [r7, #17]
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	121b      	asrs	r3, r3, #8
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	74bb      	strb	r3, [r7, #18]
 8001a8a:	88bb      	ldrh	r3, [r7, #4]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	74fb      	strb	r3, [r7, #19]
SPI_Transmit(&hspi1, Temp_Buffer1, 4);
 8001a94:	f107 0310 	add.w	r3, r7, #16
 8001a98:	2204      	movs	r2, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	481e      	ldr	r0, [pc, #120]	; (8001b18 <ILI9341_Draw_Pixel+0x16c>)
 8001a9e:	f000 fc63 	bl	8002368 <SPI_Transmit>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	481b      	ldr	r0, [pc, #108]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001aa6:	f000 fab7 	bl	8002018 <GPIO_WritePin>
// unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
// HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);

//ADDRESS	
GPIO_WritePin(&DC, GPIO_PIN_RESET);
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4818      	ldr	r0, [pc, #96]	; (8001b10 <ILI9341_Draw_Pixel+0x164>)
 8001aae:	f000 fab3 	bl	8002018 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4817      	ldr	r0, [pc, #92]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001ab6:	f000 faaf 	bl	8002018 <GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001aba:	202c      	movs	r0, #44	; 0x2c
 8001abc:	f7ff fce2 	bl	8001484 <ILI9341_SPI_Send>
GPIO_WritePin(&DC, GPIO_PIN_SET);
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4813      	ldr	r0, [pc, #76]	; (8001b10 <ILI9341_Draw_Pixel+0x164>)
 8001ac4:	f000 faa8 	bl	8002018 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4812      	ldr	r0, [pc, #72]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001acc:	f000 faa4 	bl	8002018 <GPIO_WritePin>
// ILI9341_SPI_Send(0x2C);
// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			

//COLOUR	
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4810      	ldr	r0, [pc, #64]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001ad4:	f000 faa0 	bl	8002018 <GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	733b      	strb	r3, [r7, #12]
 8001ae2:	887b      	ldrh	r3, [r7, #2]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	737b      	strb	r3, [r7, #13]
SPI_Transmit(&hspi1, Temp_Buffer2, 2);
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2202      	movs	r2, #2
 8001aee:	4619      	mov	r1, r3
 8001af0:	4809      	ldr	r0, [pc, #36]	; (8001b18 <ILI9341_Draw_Pixel+0x16c>)
 8001af2:	f000 fc39 	bl	8002368 <SPI_Transmit>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001af6:	2101      	movs	r1, #1
 8001af8:	4806      	ldr	r0, [pc, #24]	; (8001b14 <ILI9341_Draw_Pixel+0x168>)
 8001afa:	f000 fa8d 	bl	8002018 <GPIO_WritePin>
 8001afe:	e000      	b.n	8001b02 <ILI9341_Draw_Pixel+0x156>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001b00:	bf00      	nop
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
// unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
// HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	
}
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000002 	.word	0x20000002
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	200000e8 	.word	0x200000e8
 8001b14:	2000011c 	.word	0x2000011c
 8001b18:	20000100 	.word	0x20000100

08001b1c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	4611      	mov	r1, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	80fb      	strh	r3, [r7, #6]
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80bb      	strh	r3, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	807b      	strh	r3, [r7, #2]
 8001b36:	4613      	mov	r3, r2
 8001b38:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001b3a:	4b24      	ldr	r3, [pc, #144]	; (8001bcc <ILI9341_Draw_Rectangle+0xb0>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	88fa      	ldrh	r2, [r7, #6]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d23d      	bcs.n	8001bc2 <ILI9341_Draw_Rectangle+0xa6>
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <ILI9341_Draw_Rectangle+0xb4>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	88ba      	ldrh	r2, [r7, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d237      	bcs.n	8001bc2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001b52:	88fa      	ldrh	r2, [r7, #6]
 8001b54:	887b      	ldrh	r3, [r7, #2]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <ILI9341_Draw_Rectangle+0xb0>)
 8001b5a:	8812      	ldrh	r2, [r2, #0]
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	dd05      	ble.n	8001b6e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <ILI9341_Draw_Rectangle+0xb0>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <ILI9341_Draw_Rectangle+0xb4>)
 8001b76:	8812      	ldrh	r2, [r2, #0]
 8001b78:	b292      	uxth	r2, r2
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	dd05      	ble.n	8001b8a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <ILI9341_Draw_Rectangle+0xb4>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29c      	uxth	r4, r3
 8001b96:	88ba      	ldrh	r2, [r7, #4]
 8001b98:	883b      	ldrh	r3, [r7, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	88b9      	ldrh	r1, [r7, #4]
 8001ba4:	88f8      	ldrh	r0, [r7, #6]
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	f7ff fcba 	bl	8001520 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001bac:	883b      	ldrh	r3, [r7, #0]
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	8b3b      	ldrh	r3, [r7, #24]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff fe80 	bl	80018c0 <ILI9341_Draw_Colour_Burst>
 8001bc0:	e000      	b.n	8001bc4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001bc2:	bf00      	nop
}
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000002 	.word	0x20000002
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <GPIO_Init>:
 */

#include "Drivers/GPIO/GPIO.h"

HAL_Status GPIO_Init(GPIO_HandleTypeDef* gpio_handle)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <GPIO_Init+0x18>
    {
        status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
 8001bea:	e20e      	b.n	800200a <GPIO_Init+0x436>
    }
    else
    {
        /* Check if pin number is less than 8 */
        if(gpio_handle->GPIO_Pin < GPIO_PIN_8)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	f200 80fd 	bhi.w	8001df0 <GPIO_Init+0x21c>
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	795b      	ldrb	r3, [r3, #5]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d876      	bhi.n	8001cec <GPIO_Init+0x118>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <GPIO_Init+0x30>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c15 	.word	0x08001c15
 8001c08:	08001c4b 	.word	0x08001c4b
 8001c0c:	08001c81 	.word	0x08001c81
 8001c10:	08001cb7 	.word	0x08001cb7
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	791b      	ldrb	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x04UL << (gpio_handle->GPIO_Pin * 4));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6819      	ldr	r1, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	791b      	ldrb	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
                    break;
 8001c48:	e053      	b.n	8001cf2 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6819      	ldr	r1, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43da      	mvns	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	400a      	ands	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6819      	ldr	r1, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	791b      	ldrb	r3, [r3, #4]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	2201      	movs	r2, #1
 8001c74:	409a      	lsls	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
                    break;
 8001c7e:	e038      	b.n	8001cf2 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6819      	ldr	r1, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	791b      	ldrb	r3, [r3, #4]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	400a      	ands	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6819      	ldr	r1, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	2202      	movs	r2, #2
 8001caa:	409a      	lsls	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
                    break;
 8001cb4:	e01d      	b.n	8001cf2 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6819      	ldr	r1, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	791b      	ldrb	r3, [r3, #4]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	400a      	ands	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6819      	ldr	r1, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	791b      	ldrb	r3, [r3, #4]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	2203      	movs	r2, #3
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
                    break;
 8001cea:	e002      	b.n	8001cf2 <GPIO_Init+0x11e>
                default:
                    status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
                    break;
 8001cf0:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	799b      	ldrb	r3, [r3, #6]
 8001cf6:	2b06      	cmp	r3, #6
 8001cf8:	d877      	bhi.n	8001dea <GPIO_Init+0x216>
 8001cfa:	a201      	add	r2, pc, #4	; (adr r2, 8001d00 <GPIO_Init+0x12c>)
 8001cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d00:	08001d1d 	.word	0x08001d1d
 8001d04:	08001d3d 	.word	0x08001d3d
 8001d08:	08001d77 	.word	0x08001d77
 8001d0c:	08001d1d 	.word	0x08001d1d
 8001d10:	08001d3d 	.word	0x08001d3d
 8001d14:	08001d77 	.word	0x08001d77
 8001d18:	08001db1 	.word	0x08001db1
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	791b      	ldrb	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]
                    break;
 8001d3a:	e166      	b.n	800200a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6819      	ldr	r1, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	791b      	ldrb	r3, [r3, #4]
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43da      	mvns	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	400a      	ands	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	791b      	ldrb	r3, [r3, #4]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	2201      	movs	r2, #1
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
                    break;
 8001d74:	e149      	b.n	800200a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6819      	ldr	r1, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	791b      	ldrb	r3, [r3, #4]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	2203      	movs	r2, #3
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	400a      	ands	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6819      	ldr	r1, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	791b      	ldrb	r3, [r3, #4]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	2202      	movs	r2, #2
 8001da4:	409a      	lsls	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
                    break;
 8001dae:	e12c      	b.n	800200a <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	791b      	ldrb	r3, [r3, #4]
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43da      	mvns	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	400a      	ands	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	2203      	movs	r2, #3
 8001dde:	409a      	lsls	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
                    break;
 8001de8:	e10f      	b.n	800200a <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
                    break;
 8001dee:	e10c      	b.n	800200a <GPIO_Init+0x436>
            }
        }
        else
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	795b      	ldrb	r3, [r3, #5]
 8001df4:	2b03      	cmp	r3, #3
 8001df6:	d87f      	bhi.n	8001ef8 <GPIO_Init+0x324>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <GPIO_Init+0x22c>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e4b 	.word	0x08001e4b
 8001e08:	08001e85 	.word	0x08001e85
 8001e0c:	08001ebf 	.word	0x08001ebf
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	791b      	ldrb	r3, [r3, #4]
 8001e1a:	3b08      	subs	r3, #8
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43da      	mvns	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x04UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	3b08      	subs	r3, #8
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]
                    break;
 8001e48:	e059      	b.n	8001efe <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	791b      	ldrb	r3, [r3, #4]
 8001e54:	3b08      	subs	r3, #8
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	400a      	ands	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791b      	ldrb	r3, [r3, #4]
 8001e72:	3b08      	subs	r3, #8
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	2201      	movs	r2, #1
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
                    break;
 8001e82:	e03c      	b.n	8001efe <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	791b      	ldrb	r3, [r3, #4]
 8001e8e:	3b08      	subs	r3, #8
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	220f      	movs	r2, #15
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	3b08      	subs	r3, #8
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
                    break;
 8001ebc:	e01f      	b.n	8001efe <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	791b      	ldrb	r3, [r3, #4]
 8001ec8:	3b08      	subs	r3, #8
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	220f      	movs	r2, #15
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	400a      	ands	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	791b      	ldrb	r3, [r3, #4]
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	2203      	movs	r2, #3
 8001eec:	409a      	lsls	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]
                    break;
 8001ef6:	e002      	b.n	8001efe <GPIO_Init+0x32a>
                default:
                    status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
                    break;
 8001efc:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	799b      	ldrb	r3, [r3, #6]
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d87e      	bhi.n	8002004 <GPIO_Init+0x430>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <GPIO_Init+0x338>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f29 	.word	0x08001f29
 8001f10:	08001f4b 	.word	0x08001f4b
 8001f14:	08001f89 	.word	0x08001f89
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08001f4b 	.word	0x08001f4b
 8001f20:	08001f89 	.word	0x08001f89
 8001f24:	08001fc7 	.word	0x08001fc7
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	791b      	ldrb	r3, [r3, #4]
 8001f32:	3b08      	subs	r3, #8
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	2203      	movs	r2, #3
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	400a      	ands	r2, r1
 8001f46:	605a      	str	r2, [r3, #4]
                    break;
 8001f48:	e05f      	b.n	800200a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	791b      	ldrb	r3, [r3, #4]
 8001f54:	3b08      	subs	r3, #8
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	43da      	mvns	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	400a      	ands	r2, r1
 8001f68:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	791b      	ldrb	r3, [r3, #4]
 8001f74:	3b08      	subs	r3, #8
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	3302      	adds	r3, #2
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
                    break;
 8001f86:	e040      	b.n	800200a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6859      	ldr	r1, [r3, #4]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	791b      	ldrb	r3, [r3, #4]
 8001f92:	3b08      	subs	r3, #8
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	2203      	movs	r2, #3
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6859      	ldr	r1, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	791b      	ldrb	r3, [r3, #4]
 8001fb2:	3b08      	subs	r3, #8
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	2202      	movs	r2, #2
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	605a      	str	r2, [r3, #4]
                    break;
 8001fc4:	e021      	b.n	800200a <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6859      	ldr	r1, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	791b      	ldrb	r3, [r3, #4]
 8001fd0:	3b08      	subs	r3, #8
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43da      	mvns	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	791b      	ldrb	r3, [r3, #4]
 8001ff0:	3b08      	subs	r3, #8
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
                    break;
 8002002:	e002      	b.n	800200a <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
                    break;
 8002008:	bf00      	nop
        }

    }    
    }
    return status;
 800200a:	7bfb      	ldrb	r3, [r7, #15]

}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop

08002018 <GPIO_WritePin>:


HAL_Status GPIO_WritePin(GPIO_HandleTypeDef* gpio_handle, GPIO_PinState pin_state)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	70fb      	strb	r3, [r7, #3]
    HAL_Status status = HAL_OKAY;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <GPIO_WritePin+0x1c>
    {
        status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e023      	b.n	800207c <GPIO_WritePin+0x64>
    }
    else
    {
        if(GPIO_PIN_RESET == pin_state)
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <GPIO_WritePin+0x3e>
        {
            gpio_handle->GPIO_TypeDef->BRR |= (1UL << gpio_handle->GPIO_Pin);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6959      	ldr	r1, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	791b      	ldrb	r3, [r3, #4]
 8002044:	461a      	mov	r2, r3
 8002046:	2301      	movs	r3, #1
 8002048:	fa03 f202 	lsl.w	r2, r3, r2
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	615a      	str	r2, [r3, #20]
 8002054:	e012      	b.n	800207c <GPIO_WritePin+0x64>
        }
        else if(GPIO_PIN_SET == pin_state)
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d10d      	bne.n	8002078 <GPIO_WritePin+0x60>
        {
            gpio_handle->GPIO_TypeDef->BSRR |= (1UL << gpio_handle->GPIO_Pin);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	791b      	ldrb	r3, [r3, #4]
 8002066:	461a      	mov	r2, r3
 8002068:	2301      	movs	r3, #1
 800206a:	fa03 f202 	lsl.w	r2, r3, r2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	611a      	str	r2, [r3, #16]
 8002076:	e001      	b.n	800207c <GPIO_WritePin+0x64>
        }
        else
        {
            status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <SPI_Init>:

#include "Drivers/SPI/SPI.h"


HAL_Status SPI_Init(SPI_HandleTypeDef* hspi)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]

    if(NULL == hspi)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <SPI_Init+0x18>
    {
        status = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	e15c      	b.n	800235a <SPI_Init+0x2d2>
    }
    else
    {
        
        /* Set SPI Slave Select */
        if(hspi->NSS == SPI_NSS_HARD)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7d1b      	ldrb	r3, [r3, #20]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d108      	bne.n	80020ba <SPI_Init+0x32>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e023      	b.n	8002102 <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_SOFT)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7d1b      	ldrb	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d108      	bne.n	80020d4 <SPI_Init+0x4c>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e016      	b.n	8002102 <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_DISABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7d1b      	ldrb	r3, [r3, #20]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d110      	bne.n	80020fe <SPI_Init+0x76>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ea:	601a      	str	r2, [r3, #0]
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	e001      	b.n	8002102 <SPI_Init+0x7a>
        }
        else
        {
            status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI mode */
        if(hspi->Mode == SPI_MODE_MASTER)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <SPI_Init+0x94>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0204 	orr.w	r2, r2, #4
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e00e      	b.n	800213a <SPI_Init+0xb2>
        }
        else if(hspi->Mode == SPI_MODE_SLAVE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d108      	bne.n	8002136 <SPI_Init+0xae>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0204 	bic.w	r2, r2, #4
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	e001      	b.n	800213a <SPI_Init+0xb2>
        }
        else
        {
            status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Bi-Directional mode */
        if(hspi->BiDir == SPI_BIDIR_ENABLE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	7d5b      	ldrb	r3, [r3, #21]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d108      	bne.n	8002154 <SPI_Init+0xcc>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIMODE);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	e00e      	b.n	8002172 <SPI_Init+0xea>
        }
        else if(hspi->BiDir == SPI_BIDIR_DISABLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7d5b      	ldrb	r3, [r3, #21]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d108      	bne.n	800216e <SPI_Init+0xe6>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_BIDIMODE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e001      	b.n	8002172 <SPI_Init+0xea>
        }
        else
        {
            status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Data Size */
        if(hspi->DataSize == SPI_DATASIZE_8BIT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7c5b      	ldrb	r3, [r3, #17]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d108      	bne.n	800218c <SPI_Init+0x104>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e00e      	b.n	80021aa <SPI_Init+0x122>
        }
        else if(hspi->DataSize == SPI_DATASIZE_16BIT)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7c5b      	ldrb	r3, [r3, #17]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d108      	bne.n	80021a6 <SPI_Init+0x11e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e001      	b.n	80021aa <SPI_Init+0x122>
        }
        else
        {
            status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Polarity */
        if(hspi->CPOL == SPI_CPOL_LOW)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	799b      	ldrb	r3, [r3, #6]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d108      	bne.n	80021c4 <SPI_Init+0x13c>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0202 	bic.w	r2, r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	e00e      	b.n	80021e2 <SPI_Init+0x15a>
        }
        else if(hspi->CPOL == SPI_CPOL_HIGH)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	799b      	ldrb	r3, [r3, #6]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d108      	bne.n	80021de <SPI_Init+0x156>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0202 	orr.w	r2, r2, #2
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e001      	b.n	80021e2 <SPI_Init+0x15a>
        }
        else
        {
           status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Phase */
        if(hspi->CPHA == SPI_CPHA_1EDGE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	79db      	ldrb	r3, [r3, #7]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <SPI_Init+0x174>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e00e      	b.n	800221a <SPI_Init+0x192>
        }
        else if(hspi->CPHA == SPI_CPHA_2EDGE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	79db      	ldrb	r3, [r3, #7]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d108      	bne.n	8002216 <SPI_Init+0x18e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	e001      	b.n	800221a <SPI_Init+0x192>
        }
        else
        {
            status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	73fb      	strb	r3, [r7, #15]
        }

        /*Set TX DMA Option */
        if(hspi->SpiTxDma == SPI_TX_DMA_ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7c9b      	ldrb	r3, [r3, #18]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d108      	bne.n	8002234 <SPI_Init+0x1ac>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0202 	orr.w	r2, r2, #2
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	e007      	b.n	8002244 <SPI_Init+0x1bc>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0202 	bic.w	r2, r2, #2
 8002242:	605a      	str	r2, [r3, #4]
        }

        /*Set DMA Option */
        if(hspi->SpiRxDma == SPI_RX_DMA_ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7cdb      	ldrb	r3, [r3, #19]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d108      	bne.n	800225e <SPI_Init+0x1d6>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	e007      	b.n	800226e <SPI_Init+0x1e6>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0201 	bic.w	r2, r2, #1
 800226c:	605a      	str	r2, [r3, #4]
        }



        /* Set SPI Baud Rate */
        switch(hspi->BaudRate)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	795b      	ldrb	r3, [r3, #5]
 8002272:	2b07      	cmp	r3, #7
 8002274:	d866      	bhi.n	8002344 <SPI_Init+0x2bc>
 8002276:	a201      	add	r2, pc, #4	; (adr r2, 800227c <SPI_Init+0x1f4>)
 8002278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227c:	0800229d 	.word	0x0800229d
 8002280:	080022af 	.word	0x080022af
 8002284:	080022c5 	.word	0x080022c5
 8002288:	080022db 	.word	0x080022db
 800228c:	080022f1 	.word	0x080022f1
 8002290:	08002307 	.word	0x08002307
 8002294:	0800231d 	.word	0x0800231d
 8002298:	08002333 	.word	0x08002333
        {
            case SPI_BAUDRATE_DIV2:
                // Code for SPI_BAUD_RATE_DIV
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK , SPI_BAUDRATE_DIV2 << SPI_CR1_BR);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80022aa:	601a      	str	r2, [r3, #0]
                break;
 80022ac:	e04d      	b.n	800234a <SPI_Init+0x2c2>
            // Add more cases for other baud rates
            case SPI_BAUDRATE_DIV4:
                // Code for SPI_BAUDRATE_DIV4
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV4 << SPI_CR1_BR);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0208 	orr.w	r2, r2, #8
 80022c0:	601a      	str	r2, [r3, #0]
                break;
 80022c2:	e042      	b.n	800234a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV8:
                // Code for SPI_BAUDRATE_DIV8
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV8 << SPI_CR1_BR);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0210 	orr.w	r2, r2, #16
 80022d6:	601a      	str	r2, [r3, #0]
                break;
 80022d8:	e037      	b.n	800234a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV16:
                // Code for SPI_BAUDRATE_DIV16
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV16 << SPI_CR1_BR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0218 	orr.w	r2, r2, #24
 80022ec:	601a      	str	r2, [r3, #0]
                break;  
 80022ee:	e02c      	b.n	800234a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV32:
                // Code for SPI_BAUDRATE_DIV32
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV32 << SPI_CR1_BR);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0220 	orr.w	r2, r2, #32
 8002302:	601a      	str	r2, [r3, #0]
                break;
 8002304:	e021      	b.n	800234a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV64:
                // Code for SPI_BAUDRATE_DIV64
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV64 << SPI_CR1_BR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002318:	601a      	str	r2, [r3, #0]
                break;
 800231a:	e016      	b.n	800234a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV128:
                // Code for SPI_BAUDRATE_DIV128
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV128 << SPI_CR1_BR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800232e:	601a      	str	r2, [r3, #0]
                break;
 8002330:	e00b      	b.n	800234a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV256:
                // Code for SPI_BAUDRATE_DIV256
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV256 << SPI_CR1_BR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8002340:	601a      	str	r2, [r3, #0]
                break;
 8002342:	e002      	b.n	800234a <SPI_Init+0x2c2>
            default:
                /*------ Take some action ---- */
                status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
                break;
 8002348:	bf00      	nop
        }
        /* Enable SPI */
        SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002358:	601a      	str	r2, [r3, #0]

    }

    return status;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop

08002368 <SPI_Transmit>:
 * @param Timeout 
 * @return HAL_Status 
 */

HAL_Status SPI_Transmit(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8002374:	2300      	movs	r3, #0
 8002376:	75fb      	strb	r3, [r7, #23]
    if((NULL == hspi) || (NULL == pData))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <SPI_Transmit+0x1c>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <SPI_Transmit+0x22>
    {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	75fb      	strb	r3, [r7, #23]
 8002388:	e035      	b.n	80023f6 <SPI_Transmit+0x8e>
    }
    else
    {
           /* Init TX counter */
           uint32_t counter = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
           /* Check size */
           if(hspi->DataSize == SPI_DATASIZE_8BIT)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	7c5b      	ldrb	r3, [r3, #17]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d12b      	bne.n	80023ee <SPI_Transmit+0x86>
           {
            /* 8-bit DataSize */
            while(counter < Size)
 8002396:	e012      	b.n	80023be <SPI_Transmit+0x56>
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 8002398:	bf00      	nop
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f7      	beq.n	800239a <SPI_Transmit+0x32>
                hspi->Instance->DR = (uint8_t)pData[counter];
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4413      	add	r3, r2
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60da      	str	r2, [r3, #12]
                counter++;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	3301      	adds	r3, #1
 80023bc:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d3e8      	bcc.n	8002398 <SPI_Transmit+0x30>
 80023c6:	e016      	b.n	80023f6 <SPI_Transmit+0x8e>
            {
            /* 16-bit DataSize */
            while(counter < Size)
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 80023c8:	bf00      	nop
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f7      	beq.n	80023ca <SPI_Transmit+0x62>
                hspi->Instance->DR = (uint16_t)pData[counter];
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60da      	str	r2, [r3, #12]
                counter++;
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	3301      	adds	r3, #1
 80023ec:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d3e8      	bcc.n	80023c8 <SPI_Transmit+0x60>
            }           
            }
    }
    return status;
 80023f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <SPI_TransmitDMA>:
 * @param pData 
 * @param Size 
 * @return HAL_Status 
 */
HAL_Status SPI_TransmitDMA(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 800240e:	2300      	movs	r3, #0
 8002410:	75fb      	strb	r3, [r7, #23]
    if(NULL == hspi)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <SPI_TransmitDMA+0x1c>
    {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	75fb      	strb	r3, [r7, #23]
 800241c:	e019      	b.n	8002452 <SPI_TransmitDMA+0x50>
    }
    else
    {
        /* Set the DMA channel memory address */
        DMA_SetMemoryAddress(hspi->txdma, pData);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe fc8b 	bl	8000d40 <DMA_SetMemoryAddress>

        /* Set the DMA channel peripheral address */
        DMA_SetPeriphAddress(hspi->txdma, &(hspi->Instance->DR));
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	330c      	adds	r3, #12
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f7fe fc68 	bl	8000d0c <DMA_SetPeriphAddress>

        /* Set the DMA channel count */
        DMA_SetDataCounter(hspi->txdma,Size);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fcca 	bl	8000ddc <DMA_SetDataCounter>

        /* Start sending */
        DMA_Start(hspi->txdma);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe fc91 	bl	8000d74 <DMA_Start>

        /* Stop sending */
        //DMA_Stop(hspi->txdma);
    }
    return status;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <TIM_Init>:
 * 
 * @param TIM_Handle 
 * @return HAL_Status 
 */
HAL_Status TIM_Init(TIM_HandleTypeDef *TIM_Handle)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]

    if(NULL == TIM_Handle)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <TIM_Init+0x18>
    {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e041      	b.n	80024f8 <TIM_Init+0x9c>
    }
    else
    {
        /* Set the URS bit */
        SET_BIT(TIM_Handle->Instance->CR1, TIM_CR1_URS_POS);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0204 	orr.w	r2, r2, #4
 8002482:	601a      	str	r2, [r3, #0]

        /* Set the ARPE bit */
        SET_BIT(TIM_Handle->Instance->CR1, TIM_CR1_ARPE_POS);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002492:	601a      	str	r2, [r3, #0]


        /* Set Auto-Reload value */
        TIM_Handle->Instance->ARR = TIM_ARR_VALUE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800249c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set Periodicity */
        switch((uint32_t)TIM_Handle->Instance)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a6:	d003      	beq.n	80024b0 <TIM_Init+0x54>
 80024a8:	4a16      	ldr	r2, [pc, #88]	; (8002504 <TIM_Init+0xa8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d005      	beq.n	80024ba <TIM_Init+0x5e>
 80024ae:	e009      	b.n	80024c4 <TIM_Init+0x68>
        {
            case (uint32_t)TIM_2_BASE:
            TIM2_NumOfOverFlows =   TIM_Handle->NumberOfMilliseconds / TIM_OVERFLOW_TIME_IN_MS;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <TIM_Init+0xac>)
 80024b6:	6013      	str	r3, [r2, #0]
            break;
 80024b8:	e004      	b.n	80024c4 <TIM_Init+0x68>
            case (uint32_t)TIM_3_BASE:
            TIM3_NumOfOverFlows =   TIM_Handle->NumberOfMilliseconds / TIM_OVERFLOW_TIME_IN_MS;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <TIM_Init+0xb0>)
 80024c0:	6013      	str	r3, [r2, #0]
            break;
 80024c2:	bf00      	nop
        }

        /* Set Prescaler value */
        TIM_Handle->Instance->PSC = TIM_Handle->Prescaler;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6892      	ldr	r2, [r2, #8]
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28

        /* Check Interrupt */
        if(TIM_INTERRUPT_ENABLE == TIM_Handle->Interrupt)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7b1b      	ldrb	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d108      	bne.n	80024e8 <TIM_Init+0x8c>
        {
            /* Enable the interrupt */
            SET_BIT(TIM_Handle->Instance->DIER, TIM_DIER_UIE_POS);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	e007      	b.n	80024f8 <TIM_Init+0x9c>
        }
        else
        {
            /* Disable the interrupt */
            CLR_BIT(TIM_Handle->Instance->DIER, TIM_DIER_UIE_POS);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	60da      	str	r2, [r3, #12]
        }

    }
    return status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]

}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40000400 	.word	0x40000400
 8002508:	20000334 	.word	0x20000334
 800250c:	20000330 	.word	0x20000330

08002510 <TIM_Start>:
 * 
 * @param TIM_Handle 
 * @return HAL_Status 
 */
HAL_Status TIM_Start(TIM_HandleTypeDef *TIM_Handle)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
    if(NULL == TIM_Handle)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <TIM_Start+0x18>
    {
        status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	e007      	b.n	8002538 <TIM_Start+0x28>
    }
    else
    {
        /* Enable the timer */
        SET_BIT(TIM_Handle->Instance->CR1, TIM_CR1_CEN_POS);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]
    }
}
 8002538:	bf00      	nop
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <TIM_Stop>:
 * 
 * @param TIM_Handle 
 * @return HAL_Status 
 */
HAL_Status TIM_Stop(TIM_HandleTypeDef *TIM_Handle)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
    if(NULL == TIM_Handle)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <TIM_Stop+0x18>
    {
        status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e007      	b.n	800256c <TIM_Stop+0x28>
    }
    else
    {
        /* Disable the timer */
        CLR_BIT(TIM_Handle->Instance->CR1, TIM_CR1_CEN_POS);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]
    }
}
 800256c:	bf00      	nop
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <TIM_SetCallBackFn>:
 * @param TIM_Handle 
 * @param callback_fn 
 * @return HAL_Status 
 */
HAL_Status TIM_SetCallBackFn(TIM_HandleTypeDef *TIM_Handle,void (*callback_fn)(void))
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
     HAL_Status status = HAL_OKAY;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]

    if(NULL == TIM_Handle)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <TIM_SetCallBackFn+0x1a>
    {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e002      	b.n	8002598 <TIM_SetCallBackFn+0x20>
    }
    else
    {
        TIM2_CallbackFn = callback_fn;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <TIM_SetCallBackFn+0x2c>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	6013      	str	r3, [r2, #0]
    }
    return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	20000124 	.word	0x20000124

080025a8 <TIM2_IRQHandler>:
/**
 * @brief Timer 2 interrupt handler
 * 
 */
void TIM2_IRQHandler()
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
    /* Disable Timer Counter */
    CLR_BIT(TIM_2_BASE->CR1,TIM_CR1_CEN_POS);
 80025ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	6013      	str	r3, [r2, #0]
    /*Clear Update Interrupt Flag*/
    CLR_BIT(TIM_2_BASE->SR,TIM_SR_UIF_POS);
 80025be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6113      	str	r3, [r2, #16]
    #if TIM_APP_MODE == TIM_STOPWATCH_APP_MODE
    TIM2_OverFlowCounter++;
    #elif TIM_APP_MODE == TIM_TIMER_APP_MODE
    /* Check overflow counter */
    uint32_t counter = TIM_2_BASE->CNT;
 80025ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	607b      	str	r3, [r7, #4]
    if(TIM2_OverFlowCounter < TIM2_NumOfOverFlows)
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <TIM2_IRQHandler+0x6c>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <TIM2_IRQHandler+0x70>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d205      	bcs.n	80025ee <TIM2_IRQHandler+0x46>
    {
        TIM2_OverFlowCounter++;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <TIM2_IRQHandler+0x6c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <TIM2_IRQHandler+0x6c>)
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	e005      	b.n	80025fa <TIM2_IRQHandler+0x52>
    }
    else
    {
        /* Call the callback function */
        TIM2_CallbackFn();
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <TIM2_IRQHandler+0x74>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4798      	blx	r3
        TIM2_OverFlowCounter = 0;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <TIM2_IRQHandler+0x6c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
    }

    #endif
    /* Start Timer counter */
    SET_BIT(TIM_2_BASE->CR1,TIM_CR1_CEN_POS);
 80025fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000098 	.word	0x20000098
 8002618:	20000334 	.word	0x20000334
 800261c:	20000124 	.word	0x20000124

08002620 <main>:
void transmit(uint8_t cmd);

void tim_callback();

int main(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af02      	add	r7, sp, #8
//	_RCC_GPIOA_ENABLE();
//	_RCC_GPIOB_ENABLE();
//	_RCC_SPI1_ENABLE();
//	_RCC_DMA1_ENABLE();

	HAL_Init();
 8002626:	f000 f89d 	bl	8002764 <HAL_Init>
	ILI9341_Init();
 800262a:	f7ff f83b 	bl	80016a4 <ILI9341_Init>

	uint8_t data = 0x06;
 800262e:	2306      	movs	r3, #6
 8002630:	77fb      	strb	r3, [r7, #31]
	float res = 5.5;
 8002632:	4b4a      	ldr	r3, [pc, #296]	; (800275c <main+0x13c>)
 8002634:	61bb      	str	r3, [r7, #24]
	/* Loop forever */
	NVIC_SetEnableInterrupt(NVIC_IRQ_DMA1_Channel3_IRQHandler);
 8002636:	200d      	movs	r0, #13
 8002638:	f7fe fa0c 	bl	8000a54 <NVIC_SetEnableInterrupt>
	NVIC_SetEnableInterrupt(NVIC_IRQ_TIM2_IRQHandler);
 800263c:	201c      	movs	r0, #28
 800263e:	f7fe fa09 	bl	8000a54 <NVIC_SetEnableInterrupt>
	// SPI_TransmitDMA(&spi1, sendArray, 5);
	while(1)
	{
		// ILI9341_Fill_Screen(BLACK);
		/* Interlacing demo */
		ILI9341_Draw_Rectangle(0,0,128,20,OLIVE);
 8002642:	f647 33e0 	movw	r3, #31712	; 0x7be0
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2314      	movs	r3, #20
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	2100      	movs	r1, #0
 800264e:	2000      	movs	r0, #0
 8002650:	f7ff fa64 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(50);
 8002654:	2032      	movs	r0, #50	; 0x32
 8002656:	f7fe fa39 	bl	8000acc <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,40,128,20,OLIVE);
 800265a:	f647 33e0 	movw	r3, #31712	; 0x7be0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2314      	movs	r3, #20
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	2128      	movs	r1, #40	; 0x28
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fa58 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(50);
 800266c:	2032      	movs	r0, #50	; 0x32
 800266e:	f7fe fa2d 	bl	8000acc <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,80,128,20,OLIVE);
 8002672:	f647 33e0 	movw	r3, #31712	; 0x7be0
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	2314      	movs	r3, #20
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	2150      	movs	r1, #80	; 0x50
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff fa4c 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(50);
 8002684:	2032      	movs	r0, #50	; 0x32
 8002686:	f7fe fa21 	bl	8000acc <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,120,128,20,OLIVE);
 800268a:	f647 33e0 	movw	r3, #31712	; 0x7be0
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2314      	movs	r3, #20
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	2178      	movs	r1, #120	; 0x78
 8002696:	2000      	movs	r0, #0
 8002698:	f7ff fa40 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(50);
 800269c:	2032      	movs	r0, #50	; 0x32
 800269e:	f7fe fa15 	bl	8000acc <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,20,128,20,ORANGE);
 80026a2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2314      	movs	r3, #20
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	2114      	movs	r1, #20
 80026ae:	2000      	movs	r0, #0
 80026b0:	f7ff fa34 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(50);
 80026b4:	2032      	movs	r0, #50	; 0x32
 80026b6:	f7fe fa09 	bl	8000acc <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,60,128,20,ORANGE);
 80026ba:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	2314      	movs	r3, #20
 80026c2:	2280      	movs	r2, #128	; 0x80
 80026c4:	213c      	movs	r1, #60	; 0x3c
 80026c6:	2000      	movs	r0, #0
 80026c8:	f7ff fa28 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(50);
 80026cc:	2032      	movs	r0, #50	; 0x32
 80026ce:	f7fe f9fd 	bl	8000acc <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,100,128,20,ORANGE);
 80026d2:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2314      	movs	r3, #20
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	2164      	movs	r1, #100	; 0x64
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff fa1c 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(50);
 80026e4:	2032      	movs	r0, #50	; 0x32
 80026e6:	f7fe f9f1 	bl	8000acc <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,140,128,20,ORANGE);
 80026ea:	f64f 5320 	movw	r3, #64800	; 0xfd20
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2314      	movs	r3, #20
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	218c      	movs	r1, #140	; 0x8c
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7ff fa10 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 80026fc:	20c8      	movs	r0, #200	; 0xc8
 80026fe:	f7fe f9e5 	bl	8000acc <SYSTICK_DelayMs>
		res = ILI9341_Return_TimeElapsed();
 8002702:	f7fe fea7 	bl	8001454 <ILI9341_Return_TimeElapsed>
 8002706:	61b8      	str	r0, [r7, #24]
		SYSTICK_DelayMs(50);
 8002708:	2032      	movs	r0, #50	; 0x32
 800270a:	f7fe f9df 	bl	8000acc <SYSTICK_DelayMs>
		// SYSTICK_DelayMs(50);
		// ILI9341_Draw_Text("Hello World2", 10, 10, BLACK, 1, WHITE);
		// SYSTICK_DelayMs(2000);
		// ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
		// ILI9341_Draw_Rectangle(0,0,128,160,WHITE);
		ILI9341_Draw_Rectangle(0,0,128,160,WHITE);
 800270e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	23a0      	movs	r3, #160	; 0xa0
 8002716:	2280      	movs	r2, #128	; 0x80
 8002718:	2100      	movs	r1, #0
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff f9fe 	bl	8001b1c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(50);
 8002720:	2032      	movs	r0, #50	; 0x32
 8002722:	f7fe f9d3 	bl	8000acc <SYSTICK_DelayMs>
		char msg[20];
		ILI9341_Text_Format(msg,"Total time spent %dms",(int)res);
 8002726:	69b8      	ldr	r0, [r7, #24]
 8002728:	f7fe f96e 	bl	8000a08 <__aeabi_f2iz>
 800272c:	4602      	mov	r2, r0
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	490b      	ldr	r1, [pc, #44]	; (8002760 <main+0x140>)
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fcd4 	bl	80010e0 <ILI9341_Text_Format>
		ILI9341_Draw_Text(msg, 10, 10, BLACK, 1, WHITE);
 8002738:	1d38      	adds	r0, r7, #4
 800273a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2301      	movs	r3, #1
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2300      	movs	r3, #0
 8002746:	220a      	movs	r2, #10
 8002748:	210a      	movs	r1, #10
 800274a:	f7fe fcdd 	bl	8001108 <ILI9341_Draw_Text>
		SYSTICK_DelayMs(2000);
 800274e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002752:	f7fe f9bb 	bl	8000acc <SYSTICK_DelayMs>
		ILI9341_Return_TimeElapsed();
 8002756:	f7fe fe7d 	bl	8001454 <ILI9341_Return_TimeElapsed>
	{
 800275a:	e772      	b.n	8002642 <main+0x22>
 800275c:	40b00000 	.word	0x40b00000
 8002760:	080032d0 	.word	0x080032d0

08002764 <HAL_Init>:
	_RCC_GPIOD_ENABLE();

}

void HAL_Init()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	 /* Init Systick */
	 SYSTICK_Init();
 8002768:	f7fe f996 	bl	8000a98 <SYSTICK_Init>
	 /* enable RCC clock */
	 _RCC_GPIOA_ENABLE();
 800276c:	4b5d      	ldr	r3, [pc, #372]	; (80028e4 <HAL_Init+0x180>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	4a5c      	ldr	r2, [pc, #368]	; (80028e4 <HAL_Init+0x180>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6193      	str	r3, [r2, #24]
	 _RCC_GPIOB_ENABLE();
 8002778:	4b5a      	ldr	r3, [pc, #360]	; (80028e4 <HAL_Init+0x180>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	4a59      	ldr	r2, [pc, #356]	; (80028e4 <HAL_Init+0x180>)
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	6193      	str	r3, [r2, #24]
	 _RCC_SPI1_ENABLE();
 8002784:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_Init+0x180>)
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	4a56      	ldr	r2, [pc, #344]	; (80028e4 <HAL_Init+0x180>)
 800278a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800278e:	6193      	str	r3, [r2, #24]
	 _RCC_DMA1_ENABLE();
 8002790:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <HAL_Init+0x180>)
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	4a53      	ldr	r2, [pc, #332]	; (80028e4 <HAL_Init+0x180>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6153      	str	r3, [r2, #20]
	 _RCC_TIM2_ENABLE();
 800279c:	4b51      	ldr	r3, [pc, #324]	; (80028e4 <HAL_Init+0x180>)
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	4a50      	ldr	r2, [pc, #320]	; (80028e4 <HAL_Init+0x180>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	61d3      	str	r3, [r2, #28]
	// tim2.Prescaler = TIM_PRESCALAR_VALUE_DIV_8;

	// TIM_Init(&tim2);

	/*Init LED at pin A0 */
	led.GPIO_TypeDef = GPIOA;
 80027a8:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <HAL_Init+0x184>)
 80027aa:	4a50      	ldr	r2, [pc, #320]	; (80028ec <HAL_Init+0x188>)
 80027ac:	601a      	str	r2, [r3, #0]
	led.GPIO_Pin = GPIO_PIN_0;
 80027ae:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <HAL_Init+0x184>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	711a      	strb	r2, [r3, #4]
	led.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_Init+0x184>)
 80027b6:	2202      	movs	r2, #2
 80027b8:	715a      	strb	r2, [r3, #5]
	led.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 80027ba:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <HAL_Init+0x184>)
 80027bc:	2203      	movs	r2, #3
 80027be:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&led);
 80027c0:	4849      	ldr	r0, [pc, #292]	; (80028e8 <HAL_Init+0x184>)
 80027c2:	f7ff fa07 	bl	8001bd4 <GPIO_Init>
	//  DMA_Init(spi1.txdma);

	//  SPI_Init(&spi1);

	/* Init SPI 2 as slave */
	_RCC_SPI2_ENABLE();
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_Init+0x180>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a46      	ldr	r2, [pc, #280]	; (80028e4 <HAL_Init+0x180>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	61d3      	str	r3, [r2, #28]
	spi2.Instance = SPI2;
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_Init+0x18c>)
 80027d4:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_Init+0x190>)
 80027d6:	601a      	str	r2, [r3, #0]
	spi2.Mode = SPI_MODE_SLAVE;
 80027d8:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <HAL_Init+0x18c>)
 80027da:	2201      	movs	r2, #1
 80027dc:	711a      	strb	r2, [r3, #4]
	spi2.DataSize = SPI_DATASIZE_8BIT;
 80027de:	4b44      	ldr	r3, [pc, #272]	; (80028f0 <HAL_Init+0x18c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	745a      	strb	r2, [r3, #17]
	spi2.CPOL = SPI_CPOL_LOW;
 80027e4:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <HAL_Init+0x18c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	719a      	strb	r2, [r3, #6]
	spi2.CPHA = SPI_CPHA_1EDGE;
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_Init+0x18c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	71da      	strb	r2, [r3, #7]
	spi2.BaudRate = SPI_BAUDRATE_DIV2;
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_Init+0x18c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	715a      	strb	r2, [r3, #5]
	spi2.NSS = SPI_NSS_HARD;
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_Init+0x18c>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	751a      	strb	r2, [r3, #20]
	spi2.BiDir = SPI_BIDIR_DISABLE;
 80027fc:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <HAL_Init+0x18c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	755a      	strb	r2, [r3, #21]
	spi2.CRC = SPI_CRC_DISABLE;
 8002802:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <HAL_Init+0x18c>)
 8002804:	2200      	movs	r2, #0
 8002806:	759a      	strb	r2, [r3, #22]
	spi2.FirstBit = SPI_LSB_FIRST;
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_Init+0x18c>)
 800280a:	2201      	movs	r2, #1
 800280c:	741a      	strb	r2, [r3, #16]
	spi2.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 800280e:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_Init+0x18c>)
 8002810:	2200      	movs	r2, #0
 8002812:	75da      	strb	r2, [r3, #23]
	spi2.CRCDir = SPI_CRC_TX;
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <HAL_Init+0x18c>)
 8002816:	2201      	movs	r2, #1
 8002818:	761a      	strb	r2, [r3, #24]
	spi2.SpiTxDma = SPI_TX_DMA_DISABLE;
 800281a:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <HAL_Init+0x18c>)
 800281c:	2201      	movs	r2, #1
 800281e:	749a      	strb	r2, [r3, #18]
	spi2.SpiRxDma = SPI_RX_DMA_ENABLE;
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <HAL_Init+0x18c>)
 8002822:	2200      	movs	r2, #0
 8002824:	74da      	strb	r2, [r3, #19]

	/* Init MOSI,MISO,SCK,NSS pin configs */
	/* Init MOSI pin */
	mosi2.GPIO_TypeDef = PORT_SPI2;
 8002826:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_Init+0x194>)
 8002828:	4a34      	ldr	r2, [pc, #208]	; (80028fc <HAL_Init+0x198>)
 800282a:	601a      	str	r2, [r3, #0]
	mosi2.GPIO_Pin = MOSI_SPI2;
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_Init+0x194>)
 800282e:	220f      	movs	r2, #15
 8002830:	711a      	strb	r2, [r3, #4]
	mosi2.GPIO_Mode = GPIO_MODE_INPUT;
 8002832:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <HAL_Init+0x194>)
 8002834:	2200      	movs	r2, #0
 8002836:	715a      	strb	r2, [r3, #5]
	mosi2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8002838:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <HAL_Init+0x194>)
 800283a:	2201      	movs	r2, #1
 800283c:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&mosi2);
 800283e:	482e      	ldr	r0, [pc, #184]	; (80028f8 <HAL_Init+0x194>)
 8002840:	f7ff f9c8 	bl	8001bd4 <GPIO_Init>

	/* Init MISO pin */
	miso2.GPIO_TypeDef = PORT_SPI2;
 8002844:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <HAL_Init+0x19c>)
 8002846:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_Init+0x198>)
 8002848:	601a      	str	r2, [r3, #0]
	miso2.GPIO_Pin = MISO_SPI2;
 800284a:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_Init+0x19c>)
 800284c:	220e      	movs	r2, #14
 800284e:	711a      	strb	r2, [r3, #4]
	miso2.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8002850:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_Init+0x19c>)
 8002852:	2202      	movs	r2, #2
 8002854:	715a      	strb	r2, [r3, #5]
	miso2.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 8002856:	4b2a      	ldr	r3, [pc, #168]	; (8002900 <HAL_Init+0x19c>)
 8002858:	2205      	movs	r2, #5
 800285a:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&miso2);
 800285c:	4828      	ldr	r0, [pc, #160]	; (8002900 <HAL_Init+0x19c>)
 800285e:	f7ff f9b9 	bl	8001bd4 <GPIO_Init>

	/* Init SCK pin */
	sck2.GPIO_TypeDef = PORT_SPI2;
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_Init+0x1a0>)
 8002864:	4a25      	ldr	r2, [pc, #148]	; (80028fc <HAL_Init+0x198>)
 8002866:	601a      	str	r2, [r3, #0]
	sck2.GPIO_Pin = SCK_SPI2;
 8002868:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_Init+0x1a0>)
 800286a:	220d      	movs	r2, #13
 800286c:	711a      	strb	r2, [r3, #4]
	sck2.GPIO_Mode = GPIO_MODE_INPUT;
 800286e:	4b25      	ldr	r3, [pc, #148]	; (8002904 <HAL_Init+0x1a0>)
 8002870:	2200      	movs	r2, #0
 8002872:	715a      	strb	r2, [r3, #5]
	sck2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_Init+0x1a0>)
 8002876:	2201      	movs	r2, #1
 8002878:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&sck2);
 800287a:	4822      	ldr	r0, [pc, #136]	; (8002904 <HAL_Init+0x1a0>)
 800287c:	f7ff f9aa 	bl	8001bd4 <GPIO_Init>

	/* Init NSS pin */
	nss2.GPIO_TypeDef = PORT_SPI2;
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_Init+0x1a4>)
 8002882:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_Init+0x198>)
 8002884:	601a      	str	r2, [r3, #0]
	nss2.GPIO_Pin = NSS_SPI2;
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_Init+0x1a4>)
 8002888:	220c      	movs	r2, #12
 800288a:	711a      	strb	r2, [r3, #4]
	nss2.GPIO_Mode = GPIO_MODE_INPUT;
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_Init+0x1a4>)
 800288e:	2200      	movs	r2, #0
 8002890:	715a      	strb	r2, [r3, #5]
	nss2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8002892:	4b1d      	ldr	r3, [pc, #116]	; (8002908 <HAL_Init+0x1a4>)
 8002894:	2201      	movs	r2, #1
 8002896:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&nss2);
 8002898:	481b      	ldr	r0, [pc, #108]	; (8002908 <HAL_Init+0x1a4>)
 800289a:	f7ff f99b 	bl	8001bd4 <GPIO_Init>
	
	/*Init DMA channels */
	spiRxdma.dma_TypeDef = DMA1_4;
 800289e:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_Init+0x1a8>)
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <HAL_Init+0x1ac>)
 80028a2:	601a      	str	r2, [r3, #0]
	spiRxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_Init+0x1a8>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	731a      	strb	r2, [r3, #12]
	spiRxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_Init+0x1a8>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	721a      	strb	r2, [r3, #8]
	spiRxdma.dma_Direction = DMA_READ_FROM_PERIPHERAL;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_Init+0x1a8>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	725a      	strb	r2, [r3, #9]
	spiRxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_Init+0x1a8>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	729a      	strb	r2, [r3, #10]
	spiRxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_Init+0x1a8>)
 80028be:	2200      	movs	r2, #0
 80028c0:	72da      	strb	r2, [r3, #11]
	spiRxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <HAL_Init+0x1a8>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	735a      	strb	r2, [r3, #13]
	spiRxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_Init+0x1a8>)
 80028ca:	2201      	movs	r2, #1
 80028cc:	739a      	strb	r2, [r3, #14]
	spiRxdma.dma_Interrupt = DMA_INTERRUPT_ENABLE;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_Init+0x1a8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	73da      	strb	r2, [r3, #15]

	spi2.rxdma = &spiRxdma;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_Init+0x18c>)
 80028d6:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_Init+0x1a8>)
 80028d8:	60da      	str	r2, [r3, #12]

	//DMA_Init(spi2.rxdma);


	SPI_Init(&spi2);
 80028da:	4805      	ldr	r0, [pc, #20]	; (80028f0 <HAL_Init+0x18c>)
 80028dc:	f7ff fbd4 	bl	8002088 <SPI_Init>
	// DMA_Init(&dma);
	// DMA_SetCallBackFn(&dma,DMA1_1_CallbackFn);
	// DMA_Transfer(&dma, sendArray, receiveArray,2);


}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	200003a4 	.word	0x200003a4
 80028ec:	40010800 	.word	0x40010800
 80028f0:	20000358 	.word	0x20000358
 80028f4:	40003800 	.word	0x40003800
 80028f8:	20000348 	.word	0x20000348
 80028fc:	40010c00 	.word	0x40010c00
 8002900:	20000374 	.word	0x20000374
 8002904:	200003b4 	.word	0x200003b4
 8002908:	200003cc 	.word	0x200003cc
 800290c:	200003bc 	.word	0x200003bc
 8002910:	40020044 	.word	0x40020044

08002914 <WWDG_IRQHandler>:
{
	GPIOA->ODR ^= (1<<0);
}

void WWDG_IRQHandler()
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 8002918:	4b04      	ldr	r3, [pc, #16]	; (800292c <WWDG_IRQHandler+0x18>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a03      	ldr	r2, [pc, #12]	; (800292c <WWDG_IRQHandler+0x18>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	40010800 	.word	0x40010800

08002930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <_sbrk+0x5c>)
 800293a:	4b15      	ldr	r3, [pc, #84]	; (8002990 <_sbrk+0x60>)
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002944:	4b13      	ldr	r3, [pc, #76]	; (8002994 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <_sbrk+0x64>)
 800294e:	4a12      	ldr	r2, [pc, #72]	; (8002998 <_sbrk+0x68>)
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002952:	4b10      	ldr	r3, [pc, #64]	; (8002994 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	429a      	cmp	r2, r3
 800295e:	d207      	bcs.n	8002970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002960:	f000 f846 	bl	80029f0 <__errno>
 8002964:	4603      	mov	r3, r0
 8002966:	220c      	movs	r2, #12
 8002968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800296a:	f04f 33ff 	mov.w	r3, #4294967295
 800296e:	e009      	b.n	8002984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <_sbrk+0x64>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <_sbrk+0x64>)
 8002980:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20002800 	.word	0x20002800
 8002990:	00000400 	.word	0x00000400
 8002994:	2000009c 	.word	0x2000009c
 8002998:	20000400 	.word	0x20000400

0800299c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800299c:	480d      	ldr	r0, [pc, #52]	; (80029d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800299e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80029a6:	490d      	ldr	r1, [pc, #52]	; (80029dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <LoopForever+0xe>)
  movs r3, #0
 80029aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ac:	e002      	b.n	80029b4 <LoopCopyDataInit>

080029ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029b2:	3304      	adds	r3, #4

080029b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029b8:	d3f9      	bcc.n	80029ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029bc:	4c0a      	ldr	r4, [pc, #40]	; (80029e8 <LoopForever+0x16>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c0:	e001      	b.n	80029c6 <LoopFillZerobss>

080029c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029c4:	3204      	adds	r2, #4

080029c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029c8:	d3fb      	bcc.n	80029c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029ca:	f000 f817 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ce:	f7ff fe27 	bl	8002620 <main>

080029d2 <LoopForever>:

LoopForever:
    b LoopForever
 80029d2:	e7fe      	b.n	80029d2 <LoopForever>
  ldr   r0, =_estack
 80029d4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80029d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029dc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80029e0:	08003564 	.word	0x08003564
  ldr r2, =_sbss
 80029e4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80029e8:	20000400 	.word	0x20000400

080029ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029ec:	e7fe      	b.n	80029ec <ADC1_2_IRQHandler>
	...

080029f0 <__errno>:
 80029f0:	4b01      	ldr	r3, [pc, #4]	; (80029f8 <__errno+0x8>)
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000004 	.word	0x20000004

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2600      	movs	r6, #0
 8002a00:	4d0c      	ldr	r5, [pc, #48]	; (8002a34 <__libc_init_array+0x38>)
 8002a02:	4c0d      	ldr	r4, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	f000 fc54 	bl	80032b8 <_init>
 8002a10:	2600      	movs	r6, #0
 8002a12:	4d0a      	ldr	r5, [pc, #40]	; (8002a3c <__libc_init_array+0x40>)
 8002a14:	4c0a      	ldr	r4, [pc, #40]	; (8002a40 <__libc_init_array+0x44>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	0800355c 	.word	0x0800355c
 8002a38:	0800355c 	.word	0x0800355c
 8002a3c:	0800355c 	.word	0x0800355c
 8002a40:	08003560 	.word	0x08003560

08002a44 <_vsiprintf_r>:
 8002a44:	b500      	push	{lr}
 8002a46:	b09b      	sub	sp, #108	; 0x6c
 8002a48:	9100      	str	r1, [sp, #0]
 8002a4a:	9104      	str	r1, [sp, #16]
 8002a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a50:	9105      	str	r1, [sp, #20]
 8002a52:	9102      	str	r1, [sp, #8]
 8002a54:	4905      	ldr	r1, [pc, #20]	; (8002a6c <_vsiprintf_r+0x28>)
 8002a56:	9103      	str	r1, [sp, #12]
 8002a58:	4669      	mov	r1, sp
 8002a5a:	f000 f86f 	bl	8002b3c <_svfiprintf_r>
 8002a5e:	2200      	movs	r2, #0
 8002a60:	9b00      	ldr	r3, [sp, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	b01b      	add	sp, #108	; 0x6c
 8002a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a6a:	bf00      	nop
 8002a6c:	ffff0208 	.word	0xffff0208

08002a70 <vsiprintf>:
 8002a70:	4613      	mov	r3, r2
 8002a72:	460a      	mov	r2, r1
 8002a74:	4601      	mov	r1, r0
 8002a76:	4802      	ldr	r0, [pc, #8]	; (8002a80 <vsiprintf+0x10>)
 8002a78:	6800      	ldr	r0, [r0, #0]
 8002a7a:	f7ff bfe3 	b.w	8002a44 <_vsiprintf_r>
 8002a7e:	bf00      	nop
 8002a80:	20000004 	.word	0x20000004

08002a84 <__ssputs_r>:
 8002a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a88:	688e      	ldr	r6, [r1, #8]
 8002a8a:	4682      	mov	sl, r0
 8002a8c:	429e      	cmp	r6, r3
 8002a8e:	460c      	mov	r4, r1
 8002a90:	4690      	mov	r8, r2
 8002a92:	461f      	mov	r7, r3
 8002a94:	d838      	bhi.n	8002b08 <__ssputs_r+0x84>
 8002a96:	898a      	ldrh	r2, [r1, #12]
 8002a98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a9c:	d032      	beq.n	8002b04 <__ssputs_r+0x80>
 8002a9e:	6825      	ldr	r5, [r4, #0]
 8002aa0:	6909      	ldr	r1, [r1, #16]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	eba5 0901 	sub.w	r9, r5, r1
 8002aa8:	6965      	ldr	r5, [r4, #20]
 8002aaa:	444b      	add	r3, r9
 8002aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ab0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ab4:	106d      	asrs	r5, r5, #1
 8002ab6:	429d      	cmp	r5, r3
 8002ab8:	bf38      	it	cc
 8002aba:	461d      	movcc	r5, r3
 8002abc:	0553      	lsls	r3, r2, #21
 8002abe:	d531      	bpl.n	8002b24 <__ssputs_r+0xa0>
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	f000 fb53 	bl	800316c <_malloc_r>
 8002ac6:	4606      	mov	r6, r0
 8002ac8:	b950      	cbnz	r0, 8002ae0 <__ssputs_r+0x5c>
 8002aca:	230c      	movs	r3, #12
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f8ca 3000 	str.w	r3, [sl]
 8002ad4:	89a3      	ldrh	r3, [r4, #12]
 8002ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ada:	81a3      	strh	r3, [r4, #12]
 8002adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ae0:	464a      	mov	r2, r9
 8002ae2:	6921      	ldr	r1, [r4, #16]
 8002ae4:	f000 face 	bl	8003084 <memcpy>
 8002ae8:	89a3      	ldrh	r3, [r4, #12]
 8002aea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af2:	81a3      	strh	r3, [r4, #12]
 8002af4:	6126      	str	r6, [r4, #16]
 8002af6:	444e      	add	r6, r9
 8002af8:	6026      	str	r6, [r4, #0]
 8002afa:	463e      	mov	r6, r7
 8002afc:	6165      	str	r5, [r4, #20]
 8002afe:	eba5 0509 	sub.w	r5, r5, r9
 8002b02:	60a5      	str	r5, [r4, #8]
 8002b04:	42be      	cmp	r6, r7
 8002b06:	d900      	bls.n	8002b0a <__ssputs_r+0x86>
 8002b08:	463e      	mov	r6, r7
 8002b0a:	4632      	mov	r2, r6
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	6820      	ldr	r0, [r4, #0]
 8002b10:	f000 fac6 	bl	80030a0 <memmove>
 8002b14:	68a3      	ldr	r3, [r4, #8]
 8002b16:	6822      	ldr	r2, [r4, #0]
 8002b18:	1b9b      	subs	r3, r3, r6
 8002b1a:	4432      	add	r2, r6
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	60a3      	str	r3, [r4, #8]
 8002b20:	6022      	str	r2, [r4, #0]
 8002b22:	e7db      	b.n	8002adc <__ssputs_r+0x58>
 8002b24:	462a      	mov	r2, r5
 8002b26:	f000 fb7b 	bl	8003220 <_realloc_r>
 8002b2a:	4606      	mov	r6, r0
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	d1e1      	bne.n	8002af4 <__ssputs_r+0x70>
 8002b30:	4650      	mov	r0, sl
 8002b32:	6921      	ldr	r1, [r4, #16]
 8002b34:	f000 face 	bl	80030d4 <_free_r>
 8002b38:	e7c7      	b.n	8002aca <__ssputs_r+0x46>
	...

08002b3c <_svfiprintf_r>:
 8002b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b40:	4698      	mov	r8, r3
 8002b42:	898b      	ldrh	r3, [r1, #12]
 8002b44:	4607      	mov	r7, r0
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	460d      	mov	r5, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	b09d      	sub	sp, #116	; 0x74
 8002b4e:	d50e      	bpl.n	8002b6e <_svfiprintf_r+0x32>
 8002b50:	690b      	ldr	r3, [r1, #16]
 8002b52:	b963      	cbnz	r3, 8002b6e <_svfiprintf_r+0x32>
 8002b54:	2140      	movs	r1, #64	; 0x40
 8002b56:	f000 fb09 	bl	800316c <_malloc_r>
 8002b5a:	6028      	str	r0, [r5, #0]
 8002b5c:	6128      	str	r0, [r5, #16]
 8002b5e:	b920      	cbnz	r0, 8002b6a <_svfiprintf_r+0x2e>
 8002b60:	230c      	movs	r3, #12
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	e0d1      	b.n	8002d0e <_svfiprintf_r+0x1d2>
 8002b6a:	2340      	movs	r3, #64	; 0x40
 8002b6c:	616b      	str	r3, [r5, #20]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9309      	str	r3, [sp, #36]	; 0x24
 8002b72:	2320      	movs	r3, #32
 8002b74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b78:	2330      	movs	r3, #48	; 0x30
 8002b7a:	f04f 0901 	mov.w	r9, #1
 8002b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d28 <_svfiprintf_r+0x1ec>
 8002b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	469a      	mov	sl, r3
 8002b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b92:	b10a      	cbz	r2, 8002b98 <_svfiprintf_r+0x5c>
 8002b94:	2a25      	cmp	r2, #37	; 0x25
 8002b96:	d1f9      	bne.n	8002b8c <_svfiprintf_r+0x50>
 8002b98:	ebba 0b04 	subs.w	fp, sl, r4
 8002b9c:	d00b      	beq.n	8002bb6 <_svfiprintf_r+0x7a>
 8002b9e:	465b      	mov	r3, fp
 8002ba0:	4622      	mov	r2, r4
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	f7ff ff6d 	bl	8002a84 <__ssputs_r>
 8002baa:	3001      	adds	r0, #1
 8002bac:	f000 80aa 	beq.w	8002d04 <_svfiprintf_r+0x1c8>
 8002bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bb2:	445a      	add	r2, fp
 8002bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8002bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a2 	beq.w	8002d04 <_svfiprintf_r+0x1c8>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bca:	f10a 0a01 	add.w	sl, sl, #1
 8002bce:	9304      	str	r3, [sp, #16]
 8002bd0:	9307      	str	r3, [sp, #28]
 8002bd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bd6:	931a      	str	r3, [sp, #104]	; 0x68
 8002bd8:	4654      	mov	r4, sl
 8002bda:	2205      	movs	r2, #5
 8002bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002be0:	4851      	ldr	r0, [pc, #324]	; (8002d28 <_svfiprintf_r+0x1ec>)
 8002be2:	f000 fa41 	bl	8003068 <memchr>
 8002be6:	9a04      	ldr	r2, [sp, #16]
 8002be8:	b9d8      	cbnz	r0, 8002c22 <_svfiprintf_r+0xe6>
 8002bea:	06d0      	lsls	r0, r2, #27
 8002bec:	bf44      	itt	mi
 8002bee:	2320      	movmi	r3, #32
 8002bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bf4:	0711      	lsls	r1, r2, #28
 8002bf6:	bf44      	itt	mi
 8002bf8:	232b      	movmi	r3, #43	; 0x2b
 8002bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8002c02:	2b2a      	cmp	r3, #42	; 0x2a
 8002c04:	d015      	beq.n	8002c32 <_svfiprintf_r+0xf6>
 8002c06:	4654      	mov	r4, sl
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f04f 0c0a 	mov.w	ip, #10
 8002c0e:	9a07      	ldr	r2, [sp, #28]
 8002c10:	4621      	mov	r1, r4
 8002c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c16:	3b30      	subs	r3, #48	; 0x30
 8002c18:	2b09      	cmp	r3, #9
 8002c1a:	d94e      	bls.n	8002cba <_svfiprintf_r+0x17e>
 8002c1c:	b1b0      	cbz	r0, 8002c4c <_svfiprintf_r+0x110>
 8002c1e:	9207      	str	r2, [sp, #28]
 8002c20:	e014      	b.n	8002c4c <_svfiprintf_r+0x110>
 8002c22:	eba0 0308 	sub.w	r3, r0, r8
 8002c26:	fa09 f303 	lsl.w	r3, r9, r3
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	46a2      	mov	sl, r4
 8002c2e:	9304      	str	r3, [sp, #16]
 8002c30:	e7d2      	b.n	8002bd8 <_svfiprintf_r+0x9c>
 8002c32:	9b03      	ldr	r3, [sp, #12]
 8002c34:	1d19      	adds	r1, r3, #4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	9103      	str	r1, [sp, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bfbb      	ittet	lt
 8002c3e:	425b      	neglt	r3, r3
 8002c40:	f042 0202 	orrlt.w	r2, r2, #2
 8002c44:	9307      	strge	r3, [sp, #28]
 8002c46:	9307      	strlt	r3, [sp, #28]
 8002c48:	bfb8      	it	lt
 8002c4a:	9204      	strlt	r2, [sp, #16]
 8002c4c:	7823      	ldrb	r3, [r4, #0]
 8002c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c50:	d10c      	bne.n	8002c6c <_svfiprintf_r+0x130>
 8002c52:	7863      	ldrb	r3, [r4, #1]
 8002c54:	2b2a      	cmp	r3, #42	; 0x2a
 8002c56:	d135      	bne.n	8002cc4 <_svfiprintf_r+0x188>
 8002c58:	9b03      	ldr	r3, [sp, #12]
 8002c5a:	3402      	adds	r4, #2
 8002c5c:	1d1a      	adds	r2, r3, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	9203      	str	r2, [sp, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bfb8      	it	lt
 8002c66:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c6a:	9305      	str	r3, [sp, #20]
 8002c6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d38 <_svfiprintf_r+0x1fc>
 8002c70:	2203      	movs	r2, #3
 8002c72:	4650      	mov	r0, sl
 8002c74:	7821      	ldrb	r1, [r4, #0]
 8002c76:	f000 f9f7 	bl	8003068 <memchr>
 8002c7a:	b140      	cbz	r0, 8002c8e <_svfiprintf_r+0x152>
 8002c7c:	2340      	movs	r3, #64	; 0x40
 8002c7e:	eba0 000a 	sub.w	r0, r0, sl
 8002c82:	fa03 f000 	lsl.w	r0, r3, r0
 8002c86:	9b04      	ldr	r3, [sp, #16]
 8002c88:	3401      	adds	r4, #1
 8002c8a:	4303      	orrs	r3, r0
 8002c8c:	9304      	str	r3, [sp, #16]
 8002c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c92:	2206      	movs	r2, #6
 8002c94:	4825      	ldr	r0, [pc, #148]	; (8002d2c <_svfiprintf_r+0x1f0>)
 8002c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c9a:	f000 f9e5 	bl	8003068 <memchr>
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d038      	beq.n	8002d14 <_svfiprintf_r+0x1d8>
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <_svfiprintf_r+0x1f4>)
 8002ca4:	bb1b      	cbnz	r3, 8002cee <_svfiprintf_r+0x1b2>
 8002ca6:	9b03      	ldr	r3, [sp, #12]
 8002ca8:	3307      	adds	r3, #7
 8002caa:	f023 0307 	bic.w	r3, r3, #7
 8002cae:	3308      	adds	r3, #8
 8002cb0:	9303      	str	r3, [sp, #12]
 8002cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cb4:	4433      	add	r3, r6
 8002cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb8:	e767      	b.n	8002b8a <_svfiprintf_r+0x4e>
 8002cba:	460c      	mov	r4, r1
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cc2:	e7a5      	b.n	8002c10 <_svfiprintf_r+0xd4>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f04f 0c0a 	mov.w	ip, #10
 8002cca:	4619      	mov	r1, r3
 8002ccc:	3401      	adds	r4, #1
 8002cce:	9305      	str	r3, [sp, #20]
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cd6:	3a30      	subs	r2, #48	; 0x30
 8002cd8:	2a09      	cmp	r2, #9
 8002cda:	d903      	bls.n	8002ce4 <_svfiprintf_r+0x1a8>
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0c5      	beq.n	8002c6c <_svfiprintf_r+0x130>
 8002ce0:	9105      	str	r1, [sp, #20]
 8002ce2:	e7c3      	b.n	8002c6c <_svfiprintf_r+0x130>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cec:	e7f0      	b.n	8002cd0 <_svfiprintf_r+0x194>
 8002cee:	ab03      	add	r3, sp, #12
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	462a      	mov	r2, r5
 8002cf4:	4638      	mov	r0, r7
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <_svfiprintf_r+0x1f8>)
 8002cf8:	a904      	add	r1, sp, #16
 8002cfa:	f3af 8000 	nop.w
 8002cfe:	1c42      	adds	r2, r0, #1
 8002d00:	4606      	mov	r6, r0
 8002d02:	d1d6      	bne.n	8002cb2 <_svfiprintf_r+0x176>
 8002d04:	89ab      	ldrh	r3, [r5, #12]
 8002d06:	065b      	lsls	r3, r3, #25
 8002d08:	f53f af2c 	bmi.w	8002b64 <_svfiprintf_r+0x28>
 8002d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d0e:	b01d      	add	sp, #116	; 0x74
 8002d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d14:	ab03      	add	r3, sp, #12
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	462a      	mov	r2, r5
 8002d1a:	4638      	mov	r0, r7
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <_svfiprintf_r+0x1f8>)
 8002d1e:	a904      	add	r1, sp, #16
 8002d20:	f000 f87c 	bl	8002e1c <_printf_i>
 8002d24:	e7eb      	b.n	8002cfe <_svfiprintf_r+0x1c2>
 8002d26:	bf00      	nop
 8002d28:	08003528 	.word	0x08003528
 8002d2c:	08003532 	.word	0x08003532
 8002d30:	00000000 	.word	0x00000000
 8002d34:	08002a85 	.word	0x08002a85
 8002d38:	0800352e 	.word	0x0800352e

08002d3c <_printf_common>:
 8002d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d40:	4616      	mov	r6, r2
 8002d42:	4699      	mov	r9, r3
 8002d44:	688a      	ldr	r2, [r1, #8]
 8002d46:	690b      	ldr	r3, [r1, #16]
 8002d48:	4607      	mov	r7, r0
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	bfb8      	it	lt
 8002d4e:	4613      	movlt	r3, r2
 8002d50:	6033      	str	r3, [r6, #0]
 8002d52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d56:	460c      	mov	r4, r1
 8002d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d5c:	b10a      	cbz	r2, 8002d62 <_printf_common+0x26>
 8002d5e:	3301      	adds	r3, #1
 8002d60:	6033      	str	r3, [r6, #0]
 8002d62:	6823      	ldr	r3, [r4, #0]
 8002d64:	0699      	lsls	r1, r3, #26
 8002d66:	bf42      	ittt	mi
 8002d68:	6833      	ldrmi	r3, [r6, #0]
 8002d6a:	3302      	addmi	r3, #2
 8002d6c:	6033      	strmi	r3, [r6, #0]
 8002d6e:	6825      	ldr	r5, [r4, #0]
 8002d70:	f015 0506 	ands.w	r5, r5, #6
 8002d74:	d106      	bne.n	8002d84 <_printf_common+0x48>
 8002d76:	f104 0a19 	add.w	sl, r4, #25
 8002d7a:	68e3      	ldr	r3, [r4, #12]
 8002d7c:	6832      	ldr	r2, [r6, #0]
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	42ab      	cmp	r3, r5
 8002d82:	dc28      	bgt.n	8002dd6 <_printf_common+0x9a>
 8002d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d88:	1e13      	subs	r3, r2, #0
 8002d8a:	6822      	ldr	r2, [r4, #0]
 8002d8c:	bf18      	it	ne
 8002d8e:	2301      	movne	r3, #1
 8002d90:	0692      	lsls	r2, r2, #26
 8002d92:	d42d      	bmi.n	8002df0 <_printf_common+0xb4>
 8002d94:	4649      	mov	r1, r9
 8002d96:	4638      	mov	r0, r7
 8002d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d9c:	47c0      	blx	r8
 8002d9e:	3001      	adds	r0, #1
 8002da0:	d020      	beq.n	8002de4 <_printf_common+0xa8>
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	68e5      	ldr	r5, [r4, #12]
 8002da6:	f003 0306 	and.w	r3, r3, #6
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf18      	it	ne
 8002dae:	2500      	movne	r5, #0
 8002db0:	6832      	ldr	r2, [r6, #0]
 8002db2:	f04f 0600 	mov.w	r6, #0
 8002db6:	68a3      	ldr	r3, [r4, #8]
 8002db8:	bf08      	it	eq
 8002dba:	1aad      	subeq	r5, r5, r2
 8002dbc:	6922      	ldr	r2, [r4, #16]
 8002dbe:	bf08      	it	eq
 8002dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	bfc4      	itt	gt
 8002dc8:	1a9b      	subgt	r3, r3, r2
 8002dca:	18ed      	addgt	r5, r5, r3
 8002dcc:	341a      	adds	r4, #26
 8002dce:	42b5      	cmp	r5, r6
 8002dd0:	d11a      	bne.n	8002e08 <_printf_common+0xcc>
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e008      	b.n	8002de8 <_printf_common+0xac>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	4652      	mov	r2, sl
 8002dda:	4649      	mov	r1, r9
 8002ddc:	4638      	mov	r0, r7
 8002dde:	47c0      	blx	r8
 8002de0:	3001      	adds	r0, #1
 8002de2:	d103      	bne.n	8002dec <_printf_common+0xb0>
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dec:	3501      	adds	r5, #1
 8002dee:	e7c4      	b.n	8002d7a <_printf_common+0x3e>
 8002df0:	2030      	movs	r0, #48	; 0x30
 8002df2:	18e1      	adds	r1, r4, r3
 8002df4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dfe:	4422      	add	r2, r4
 8002e00:	3302      	adds	r3, #2
 8002e02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e06:	e7c5      	b.n	8002d94 <_printf_common+0x58>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4622      	mov	r2, r4
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	4638      	mov	r0, r7
 8002e10:	47c0      	blx	r8
 8002e12:	3001      	adds	r0, #1
 8002e14:	d0e6      	beq.n	8002de4 <_printf_common+0xa8>
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7d9      	b.n	8002dce <_printf_common+0x92>
	...

08002e1c <_printf_i>:
 8002e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e20:	460c      	mov	r4, r1
 8002e22:	7e27      	ldrb	r7, [r4, #24]
 8002e24:	4691      	mov	r9, r2
 8002e26:	2f78      	cmp	r7, #120	; 0x78
 8002e28:	4680      	mov	r8, r0
 8002e2a:	469a      	mov	sl, r3
 8002e2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e32:	d807      	bhi.n	8002e44 <_printf_i+0x28>
 8002e34:	2f62      	cmp	r7, #98	; 0x62
 8002e36:	d80a      	bhi.n	8002e4e <_printf_i+0x32>
 8002e38:	2f00      	cmp	r7, #0
 8002e3a:	f000 80d9 	beq.w	8002ff0 <_printf_i+0x1d4>
 8002e3e:	2f58      	cmp	r7, #88	; 0x58
 8002e40:	f000 80a4 	beq.w	8002f8c <_printf_i+0x170>
 8002e44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e4c:	e03a      	b.n	8002ec4 <_printf_i+0xa8>
 8002e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e52:	2b15      	cmp	r3, #21
 8002e54:	d8f6      	bhi.n	8002e44 <_printf_i+0x28>
 8002e56:	a001      	add	r0, pc, #4	; (adr r0, 8002e5c <_printf_i+0x40>)
 8002e58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e5c:	08002eb5 	.word	0x08002eb5
 8002e60:	08002ec9 	.word	0x08002ec9
 8002e64:	08002e45 	.word	0x08002e45
 8002e68:	08002e45 	.word	0x08002e45
 8002e6c:	08002e45 	.word	0x08002e45
 8002e70:	08002e45 	.word	0x08002e45
 8002e74:	08002ec9 	.word	0x08002ec9
 8002e78:	08002e45 	.word	0x08002e45
 8002e7c:	08002e45 	.word	0x08002e45
 8002e80:	08002e45 	.word	0x08002e45
 8002e84:	08002e45 	.word	0x08002e45
 8002e88:	08002fd7 	.word	0x08002fd7
 8002e8c:	08002ef9 	.word	0x08002ef9
 8002e90:	08002fb9 	.word	0x08002fb9
 8002e94:	08002e45 	.word	0x08002e45
 8002e98:	08002e45 	.word	0x08002e45
 8002e9c:	08002ff9 	.word	0x08002ff9
 8002ea0:	08002e45 	.word	0x08002e45
 8002ea4:	08002ef9 	.word	0x08002ef9
 8002ea8:	08002e45 	.word	0x08002e45
 8002eac:	08002e45 	.word	0x08002e45
 8002eb0:	08002fc1 	.word	0x08002fc1
 8002eb4:	680b      	ldr	r3, [r1, #0]
 8002eb6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002eba:	1d1a      	adds	r2, r3, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	600a      	str	r2, [r1, #0]
 8002ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0a4      	b.n	8003012 <_printf_i+0x1f6>
 8002ec8:	6825      	ldr	r5, [r4, #0]
 8002eca:	6808      	ldr	r0, [r1, #0]
 8002ecc:	062e      	lsls	r6, r5, #24
 8002ece:	f100 0304 	add.w	r3, r0, #4
 8002ed2:	d50a      	bpl.n	8002eea <_printf_i+0xce>
 8002ed4:	6805      	ldr	r5, [r0, #0]
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	2d00      	cmp	r5, #0
 8002eda:	da03      	bge.n	8002ee4 <_printf_i+0xc8>
 8002edc:	232d      	movs	r3, #45	; 0x2d
 8002ede:	426d      	negs	r5, r5
 8002ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ee4:	230a      	movs	r3, #10
 8002ee6:	485e      	ldr	r0, [pc, #376]	; (8003060 <_printf_i+0x244>)
 8002ee8:	e019      	b.n	8002f1e <_printf_i+0x102>
 8002eea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002eee:	6805      	ldr	r5, [r0, #0]
 8002ef0:	600b      	str	r3, [r1, #0]
 8002ef2:	bf18      	it	ne
 8002ef4:	b22d      	sxthne	r5, r5
 8002ef6:	e7ef      	b.n	8002ed8 <_printf_i+0xbc>
 8002ef8:	680b      	ldr	r3, [r1, #0]
 8002efa:	6825      	ldr	r5, [r4, #0]
 8002efc:	1d18      	adds	r0, r3, #4
 8002efe:	6008      	str	r0, [r1, #0]
 8002f00:	0628      	lsls	r0, r5, #24
 8002f02:	d501      	bpl.n	8002f08 <_printf_i+0xec>
 8002f04:	681d      	ldr	r5, [r3, #0]
 8002f06:	e002      	b.n	8002f0e <_printf_i+0xf2>
 8002f08:	0669      	lsls	r1, r5, #25
 8002f0a:	d5fb      	bpl.n	8002f04 <_printf_i+0xe8>
 8002f0c:	881d      	ldrh	r5, [r3, #0]
 8002f0e:	2f6f      	cmp	r7, #111	; 0x6f
 8002f10:	bf0c      	ite	eq
 8002f12:	2308      	moveq	r3, #8
 8002f14:	230a      	movne	r3, #10
 8002f16:	4852      	ldr	r0, [pc, #328]	; (8003060 <_printf_i+0x244>)
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f1e:	6866      	ldr	r6, [r4, #4]
 8002f20:	2e00      	cmp	r6, #0
 8002f22:	bfa8      	it	ge
 8002f24:	6821      	ldrge	r1, [r4, #0]
 8002f26:	60a6      	str	r6, [r4, #8]
 8002f28:	bfa4      	itt	ge
 8002f2a:	f021 0104 	bicge.w	r1, r1, #4
 8002f2e:	6021      	strge	r1, [r4, #0]
 8002f30:	b90d      	cbnz	r5, 8002f36 <_printf_i+0x11a>
 8002f32:	2e00      	cmp	r6, #0
 8002f34:	d04d      	beq.n	8002fd2 <_printf_i+0x1b6>
 8002f36:	4616      	mov	r6, r2
 8002f38:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f3c:	fb03 5711 	mls	r7, r3, r1, r5
 8002f40:	5dc7      	ldrb	r7, [r0, r7]
 8002f42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f46:	462f      	mov	r7, r5
 8002f48:	42bb      	cmp	r3, r7
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	d9f4      	bls.n	8002f38 <_printf_i+0x11c>
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d10b      	bne.n	8002f6a <_printf_i+0x14e>
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	07df      	lsls	r7, r3, #31
 8002f56:	d508      	bpl.n	8002f6a <_printf_i+0x14e>
 8002f58:	6923      	ldr	r3, [r4, #16]
 8002f5a:	6861      	ldr	r1, [r4, #4]
 8002f5c:	4299      	cmp	r1, r3
 8002f5e:	bfde      	ittt	le
 8002f60:	2330      	movle	r3, #48	; 0x30
 8002f62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f6a:	1b92      	subs	r2, r2, r6
 8002f6c:	6122      	str	r2, [r4, #16]
 8002f6e:	464b      	mov	r3, r9
 8002f70:	4621      	mov	r1, r4
 8002f72:	4640      	mov	r0, r8
 8002f74:	f8cd a000 	str.w	sl, [sp]
 8002f78:	aa03      	add	r2, sp, #12
 8002f7a:	f7ff fedf 	bl	8002d3c <_printf_common>
 8002f7e:	3001      	adds	r0, #1
 8002f80:	d14c      	bne.n	800301c <_printf_i+0x200>
 8002f82:	f04f 30ff 	mov.w	r0, #4294967295
 8002f86:	b004      	add	sp, #16
 8002f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8c:	4834      	ldr	r0, [pc, #208]	; (8003060 <_printf_i+0x244>)
 8002f8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f92:	680e      	ldr	r6, [r1, #0]
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f9a:	061f      	lsls	r7, r3, #24
 8002f9c:	600e      	str	r6, [r1, #0]
 8002f9e:	d514      	bpl.n	8002fca <_printf_i+0x1ae>
 8002fa0:	07d9      	lsls	r1, r3, #31
 8002fa2:	bf44      	itt	mi
 8002fa4:	f043 0320 	orrmi.w	r3, r3, #32
 8002fa8:	6023      	strmi	r3, [r4, #0]
 8002faa:	b91d      	cbnz	r5, 8002fb4 <_printf_i+0x198>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	f023 0320 	bic.w	r3, r3, #32
 8002fb2:	6023      	str	r3, [r4, #0]
 8002fb4:	2310      	movs	r3, #16
 8002fb6:	e7af      	b.n	8002f18 <_printf_i+0xfc>
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	f043 0320 	orr.w	r3, r3, #32
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	2378      	movs	r3, #120	; 0x78
 8002fc2:	4828      	ldr	r0, [pc, #160]	; (8003064 <_printf_i+0x248>)
 8002fc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fc8:	e7e3      	b.n	8002f92 <_printf_i+0x176>
 8002fca:	065e      	lsls	r6, r3, #25
 8002fcc:	bf48      	it	mi
 8002fce:	b2ad      	uxthmi	r5, r5
 8002fd0:	e7e6      	b.n	8002fa0 <_printf_i+0x184>
 8002fd2:	4616      	mov	r6, r2
 8002fd4:	e7bb      	b.n	8002f4e <_printf_i+0x132>
 8002fd6:	680b      	ldr	r3, [r1, #0]
 8002fd8:	6826      	ldr	r6, [r4, #0]
 8002fda:	1d1d      	adds	r5, r3, #4
 8002fdc:	6960      	ldr	r0, [r4, #20]
 8002fde:	600d      	str	r5, [r1, #0]
 8002fe0:	0635      	lsls	r5, r6, #24
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	d501      	bpl.n	8002fea <_printf_i+0x1ce>
 8002fe6:	6018      	str	r0, [r3, #0]
 8002fe8:	e002      	b.n	8002ff0 <_printf_i+0x1d4>
 8002fea:	0671      	lsls	r1, r6, #25
 8002fec:	d5fb      	bpl.n	8002fe6 <_printf_i+0x1ca>
 8002fee:	8018      	strh	r0, [r3, #0]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4616      	mov	r6, r2
 8002ff4:	6123      	str	r3, [r4, #16]
 8002ff6:	e7ba      	b.n	8002f6e <_printf_i+0x152>
 8002ff8:	680b      	ldr	r3, [r1, #0]
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	600a      	str	r2, [r1, #0]
 8002ffe:	681e      	ldr	r6, [r3, #0]
 8003000:	2100      	movs	r1, #0
 8003002:	4630      	mov	r0, r6
 8003004:	6862      	ldr	r2, [r4, #4]
 8003006:	f000 f82f 	bl	8003068 <memchr>
 800300a:	b108      	cbz	r0, 8003010 <_printf_i+0x1f4>
 800300c:	1b80      	subs	r0, r0, r6
 800300e:	6060      	str	r0, [r4, #4]
 8003010:	6863      	ldr	r3, [r4, #4]
 8003012:	6123      	str	r3, [r4, #16]
 8003014:	2300      	movs	r3, #0
 8003016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800301a:	e7a8      	b.n	8002f6e <_printf_i+0x152>
 800301c:	4632      	mov	r2, r6
 800301e:	4649      	mov	r1, r9
 8003020:	4640      	mov	r0, r8
 8003022:	6923      	ldr	r3, [r4, #16]
 8003024:	47d0      	blx	sl
 8003026:	3001      	adds	r0, #1
 8003028:	d0ab      	beq.n	8002f82 <_printf_i+0x166>
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	079b      	lsls	r3, r3, #30
 800302e:	d413      	bmi.n	8003058 <_printf_i+0x23c>
 8003030:	68e0      	ldr	r0, [r4, #12]
 8003032:	9b03      	ldr	r3, [sp, #12]
 8003034:	4298      	cmp	r0, r3
 8003036:	bfb8      	it	lt
 8003038:	4618      	movlt	r0, r3
 800303a:	e7a4      	b.n	8002f86 <_printf_i+0x16a>
 800303c:	2301      	movs	r3, #1
 800303e:	4632      	mov	r2, r6
 8003040:	4649      	mov	r1, r9
 8003042:	4640      	mov	r0, r8
 8003044:	47d0      	blx	sl
 8003046:	3001      	adds	r0, #1
 8003048:	d09b      	beq.n	8002f82 <_printf_i+0x166>
 800304a:	3501      	adds	r5, #1
 800304c:	68e3      	ldr	r3, [r4, #12]
 800304e:	9903      	ldr	r1, [sp, #12]
 8003050:	1a5b      	subs	r3, r3, r1
 8003052:	42ab      	cmp	r3, r5
 8003054:	dcf2      	bgt.n	800303c <_printf_i+0x220>
 8003056:	e7eb      	b.n	8003030 <_printf_i+0x214>
 8003058:	2500      	movs	r5, #0
 800305a:	f104 0619 	add.w	r6, r4, #25
 800305e:	e7f5      	b.n	800304c <_printf_i+0x230>
 8003060:	08003539 	.word	0x08003539
 8003064:	0800354a 	.word	0x0800354a

08003068 <memchr>:
 8003068:	4603      	mov	r3, r0
 800306a:	b510      	push	{r4, lr}
 800306c:	b2c9      	uxtb	r1, r1
 800306e:	4402      	add	r2, r0
 8003070:	4293      	cmp	r3, r2
 8003072:	4618      	mov	r0, r3
 8003074:	d101      	bne.n	800307a <memchr+0x12>
 8003076:	2000      	movs	r0, #0
 8003078:	e003      	b.n	8003082 <memchr+0x1a>
 800307a:	7804      	ldrb	r4, [r0, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	428c      	cmp	r4, r1
 8003080:	d1f6      	bne.n	8003070 <memchr+0x8>
 8003082:	bd10      	pop	{r4, pc}

08003084 <memcpy>:
 8003084:	440a      	add	r2, r1
 8003086:	4291      	cmp	r1, r2
 8003088:	f100 33ff 	add.w	r3, r0, #4294967295
 800308c:	d100      	bne.n	8003090 <memcpy+0xc>
 800308e:	4770      	bx	lr
 8003090:	b510      	push	{r4, lr}
 8003092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003096:	4291      	cmp	r1, r2
 8003098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800309c:	d1f9      	bne.n	8003092 <memcpy+0xe>
 800309e:	bd10      	pop	{r4, pc}

080030a0 <memmove>:
 80030a0:	4288      	cmp	r0, r1
 80030a2:	b510      	push	{r4, lr}
 80030a4:	eb01 0402 	add.w	r4, r1, r2
 80030a8:	d902      	bls.n	80030b0 <memmove+0x10>
 80030aa:	4284      	cmp	r4, r0
 80030ac:	4623      	mov	r3, r4
 80030ae:	d807      	bhi.n	80030c0 <memmove+0x20>
 80030b0:	1e43      	subs	r3, r0, #1
 80030b2:	42a1      	cmp	r1, r4
 80030b4:	d008      	beq.n	80030c8 <memmove+0x28>
 80030b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030be:	e7f8      	b.n	80030b2 <memmove+0x12>
 80030c0:	4601      	mov	r1, r0
 80030c2:	4402      	add	r2, r0
 80030c4:	428a      	cmp	r2, r1
 80030c6:	d100      	bne.n	80030ca <memmove+0x2a>
 80030c8:	bd10      	pop	{r4, pc}
 80030ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030d2:	e7f7      	b.n	80030c4 <memmove+0x24>

080030d4 <_free_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	4605      	mov	r5, r0
 80030d8:	2900      	cmp	r1, #0
 80030da:	d043      	beq.n	8003164 <_free_r+0x90>
 80030dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030e0:	1f0c      	subs	r4, r1, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bfb8      	it	lt
 80030e6:	18e4      	addlt	r4, r4, r3
 80030e8:	f000 f8d0 	bl	800328c <__malloc_lock>
 80030ec:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <_free_r+0x94>)
 80030ee:	6813      	ldr	r3, [r2, #0]
 80030f0:	4610      	mov	r0, r2
 80030f2:	b933      	cbnz	r3, 8003102 <_free_r+0x2e>
 80030f4:	6063      	str	r3, [r4, #4]
 80030f6:	6014      	str	r4, [r2, #0]
 80030f8:	4628      	mov	r0, r5
 80030fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030fe:	f000 b8cb 	b.w	8003298 <__malloc_unlock>
 8003102:	42a3      	cmp	r3, r4
 8003104:	d90a      	bls.n	800311c <_free_r+0x48>
 8003106:	6821      	ldr	r1, [r4, #0]
 8003108:	1862      	adds	r2, r4, r1
 800310a:	4293      	cmp	r3, r2
 800310c:	bf01      	itttt	eq
 800310e:	681a      	ldreq	r2, [r3, #0]
 8003110:	685b      	ldreq	r3, [r3, #4]
 8003112:	1852      	addeq	r2, r2, r1
 8003114:	6022      	streq	r2, [r4, #0]
 8003116:	6063      	str	r3, [r4, #4]
 8003118:	6004      	str	r4, [r0, #0]
 800311a:	e7ed      	b.n	80030f8 <_free_r+0x24>
 800311c:	461a      	mov	r2, r3
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	b10b      	cbz	r3, 8003126 <_free_r+0x52>
 8003122:	42a3      	cmp	r3, r4
 8003124:	d9fa      	bls.n	800311c <_free_r+0x48>
 8003126:	6811      	ldr	r1, [r2, #0]
 8003128:	1850      	adds	r0, r2, r1
 800312a:	42a0      	cmp	r0, r4
 800312c:	d10b      	bne.n	8003146 <_free_r+0x72>
 800312e:	6820      	ldr	r0, [r4, #0]
 8003130:	4401      	add	r1, r0
 8003132:	1850      	adds	r0, r2, r1
 8003134:	4283      	cmp	r3, r0
 8003136:	6011      	str	r1, [r2, #0]
 8003138:	d1de      	bne.n	80030f8 <_free_r+0x24>
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	4401      	add	r1, r0
 8003140:	6011      	str	r1, [r2, #0]
 8003142:	6053      	str	r3, [r2, #4]
 8003144:	e7d8      	b.n	80030f8 <_free_r+0x24>
 8003146:	d902      	bls.n	800314e <_free_r+0x7a>
 8003148:	230c      	movs	r3, #12
 800314a:	602b      	str	r3, [r5, #0]
 800314c:	e7d4      	b.n	80030f8 <_free_r+0x24>
 800314e:	6820      	ldr	r0, [r4, #0]
 8003150:	1821      	adds	r1, r4, r0
 8003152:	428b      	cmp	r3, r1
 8003154:	bf01      	itttt	eq
 8003156:	6819      	ldreq	r1, [r3, #0]
 8003158:	685b      	ldreq	r3, [r3, #4]
 800315a:	1809      	addeq	r1, r1, r0
 800315c:	6021      	streq	r1, [r4, #0]
 800315e:	6063      	str	r3, [r4, #4]
 8003160:	6054      	str	r4, [r2, #4]
 8003162:	e7c9      	b.n	80030f8 <_free_r+0x24>
 8003164:	bd38      	pop	{r3, r4, r5, pc}
 8003166:	bf00      	nop
 8003168:	200000a0 	.word	0x200000a0

0800316c <_malloc_r>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	1ccd      	adds	r5, r1, #3
 8003170:	f025 0503 	bic.w	r5, r5, #3
 8003174:	3508      	adds	r5, #8
 8003176:	2d0c      	cmp	r5, #12
 8003178:	bf38      	it	cc
 800317a:	250c      	movcc	r5, #12
 800317c:	2d00      	cmp	r5, #0
 800317e:	4606      	mov	r6, r0
 8003180:	db01      	blt.n	8003186 <_malloc_r+0x1a>
 8003182:	42a9      	cmp	r1, r5
 8003184:	d903      	bls.n	800318e <_malloc_r+0x22>
 8003186:	230c      	movs	r3, #12
 8003188:	6033      	str	r3, [r6, #0]
 800318a:	2000      	movs	r0, #0
 800318c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800318e:	f000 f87d 	bl	800328c <__malloc_lock>
 8003192:	4921      	ldr	r1, [pc, #132]	; (8003218 <_malloc_r+0xac>)
 8003194:	680a      	ldr	r2, [r1, #0]
 8003196:	4614      	mov	r4, r2
 8003198:	b99c      	cbnz	r4, 80031c2 <_malloc_r+0x56>
 800319a:	4f20      	ldr	r7, [pc, #128]	; (800321c <_malloc_r+0xb0>)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	b923      	cbnz	r3, 80031aa <_malloc_r+0x3e>
 80031a0:	4621      	mov	r1, r4
 80031a2:	4630      	mov	r0, r6
 80031a4:	f000 f862 	bl	800326c <_sbrk_r>
 80031a8:	6038      	str	r0, [r7, #0]
 80031aa:	4629      	mov	r1, r5
 80031ac:	4630      	mov	r0, r6
 80031ae:	f000 f85d 	bl	800326c <_sbrk_r>
 80031b2:	1c43      	adds	r3, r0, #1
 80031b4:	d123      	bne.n	80031fe <_malloc_r+0x92>
 80031b6:	230c      	movs	r3, #12
 80031b8:	4630      	mov	r0, r6
 80031ba:	6033      	str	r3, [r6, #0]
 80031bc:	f000 f86c 	bl	8003298 <__malloc_unlock>
 80031c0:	e7e3      	b.n	800318a <_malloc_r+0x1e>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	1b5b      	subs	r3, r3, r5
 80031c6:	d417      	bmi.n	80031f8 <_malloc_r+0x8c>
 80031c8:	2b0b      	cmp	r3, #11
 80031ca:	d903      	bls.n	80031d4 <_malloc_r+0x68>
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	441c      	add	r4, r3
 80031d0:	6025      	str	r5, [r4, #0]
 80031d2:	e004      	b.n	80031de <_malloc_r+0x72>
 80031d4:	6863      	ldr	r3, [r4, #4]
 80031d6:	42a2      	cmp	r2, r4
 80031d8:	bf0c      	ite	eq
 80031da:	600b      	streq	r3, [r1, #0]
 80031dc:	6053      	strne	r3, [r2, #4]
 80031de:	4630      	mov	r0, r6
 80031e0:	f000 f85a 	bl	8003298 <__malloc_unlock>
 80031e4:	f104 000b 	add.w	r0, r4, #11
 80031e8:	1d23      	adds	r3, r4, #4
 80031ea:	f020 0007 	bic.w	r0, r0, #7
 80031ee:	1ac2      	subs	r2, r0, r3
 80031f0:	d0cc      	beq.n	800318c <_malloc_r+0x20>
 80031f2:	1a1b      	subs	r3, r3, r0
 80031f4:	50a3      	str	r3, [r4, r2]
 80031f6:	e7c9      	b.n	800318c <_malloc_r+0x20>
 80031f8:	4622      	mov	r2, r4
 80031fa:	6864      	ldr	r4, [r4, #4]
 80031fc:	e7cc      	b.n	8003198 <_malloc_r+0x2c>
 80031fe:	1cc4      	adds	r4, r0, #3
 8003200:	f024 0403 	bic.w	r4, r4, #3
 8003204:	42a0      	cmp	r0, r4
 8003206:	d0e3      	beq.n	80031d0 <_malloc_r+0x64>
 8003208:	1a21      	subs	r1, r4, r0
 800320a:	4630      	mov	r0, r6
 800320c:	f000 f82e 	bl	800326c <_sbrk_r>
 8003210:	3001      	adds	r0, #1
 8003212:	d1dd      	bne.n	80031d0 <_malloc_r+0x64>
 8003214:	e7cf      	b.n	80031b6 <_malloc_r+0x4a>
 8003216:	bf00      	nop
 8003218:	200000a0 	.word	0x200000a0
 800321c:	200000a4 	.word	0x200000a4

08003220 <_realloc_r>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	4607      	mov	r7, r0
 8003224:	4614      	mov	r4, r2
 8003226:	460e      	mov	r6, r1
 8003228:	b921      	cbnz	r1, 8003234 <_realloc_r+0x14>
 800322a:	4611      	mov	r1, r2
 800322c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003230:	f7ff bf9c 	b.w	800316c <_malloc_r>
 8003234:	b922      	cbnz	r2, 8003240 <_realloc_r+0x20>
 8003236:	f7ff ff4d 	bl	80030d4 <_free_r>
 800323a:	4625      	mov	r5, r4
 800323c:	4628      	mov	r0, r5
 800323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003240:	f000 f830 	bl	80032a4 <_malloc_usable_size_r>
 8003244:	42a0      	cmp	r0, r4
 8003246:	d20f      	bcs.n	8003268 <_realloc_r+0x48>
 8003248:	4621      	mov	r1, r4
 800324a:	4638      	mov	r0, r7
 800324c:	f7ff ff8e 	bl	800316c <_malloc_r>
 8003250:	4605      	mov	r5, r0
 8003252:	2800      	cmp	r0, #0
 8003254:	d0f2      	beq.n	800323c <_realloc_r+0x1c>
 8003256:	4631      	mov	r1, r6
 8003258:	4622      	mov	r2, r4
 800325a:	f7ff ff13 	bl	8003084 <memcpy>
 800325e:	4631      	mov	r1, r6
 8003260:	4638      	mov	r0, r7
 8003262:	f7ff ff37 	bl	80030d4 <_free_r>
 8003266:	e7e9      	b.n	800323c <_realloc_r+0x1c>
 8003268:	4635      	mov	r5, r6
 800326a:	e7e7      	b.n	800323c <_realloc_r+0x1c>

0800326c <_sbrk_r>:
 800326c:	b538      	push	{r3, r4, r5, lr}
 800326e:	2300      	movs	r3, #0
 8003270:	4d05      	ldr	r5, [pc, #20]	; (8003288 <_sbrk_r+0x1c>)
 8003272:	4604      	mov	r4, r0
 8003274:	4608      	mov	r0, r1
 8003276:	602b      	str	r3, [r5, #0]
 8003278:	f7ff fb5a 	bl	8002930 <_sbrk>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d102      	bne.n	8003286 <_sbrk_r+0x1a>
 8003280:	682b      	ldr	r3, [r5, #0]
 8003282:	b103      	cbz	r3, 8003286 <_sbrk_r+0x1a>
 8003284:	6023      	str	r3, [r4, #0]
 8003286:	bd38      	pop	{r3, r4, r5, pc}
 8003288:	200003f0 	.word	0x200003f0

0800328c <__malloc_lock>:
 800328c:	4801      	ldr	r0, [pc, #4]	; (8003294 <__malloc_lock+0x8>)
 800328e:	f000 b811 	b.w	80032b4 <__retarget_lock_acquire_recursive>
 8003292:	bf00      	nop
 8003294:	200003f8 	.word	0x200003f8

08003298 <__malloc_unlock>:
 8003298:	4801      	ldr	r0, [pc, #4]	; (80032a0 <__malloc_unlock+0x8>)
 800329a:	f000 b80c 	b.w	80032b6 <__retarget_lock_release_recursive>
 800329e:	bf00      	nop
 80032a0:	200003f8 	.word	0x200003f8

080032a4 <_malloc_usable_size_r>:
 80032a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a8:	1f18      	subs	r0, r3, #4
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	bfbc      	itt	lt
 80032ae:	580b      	ldrlt	r3, [r1, r0]
 80032b0:	18c0      	addlt	r0, r0, r3
 80032b2:	4770      	bx	lr

080032b4 <__retarget_lock_acquire_recursive>:
 80032b4:	4770      	bx	lr

080032b6 <__retarget_lock_release_recursive>:
 80032b6:	4770      	bx	lr

080032b8 <_init>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	bf00      	nop
 80032bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032be:	bc08      	pop	{r3}
 80032c0:	469e      	mov	lr, r3
 80032c2:	4770      	bx	lr

080032c4 <_fini>:
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	bf00      	nop
 80032c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ca:	bc08      	pop	{r3}
 80032cc:	469e      	mov	lr, r3
 80032ce:	4770      	bx	lr
