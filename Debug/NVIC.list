
NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a28  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e1c  08003e1c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003e1c  08003e1c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e1c  08003e1c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000068  08003e8c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08003e8c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006099  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fae  00000000  00000000  0002612a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000418  00000000  00000000  000270d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000370  00000000  00000000  000274f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b96  00000000  00000000  00027860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002c77  00000000  00000000  0002a3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000bb41  00000000  00000000  0002d06d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00038bae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013f8  00000000  00000000  00038c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000068 	.word	0x20000068
 800014c:	00000000 	.word	0x00000000
 8000150:	08003b40 	.word	0x08003b40

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000006c 	.word	0x2000006c
 800016c:	08003b40 	.word	0x08003b40

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_dmul>:
 8000180:	b570      	push	{r4, r5, r6, lr}
 8000182:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000186:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800018a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800018e:	bf1d      	ittte	ne
 8000190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000194:	ea94 0f0c 	teqne	r4, ip
 8000198:	ea95 0f0c 	teqne	r5, ip
 800019c:	f000 f8de 	bleq	800035c <__aeabi_dmul+0x1dc>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea81 0603 	eor.w	r6, r1, r3
 80001a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001b2:	bf18      	it	ne
 80001b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001c0:	d038      	beq.n	8000234 <__aeabi_dmul+0xb4>
 80001c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001c6:	f04f 0500 	mov.w	r5, #0
 80001ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001d6:	f04f 0600 	mov.w	r6, #0
 80001da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001de:	f09c 0f00 	teq	ip, #0
 80001e2:	bf18      	it	ne
 80001e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001f4:	d204      	bcs.n	8000200 <__aeabi_dmul+0x80>
 80001f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001fa:	416d      	adcs	r5, r5
 80001fc:	eb46 0606 	adc.w	r6, r6, r6
 8000200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800020c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000214:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000218:	bf88      	it	hi
 800021a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800021e:	d81e      	bhi.n	800025e <__aeabi_dmul+0xde>
 8000220:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000224:	bf08      	it	eq
 8000226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800022a:	f150 0000 	adcs.w	r0, r0, #0
 800022e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000232:	bd70      	pop	{r4, r5, r6, pc}
 8000234:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000238:	ea46 0101 	orr.w	r1, r6, r1
 800023c:	ea40 0002 	orr.w	r0, r0, r2
 8000240:	ea81 0103 	eor.w	r1, r1, r3
 8000244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000248:	bfc2      	ittt	gt
 800024a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800024e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000252:	bd70      	popgt	{r4, r5, r6, pc}
 8000254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000258:	f04f 0e00 	mov.w	lr, #0
 800025c:	3c01      	subs	r4, #1
 800025e:	f300 80ab 	bgt.w	80003b8 <__aeabi_dmul+0x238>
 8000262:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000266:	bfde      	ittt	le
 8000268:	2000      	movle	r0, #0
 800026a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800026e:	bd70      	pople	{r4, r5, r6, pc}
 8000270:	f1c4 0400 	rsb	r4, r4, #0
 8000274:	3c20      	subs	r4, #32
 8000276:	da35      	bge.n	80002e4 <__aeabi_dmul+0x164>
 8000278:	340c      	adds	r4, #12
 800027a:	dc1b      	bgt.n	80002b4 <__aeabi_dmul+0x134>
 800027c:	f104 0414 	add.w	r4, r4, #20
 8000280:	f1c4 0520 	rsb	r5, r4, #32
 8000284:	fa00 f305 	lsl.w	r3, r0, r5
 8000288:	fa20 f004 	lsr.w	r0, r0, r4
 800028c:	fa01 f205 	lsl.w	r2, r1, r5
 8000290:	ea40 0002 	orr.w	r0, r0, r2
 8000294:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	fa21 f604 	lsr.w	r6, r1, r4
 80002a4:	eb42 0106 	adc.w	r1, r2, r6
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 040c 	rsb	r4, r4, #12
 80002b8:	f1c4 0520 	rsb	r5, r4, #32
 80002bc:	fa00 f304 	lsl.w	r3, r0, r4
 80002c0:	fa20 f005 	lsr.w	r0, r0, r5
 80002c4:	fa01 f204 	lsl.w	r2, r1, r4
 80002c8:	ea40 0002 	orr.w	r0, r0, r2
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002dc:	bf08      	it	eq
 80002de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f1c4 0520 	rsb	r5, r4, #32
 80002e8:	fa00 f205 	lsl.w	r2, r0, r5
 80002ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80002f0:	fa20 f304 	lsr.w	r3, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea43 0302 	orr.w	r3, r3, r2
 80002fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000304:	fa21 f204 	lsr.w	r2, r1, r4
 8000308:	ea20 0002 	bic.w	r0, r0, r2
 800030c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f094 0f00 	teq	r4, #0
 8000320:	d10f      	bne.n	8000342 <__aeabi_dmul+0x1c2>
 8000322:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000326:	0040      	lsls	r0, r0, #1
 8000328:	eb41 0101 	adc.w	r1, r1, r1
 800032c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3c01      	subeq	r4, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1a6>
 8000336:	ea41 0106 	orr.w	r1, r1, r6
 800033a:	f095 0f00 	teq	r5, #0
 800033e:	bf18      	it	ne
 8000340:	4770      	bxne	lr
 8000342:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000346:	0052      	lsls	r2, r2, #1
 8000348:	eb43 0303 	adc.w	r3, r3, r3
 800034c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000350:	bf08      	it	eq
 8000352:	3d01      	subeq	r5, #1
 8000354:	d0f7      	beq.n	8000346 <__aeabi_dmul+0x1c6>
 8000356:	ea43 0306 	orr.w	r3, r3, r6
 800035a:	4770      	bx	lr
 800035c:	ea94 0f0c 	teq	r4, ip
 8000360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000364:	bf18      	it	ne
 8000366:	ea95 0f0c 	teqne	r5, ip
 800036a:	d00c      	beq.n	8000386 <__aeabi_dmul+0x206>
 800036c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000370:	bf18      	it	ne
 8000372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000376:	d1d1      	bne.n	800031c <__aeabi_dmul+0x19c>
 8000378:	ea81 0103 	eor.w	r1, r1, r3
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	f04f 0000 	mov.w	r0, #0
 8000384:	bd70      	pop	{r4, r5, r6, pc}
 8000386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800038a:	bf06      	itte	eq
 800038c:	4610      	moveq	r0, r2
 800038e:	4619      	moveq	r1, r3
 8000390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000394:	d019      	beq.n	80003ca <__aeabi_dmul+0x24a>
 8000396:	ea94 0f0c 	teq	r4, ip
 800039a:	d102      	bne.n	80003a2 <__aeabi_dmul+0x222>
 800039c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003a0:	d113      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003a2:	ea95 0f0c 	teq	r5, ip
 80003a6:	d105      	bne.n	80003b4 <__aeabi_dmul+0x234>
 80003a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003ac:	bf1c      	itt	ne
 80003ae:	4610      	movne	r0, r2
 80003b0:	4619      	movne	r1, r3
 80003b2:	d10a      	bne.n	80003ca <__aeabi_dmul+0x24a>
 80003b4:	ea81 0103 	eor.w	r1, r1, r3
 80003b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd70      	pop	{r4, r5, r6, pc}
 80003ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003d2:	bd70      	pop	{r4, r5, r6, pc}

080003d4 <__aeabi_drsub>:
 80003d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	e002      	b.n	80003e0 <__adddf3>
 80003da:	bf00      	nop

080003dc <__aeabi_dsub>:
 80003dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003e0 <__adddf3>:
 80003e0:	b530      	push	{r4, r5, lr}
 80003e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	bf1f      	itttt	ne
 80003f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000402:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000406:	f000 80e2 	beq.w	80005ce <__adddf3+0x1ee>
 800040a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000412:	bfb8      	it	lt
 8000414:	426d      	neglt	r5, r5
 8000416:	dd0c      	ble.n	8000432 <__adddf3+0x52>
 8000418:	442c      	add	r4, r5
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	ea82 0000 	eor.w	r0, r2, r0
 8000426:	ea83 0101 	eor.w	r1, r3, r1
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	2d36      	cmp	r5, #54	; 0x36
 8000434:	bf88      	it	hi
 8000436:	bd30      	pophi	{r4, r5, pc}
 8000438:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800043c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000440:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000444:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x70>
 800044a:	4240      	negs	r0, r0
 800044c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000450:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000454:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000458:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800045c:	d002      	beq.n	8000464 <__adddf3+0x84>
 800045e:	4252      	negs	r2, r2
 8000460:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000464:	ea94 0f05 	teq	r4, r5
 8000468:	f000 80a7 	beq.w	80005ba <__adddf3+0x1da>
 800046c:	f1a4 0401 	sub.w	r4, r4, #1
 8000470:	f1d5 0e20 	rsbs	lr, r5, #32
 8000474:	db0d      	blt.n	8000492 <__adddf3+0xb2>
 8000476:	fa02 fc0e 	lsl.w	ip, r2, lr
 800047a:	fa22 f205 	lsr.w	r2, r2, r5
 800047e:	1880      	adds	r0, r0, r2
 8000480:	f141 0100 	adc.w	r1, r1, #0
 8000484:	fa03 f20e 	lsl.w	r2, r3, lr
 8000488:	1880      	adds	r0, r0, r2
 800048a:	fa43 f305 	asr.w	r3, r3, r5
 800048e:	4159      	adcs	r1, r3
 8000490:	e00e      	b.n	80004b0 <__adddf3+0xd0>
 8000492:	f1a5 0520 	sub.w	r5, r5, #32
 8000496:	f10e 0e20 	add.w	lr, lr, #32
 800049a:	2a01      	cmp	r2, #1
 800049c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004a0:	bf28      	it	cs
 80004a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a6:	fa43 f305 	asr.w	r3, r3, r5
 80004aa:	18c0      	adds	r0, r0, r3
 80004ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b4:	d507      	bpl.n	80004c6 <__adddf3+0xe6>
 80004b6:	f04f 0e00 	mov.w	lr, #0
 80004ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80004be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ca:	d31b      	bcc.n	8000504 <__adddf3+0x124>
 80004cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004d0:	d30c      	bcc.n	80004ec <__adddf3+0x10c>
 80004d2:	0849      	lsrs	r1, r1, #1
 80004d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004dc:	f104 0401 	add.w	r4, r4, #1
 80004e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004e8:	f080 809a 	bcs.w	8000620 <__adddf3+0x240>
 80004ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004f0:	bf08      	it	eq
 80004f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f6:	f150 0000 	adcs.w	r0, r0, #0
 80004fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fe:	ea41 0105 	orr.w	r1, r1, r5
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000508:	4140      	adcs	r0, r0
 800050a:	eb41 0101 	adc.w	r1, r1, r1
 800050e:	3c01      	subs	r4, #1
 8000510:	bf28      	it	cs
 8000512:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000516:	d2e9      	bcs.n	80004ec <__adddf3+0x10c>
 8000518:	f091 0f00 	teq	r1, #0
 800051c:	bf04      	itt	eq
 800051e:	4601      	moveq	r1, r0
 8000520:	2000      	moveq	r0, #0
 8000522:	fab1 f381 	clz	r3, r1
 8000526:	bf08      	it	eq
 8000528:	3320      	addeq	r3, #32
 800052a:	f1a3 030b 	sub.w	r3, r3, #11
 800052e:	f1b3 0220 	subs.w	r2, r3, #32
 8000532:	da0c      	bge.n	800054e <__adddf3+0x16e>
 8000534:	320c      	adds	r2, #12
 8000536:	dd08      	ble.n	800054a <__adddf3+0x16a>
 8000538:	f102 0c14 	add.w	ip, r2, #20
 800053c:	f1c2 020c 	rsb	r2, r2, #12
 8000540:	fa01 f00c 	lsl.w	r0, r1, ip
 8000544:	fa21 f102 	lsr.w	r1, r1, r2
 8000548:	e00c      	b.n	8000564 <__adddf3+0x184>
 800054a:	f102 0214 	add.w	r2, r2, #20
 800054e:	bfd8      	it	le
 8000550:	f1c2 0c20 	rsble	ip, r2, #32
 8000554:	fa01 f102 	lsl.w	r1, r1, r2
 8000558:	fa20 fc0c 	lsr.w	ip, r0, ip
 800055c:	bfdc      	itt	le
 800055e:	ea41 010c 	orrle.w	r1, r1, ip
 8000562:	4090      	lslle	r0, r2
 8000564:	1ae4      	subs	r4, r4, r3
 8000566:	bfa2      	ittt	ge
 8000568:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800056c:	4329      	orrge	r1, r5
 800056e:	bd30      	popge	{r4, r5, pc}
 8000570:	ea6f 0404 	mvn.w	r4, r4
 8000574:	3c1f      	subs	r4, #31
 8000576:	da1c      	bge.n	80005b2 <__adddf3+0x1d2>
 8000578:	340c      	adds	r4, #12
 800057a:	dc0e      	bgt.n	800059a <__adddf3+0x1ba>
 800057c:	f104 0414 	add.w	r4, r4, #20
 8000580:	f1c4 0220 	rsb	r2, r4, #32
 8000584:	fa20 f004 	lsr.w	r0, r0, r4
 8000588:	fa01 f302 	lsl.w	r3, r1, r2
 800058c:	ea40 0003 	orr.w	r0, r0, r3
 8000590:	fa21 f304 	lsr.w	r3, r1, r4
 8000594:	ea45 0103 	orr.w	r1, r5, r3
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f1c4 040c 	rsb	r4, r4, #12
 800059e:	f1c4 0220 	rsb	r2, r4, #32
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 f304 	lsl.w	r3, r1, r4
 80005aa:	ea40 0003 	orr.w	r0, r0, r3
 80005ae:	4629      	mov	r1, r5
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	fa21 f004 	lsr.w	r0, r1, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	f094 0f00 	teq	r4, #0
 80005be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005c2:	bf06      	itte	eq
 80005c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005c8:	3401      	addeq	r4, #1
 80005ca:	3d01      	subne	r5, #1
 80005cc:	e74e      	b.n	800046c <__adddf3+0x8c>
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf18      	it	ne
 80005d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d8:	d029      	beq.n	800062e <__adddf3+0x24e>
 80005da:	ea94 0f05 	teq	r4, r5
 80005de:	bf08      	it	eq
 80005e0:	ea90 0f02 	teqeq	r0, r2
 80005e4:	d005      	beq.n	80005f2 <__adddf3+0x212>
 80005e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ea:	bf04      	itt	eq
 80005ec:	4619      	moveq	r1, r3
 80005ee:	4610      	moveq	r0, r2
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf1e      	ittt	ne
 80005f8:	2100      	movne	r1, #0
 80005fa:	2000      	movne	r0, #0
 80005fc:	bd30      	popne	{r4, r5, pc}
 80005fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000602:	d105      	bne.n	8000610 <__adddf3+0x230>
 8000604:	0040      	lsls	r0, r0, #1
 8000606:	4149      	adcs	r1, r1
 8000608:	bf28      	it	cs
 800060a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800060e:	bd30      	pop	{r4, r5, pc}
 8000610:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000614:	bf3c      	itt	cc
 8000616:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800061a:	bd30      	popcc	{r4, r5, pc}
 800061c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000620:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000624:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf1a      	itte	ne
 8000634:	4619      	movne	r1, r3
 8000636:	4610      	movne	r0, r2
 8000638:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800063c:	bf1c      	itt	ne
 800063e:	460b      	movne	r3, r1
 8000640:	4602      	movne	r2, r0
 8000642:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000646:	bf06      	itte	eq
 8000648:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800064c:	ea91 0f03 	teqeq	r1, r3
 8000650:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	bf00      	nop

08000658 <__aeabi_ui2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f04f 0500 	mov.w	r5, #0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e750      	b.n	8000518 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_i2d>:
 8000678:	f090 0f00 	teq	r0, #0
 800067c:	bf04      	itt	eq
 800067e:	2100      	moveq	r1, #0
 8000680:	4770      	bxeq	lr
 8000682:	b530      	push	{r4, r5, lr}
 8000684:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000688:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000690:	bf48      	it	mi
 8000692:	4240      	negmi	r0, r0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e73e      	b.n	8000518 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_f2d>:
 800069c:	0042      	lsls	r2, r0, #1
 800069e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006aa:	bf1f      	itttt	ne
 80006ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006b8:	4770      	bxne	lr
 80006ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006be:	bf08      	it	eq
 80006c0:	4770      	bxeq	lr
 80006c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006c6:	bf04      	itt	eq
 80006c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	e71c      	b.n	8000518 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_ul2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f04f 0500 	mov.w	r5, #0
 80006ee:	e00a      	b.n	8000706 <__aeabi_l2d+0x16>

080006f0 <__aeabi_l2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006fe:	d502      	bpl.n	8000706 <__aeabi_l2d+0x16>
 8000700:	4240      	negs	r0, r0
 8000702:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000706:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000712:	f43f aed8 	beq.w	80004c6 <__adddf3+0xe6>
 8000716:	f04f 0203 	mov.w	r2, #3
 800071a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071e:	bf18      	it	ne
 8000720:	3203      	addne	r2, #3
 8000722:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000726:	bf18      	it	ne
 8000728:	3203      	addne	r2, #3
 800072a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072e:	f1c2 0320 	rsb	r3, r2, #32
 8000732:	fa00 fc03 	lsl.w	ip, r0, r3
 8000736:	fa20 f002 	lsr.w	r0, r0, r2
 800073a:	fa01 fe03 	lsl.w	lr, r1, r3
 800073e:	ea40 000e 	orr.w	r0, r0, lr
 8000742:	fa21 f102 	lsr.w	r1, r1, r2
 8000746:	4414      	add	r4, r2
 8000748:	e6bd      	b.n	80004c6 <__adddf3+0xe6>
 800074a:	bf00      	nop

0800074c <__aeabi_d2f>:
 800074c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000750:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000754:	bf24      	itt	cs
 8000756:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800075a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800075e:	d90d      	bls.n	800077c <__aeabi_d2f+0x30>
 8000760:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000764:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000768:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800076c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000770:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000774:	bf08      	it	eq
 8000776:	f020 0001 	biceq.w	r0, r0, #1
 800077a:	4770      	bx	lr
 800077c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000780:	d121      	bne.n	80007c6 <__aeabi_d2f+0x7a>
 8000782:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000786:	bfbc      	itt	lt
 8000788:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800078c:	4770      	bxlt	lr
 800078e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000792:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000796:	f1c2 0218 	rsb	r2, r2, #24
 800079a:	f1c2 0c20 	rsb	ip, r2, #32
 800079e:	fa10 f30c 	lsls.w	r3, r0, ip
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	bf18      	it	ne
 80007a8:	f040 0001 	orrne.w	r0, r0, #1
 80007ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007b8:	ea40 000c 	orr.w	r0, r0, ip
 80007bc:	fa23 f302 	lsr.w	r3, r3, r2
 80007c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007c4:	e7cc      	b.n	8000760 <__aeabi_d2f+0x14>
 80007c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007ca:	d107      	bne.n	80007dc <__aeabi_d2f+0x90>
 80007cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007d0:	bf1e      	ittt	ne
 80007d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007da:	4770      	bxne	lr
 80007dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_frsub>:
 80007ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007f0:	e002      	b.n	80007f8 <__addsf3>
 80007f2:	bf00      	nop

080007f4 <__aeabi_fsub>:
 80007f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007f8 <__addsf3>:
 80007f8:	0042      	lsls	r2, r0, #1
 80007fa:	bf1f      	itttt	ne
 80007fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000800:	ea92 0f03 	teqne	r2, r3
 8000804:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000808:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080c:	d06a      	beq.n	80008e4 <__addsf3+0xec>
 800080e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000812:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000816:	bfc1      	itttt	gt
 8000818:	18d2      	addgt	r2, r2, r3
 800081a:	4041      	eorgt	r1, r0
 800081c:	4048      	eorgt	r0, r1
 800081e:	4041      	eorgt	r1, r0
 8000820:	bfb8      	it	lt
 8000822:	425b      	neglt	r3, r3
 8000824:	2b19      	cmp	r3, #25
 8000826:	bf88      	it	hi
 8000828:	4770      	bxhi	lr
 800082a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800082e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000832:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000836:	bf18      	it	ne
 8000838:	4240      	negne	r0, r0
 800083a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800083e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000842:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000846:	bf18      	it	ne
 8000848:	4249      	negne	r1, r1
 800084a:	ea92 0f03 	teq	r2, r3
 800084e:	d03f      	beq.n	80008d0 <__addsf3+0xd8>
 8000850:	f1a2 0201 	sub.w	r2, r2, #1
 8000854:	fa41 fc03 	asr.w	ip, r1, r3
 8000858:	eb10 000c 	adds.w	r0, r0, ip
 800085c:	f1c3 0320 	rsb	r3, r3, #32
 8000860:	fa01 f103 	lsl.w	r1, r1, r3
 8000864:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000868:	d502      	bpl.n	8000870 <__addsf3+0x78>
 800086a:	4249      	negs	r1, r1
 800086c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000870:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000874:	d313      	bcc.n	800089e <__addsf3+0xa6>
 8000876:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800087a:	d306      	bcc.n	800088a <__addsf3+0x92>
 800087c:	0840      	lsrs	r0, r0, #1
 800087e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000882:	f102 0201 	add.w	r2, r2, #1
 8000886:	2afe      	cmp	r2, #254	; 0xfe
 8000888:	d251      	bcs.n	800092e <__addsf3+0x136>
 800088a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800088e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000892:	bf08      	it	eq
 8000894:	f020 0001 	biceq.w	r0, r0, #1
 8000898:	ea40 0003 	orr.w	r0, r0, r3
 800089c:	4770      	bx	lr
 800089e:	0049      	lsls	r1, r1, #1
 80008a0:	eb40 0000 	adc.w	r0, r0, r0
 80008a4:	3a01      	subs	r2, #1
 80008a6:	bf28      	it	cs
 80008a8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008ac:	d2ed      	bcs.n	800088a <__addsf3+0x92>
 80008ae:	fab0 fc80 	clz	ip, r0
 80008b2:	f1ac 0c08 	sub.w	ip, ip, #8
 80008b6:	ebb2 020c 	subs.w	r2, r2, ip
 80008ba:	fa00 f00c 	lsl.w	r0, r0, ip
 80008be:	bfaa      	itet	ge
 80008c0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008c4:	4252      	neglt	r2, r2
 80008c6:	4318      	orrge	r0, r3
 80008c8:	bfbc      	itt	lt
 80008ca:	40d0      	lsrlt	r0, r2
 80008cc:	4318      	orrlt	r0, r3
 80008ce:	4770      	bx	lr
 80008d0:	f092 0f00 	teq	r2, #0
 80008d4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008d8:	bf06      	itte	eq
 80008da:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008de:	3201      	addeq	r2, #1
 80008e0:	3b01      	subne	r3, #1
 80008e2:	e7b5      	b.n	8000850 <__addsf3+0x58>
 80008e4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008ec:	bf18      	it	ne
 80008ee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008f2:	d021      	beq.n	8000938 <__addsf3+0x140>
 80008f4:	ea92 0f03 	teq	r2, r3
 80008f8:	d004      	beq.n	8000904 <__addsf3+0x10c>
 80008fa:	f092 0f00 	teq	r2, #0
 80008fe:	bf08      	it	eq
 8000900:	4608      	moveq	r0, r1
 8000902:	4770      	bx	lr
 8000904:	ea90 0f01 	teq	r0, r1
 8000908:	bf1c      	itt	ne
 800090a:	2000      	movne	r0, #0
 800090c:	4770      	bxne	lr
 800090e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000912:	d104      	bne.n	800091e <__addsf3+0x126>
 8000914:	0040      	lsls	r0, r0, #1
 8000916:	bf28      	it	cs
 8000918:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800091c:	4770      	bx	lr
 800091e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000922:	bf3c      	itt	cc
 8000924:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000928:	4770      	bxcc	lr
 800092a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800092e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000932:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000936:	4770      	bx	lr
 8000938:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800093c:	bf16      	itet	ne
 800093e:	4608      	movne	r0, r1
 8000940:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000944:	4601      	movne	r1, r0
 8000946:	0242      	lsls	r2, r0, #9
 8000948:	bf06      	itte	eq
 800094a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800094e:	ea90 0f01 	teqeq	r0, r1
 8000952:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000956:	4770      	bx	lr

08000958 <__aeabi_ui2f>:
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	e004      	b.n	8000968 <__aeabi_i2f+0x8>
 800095e:	bf00      	nop

08000960 <__aeabi_i2f>:
 8000960:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000964:	bf48      	it	mi
 8000966:	4240      	negmi	r0, r0
 8000968:	ea5f 0c00 	movs.w	ip, r0
 800096c:	bf08      	it	eq
 800096e:	4770      	bxeq	lr
 8000970:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000974:	4601      	mov	r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	e01c      	b.n	80009b6 <__aeabi_l2f+0x2a>

0800097c <__aeabi_ul2f>:
 800097c:	ea50 0201 	orrs.w	r2, r0, r1
 8000980:	bf08      	it	eq
 8000982:	4770      	bxeq	lr
 8000984:	f04f 0300 	mov.w	r3, #0
 8000988:	e00a      	b.n	80009a0 <__aeabi_l2f+0x14>
 800098a:	bf00      	nop

0800098c <__aeabi_l2f>:
 800098c:	ea50 0201 	orrs.w	r2, r0, r1
 8000990:	bf08      	it	eq
 8000992:	4770      	bxeq	lr
 8000994:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000998:	d502      	bpl.n	80009a0 <__aeabi_l2f+0x14>
 800099a:	4240      	negs	r0, r0
 800099c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009a0:	ea5f 0c01 	movs.w	ip, r1
 80009a4:	bf02      	ittt	eq
 80009a6:	4684      	moveq	ip, r0
 80009a8:	4601      	moveq	r1, r0
 80009aa:	2000      	moveq	r0, #0
 80009ac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009b0:	bf08      	it	eq
 80009b2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009b6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80009ba:	fabc f28c 	clz	r2, ip
 80009be:	3a08      	subs	r2, #8
 80009c0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009c4:	db10      	blt.n	80009e8 <__aeabi_l2f+0x5c>
 80009c6:	fa01 fc02 	lsl.w	ip, r1, r2
 80009ca:	4463      	add	r3, ip
 80009cc:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d0:	f1c2 0220 	rsb	r2, r2, #32
 80009d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009d8:	fa20 f202 	lsr.w	r2, r0, r2
 80009dc:	eb43 0002 	adc.w	r0, r3, r2
 80009e0:	bf08      	it	eq
 80009e2:	f020 0001 	biceq.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	f102 0220 	add.w	r2, r2, #32
 80009ec:	fa01 fc02 	lsl.w	ip, r1, r2
 80009f0:	f1c2 0220 	rsb	r2, r2, #32
 80009f4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009f8:	fa21 f202 	lsr.w	r2, r1, r2
 80009fc:	eb43 0002 	adc.w	r0, r3, r2
 8000a00:	bf08      	it	eq
 8000a02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a06:	4770      	bx	lr

08000a08 <__aeabi_fmul>:
 8000a08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a10:	bf1e      	ittt	ne
 8000a12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a16:	ea92 0f0c 	teqne	r2, ip
 8000a1a:	ea93 0f0c 	teqne	r3, ip
 8000a1e:	d06f      	beq.n	8000b00 <__aeabi_fmul+0xf8>
 8000a20:	441a      	add	r2, r3
 8000a22:	ea80 0c01 	eor.w	ip, r0, r1
 8000a26:	0240      	lsls	r0, r0, #9
 8000a28:	bf18      	it	ne
 8000a2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a2e:	d01e      	beq.n	8000a6e <__aeabi_fmul+0x66>
 8000a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a48:	bf3e      	ittt	cc
 8000a4a:	0049      	lslcc	r1, r1, #1
 8000a4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a50:	005b      	lslcc	r3, r3, #1
 8000a52:	ea40 0001 	orr.w	r0, r0, r1
 8000a56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a5a:	2afd      	cmp	r2, #253	; 0xfd
 8000a5c:	d81d      	bhi.n	8000a9a <__aeabi_fmul+0x92>
 8000a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a66:	bf08      	it	eq
 8000a68:	f020 0001 	biceq.w	r0, r0, #1
 8000a6c:	4770      	bx	lr
 8000a6e:	f090 0f00 	teq	r0, #0
 8000a72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a76:	bf08      	it	eq
 8000a78:	0249      	lsleq	r1, r1, #9
 8000a7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a82:	3a7f      	subs	r2, #127	; 0x7f
 8000a84:	bfc2      	ittt	gt
 8000a86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a8e:	4770      	bxgt	lr
 8000a90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	3a01      	subs	r2, #1
 8000a9a:	dc5d      	bgt.n	8000b58 <__aeabi_fmul+0x150>
 8000a9c:	f112 0f19 	cmn.w	r2, #25
 8000aa0:	bfdc      	itt	le
 8000aa2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bxle	lr
 8000aa8:	f1c2 0200 	rsb	r2, r2, #0
 8000aac:	0041      	lsls	r1, r0, #1
 8000aae:	fa21 f102 	lsr.w	r1, r1, r2
 8000ab2:	f1c2 0220 	rsb	r2, r2, #32
 8000ab6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000aba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000abe:	f140 0000 	adc.w	r0, r0, #0
 8000ac2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ac6:	bf08      	it	eq
 8000ac8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000acc:	4770      	bx	lr
 8000ace:	f092 0f00 	teq	r2, #0
 8000ad2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ad6:	bf02      	ittt	eq
 8000ad8:	0040      	lsleq	r0, r0, #1
 8000ada:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ade:	3a01      	subeq	r2, #1
 8000ae0:	d0f9      	beq.n	8000ad6 <__aeabi_fmul+0xce>
 8000ae2:	ea40 000c 	orr.w	r0, r0, ip
 8000ae6:	f093 0f00 	teq	r3, #0
 8000aea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aee:	bf02      	ittt	eq
 8000af0:	0049      	lsleq	r1, r1, #1
 8000af2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000af6:	3b01      	subeq	r3, #1
 8000af8:	d0f9      	beq.n	8000aee <__aeabi_fmul+0xe6>
 8000afa:	ea41 010c 	orr.w	r1, r1, ip
 8000afe:	e78f      	b.n	8000a20 <__aeabi_fmul+0x18>
 8000b00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b04:	ea92 0f0c 	teq	r2, ip
 8000b08:	bf18      	it	ne
 8000b0a:	ea93 0f0c 	teqne	r3, ip
 8000b0e:	d00a      	beq.n	8000b26 <__aeabi_fmul+0x11e>
 8000b10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b14:	bf18      	it	ne
 8000b16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1a:	d1d8      	bne.n	8000ace <__aeabi_fmul+0xc6>
 8000b1c:	ea80 0001 	eor.w	r0, r0, r1
 8000b20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	4770      	bx	lr
 8000b26:	f090 0f00 	teq	r0, #0
 8000b2a:	bf17      	itett	ne
 8000b2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b30:	4608      	moveq	r0, r1
 8000b32:	f091 0f00 	teqne	r1, #0
 8000b36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b3a:	d014      	beq.n	8000b66 <__aeabi_fmul+0x15e>
 8000b3c:	ea92 0f0c 	teq	r2, ip
 8000b40:	d101      	bne.n	8000b46 <__aeabi_fmul+0x13e>
 8000b42:	0242      	lsls	r2, r0, #9
 8000b44:	d10f      	bne.n	8000b66 <__aeabi_fmul+0x15e>
 8000b46:	ea93 0f0c 	teq	r3, ip
 8000b4a:	d103      	bne.n	8000b54 <__aeabi_fmul+0x14c>
 8000b4c:	024b      	lsls	r3, r1, #9
 8000b4e:	bf18      	it	ne
 8000b50:	4608      	movne	r0, r1
 8000b52:	d108      	bne.n	8000b66 <__aeabi_fmul+0x15e>
 8000b54:	ea80 0001 	eor.w	r0, r0, r1
 8000b58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_fdiv>:
 8000b70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b78:	bf1e      	ittt	ne
 8000b7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b7e:	ea92 0f0c 	teqne	r2, ip
 8000b82:	ea93 0f0c 	teqne	r3, ip
 8000b86:	d069      	beq.n	8000c5c <__aeabi_fdiv+0xec>
 8000b88:	eba2 0203 	sub.w	r2, r2, r3
 8000b8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b90:	0249      	lsls	r1, r1, #9
 8000b92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b96:	d037      	beq.n	8000c08 <__aeabi_fdiv+0x98>
 8000b98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ba0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ba4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	bf38      	it	cc
 8000bac:	005b      	lslcc	r3, r3, #1
 8000bae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	bf24      	itt	cs
 8000bba:	1a5b      	subcs	r3, r3, r1
 8000bbc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bc0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bc4:	bf24      	itt	cs
 8000bc6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bce:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bd2:	bf24      	itt	cs
 8000bd4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000bd8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bdc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000be0:	bf24      	itt	cs
 8000be2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000be6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	bf18      	it	ne
 8000bee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bf2:	d1e0      	bne.n	8000bb6 <__aeabi_fdiv+0x46>
 8000bf4:	2afd      	cmp	r2, #253	; 0xfd
 8000bf6:	f63f af50 	bhi.w	8000a9a <__aeabi_fmul+0x92>
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c10:	327f      	adds	r2, #127	; 0x7f
 8000c12:	bfc2      	ittt	gt
 8000c14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c1c:	4770      	bxgt	lr
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	3a01      	subs	r2, #1
 8000c28:	e737      	b.n	8000a9a <__aeabi_fmul+0x92>
 8000c2a:	f092 0f00 	teq	r2, #0
 8000c2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c32:	bf02      	ittt	eq
 8000c34:	0040      	lsleq	r0, r0, #1
 8000c36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c3a:	3a01      	subeq	r2, #1
 8000c3c:	d0f9      	beq.n	8000c32 <__aeabi_fdiv+0xc2>
 8000c3e:	ea40 000c 	orr.w	r0, r0, ip
 8000c42:	f093 0f00 	teq	r3, #0
 8000c46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c4a:	bf02      	ittt	eq
 8000c4c:	0049      	lsleq	r1, r1, #1
 8000c4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c52:	3b01      	subeq	r3, #1
 8000c54:	d0f9      	beq.n	8000c4a <__aeabi_fdiv+0xda>
 8000c56:	ea41 010c 	orr.w	r1, r1, ip
 8000c5a:	e795      	b.n	8000b88 <__aeabi_fdiv+0x18>
 8000c5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c60:	ea92 0f0c 	teq	r2, ip
 8000c64:	d108      	bne.n	8000c78 <__aeabi_fdiv+0x108>
 8000c66:	0242      	lsls	r2, r0, #9
 8000c68:	f47f af7d 	bne.w	8000b66 <__aeabi_fmul+0x15e>
 8000c6c:	ea93 0f0c 	teq	r3, ip
 8000c70:	f47f af70 	bne.w	8000b54 <__aeabi_fmul+0x14c>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e776      	b.n	8000b66 <__aeabi_fmul+0x15e>
 8000c78:	ea93 0f0c 	teq	r3, ip
 8000c7c:	d104      	bne.n	8000c88 <__aeabi_fdiv+0x118>
 8000c7e:	024b      	lsls	r3, r1, #9
 8000c80:	f43f af4c 	beq.w	8000b1c <__aeabi_fmul+0x114>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e76e      	b.n	8000b66 <__aeabi_fmul+0x15e>
 8000c88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c8c:	bf18      	it	ne
 8000c8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c92:	d1ca      	bne.n	8000c2a <__aeabi_fdiv+0xba>
 8000c94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c98:	f47f af5c 	bne.w	8000b54 <__aeabi_fmul+0x14c>
 8000c9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ca0:	f47f af3c 	bne.w	8000b1c <__aeabi_fmul+0x114>
 8000ca4:	e75f      	b.n	8000b66 <__aeabi_fmul+0x15e>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_f2iz>:
 8000ca8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cb0:	d30f      	bcc.n	8000cd2 <__aeabi_f2iz+0x2a>
 8000cb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_f2iz+0x30>
 8000cbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000ccc:	bf18      	it	ne
 8000cce:	4240      	negne	r0, r0
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr
 8000cd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000cdc:	d101      	bne.n	8000ce2 <__aeabi_f2iz+0x3a>
 8000cde:	0242      	lsls	r2, r0, #9
 8000ce0:	d105      	bne.n	8000cee <__aeabi_f2iz+0x46>
 8000ce2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000ce6:	bf08      	it	eq
 8000ce8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cec:	4770      	bx	lr
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	4770      	bx	lr

08000cf4 <NVIC_SetEnableInterrupt>:
 * @brief Enable interrupt for a given irq
 * 
 * @param copy_enumIRQ irq number for interrupt 
 */
void NVIC_SetEnableInterrupt(NVIC_IRQ copy_enumIRQ)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
    NVIC->ISER[(copy_enumIRQ >> 5)] |= (1 << (copy_enumIRQ & 0x1F));
 8000cfe:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <NVIC_SetEnableInterrupt+0x40>)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	115b      	asrs	r3, r3, #5
 8000d06:	b25b      	sxtb	r3, r3
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	79fa      	ldrb	r2, [r7, #7]
 8000d0e:	f002 021f 	and.w	r2, r2, #31
 8000d12:	2101      	movs	r1, #1
 8000d14:	fa01 f202 	lsl.w	r2, r1, r2
 8000d18:	4610      	mov	r0, r2
 8000d1a:	4906      	ldr	r1, [pc, #24]	; (8000d34 <NVIC_SetEnableInterrupt+0x40>)
 8000d1c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000d20:	1152      	asrs	r2, r2, #5
 8000d22:	b252      	sxtb	r2, r2
 8000d24:	4303      	orrs	r3, r0
 8000d26:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <SYSTICK_Init>:

#include "CortexM3/SYSTICK_M3.h"


void SYSTICK_Init()
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	/* Disable SYSTICK */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <SYSTICK_Init+0x30>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <SYSTICK_Init+0x30>)
 8000d42:	f023 0301 	bic.w	r3, r3, #1
 8000d46:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt*/
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 8000d48:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <SYSTICK_Init+0x30>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <SYSTICK_Init+0x30>)
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	6013      	str	r3, [r2, #0]
	/* Set Prescaler of the Systick*/
	if(SYSTICK_CLK_SRC_PRESCALER == SYSTICK_CLK_SRC_PRESCALER_1)
	{
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_CLKSOURCE_BIT_POS);
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SYSTICK_Init+0x30>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <SYSTICK_Init+0x30>)
 8000d5a:	f043 0304 	orr.w	r3, r3, #4
 8000d5e:	6013      	str	r3, [r2, #0]
	}	
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <SYSTICK_DelayMs>:

void SYSTICK_DelayMs(uint32_t copy_u32DelayMs)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	/* Disable Systick */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000d7a:	f023 0301 	bic.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]
	/* Set number of overflows */
	uint32_t overFlowCounter = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
	uint32_t totalOverFlows = copy_u32DelayMs;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60bb      	str	r3, [r7, #8]
	/* Set Preload register value */
	SYSTICK_SetNumOfTicks(SYSTICK_ONE_MILLISECOND_TICKS);
 8000d88:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000d8c:	f000 f82a 	bl	8000de4 <SYSTICK_SetNumOfTicks>
	/* Disable Systick Interrupt */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000d96:	f023 0302 	bic.w	r3, r3, #2
 8000d9a:	6013      	str	r3, [r2, #0]
	/* Enable SYSTICK */
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]

	/* Loop over number of overflows */
	while(overFlowCounter < totalOverFlows)
 8000da8:	e010      	b.n	8000dcc <SYSTICK_DelayMs+0x60>
	{
		/* Wait till flag is raised */
		while(0 == GET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS));
 8000daa:	bf00      	nop
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	0c1b      	lsrs	r3, r3, #16
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d0f8      	beq.n	8000dac <SYSTICK_DelayMs+0x40>
		/* Clear flag */
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_COUNTFLAG_BIT_POS);
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <SYSTICK_DelayMs+0x74>)
 8000dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc4:	6013      	str	r3, [r2, #0]
		/* Increment overflow counter */
		overFlowCounter++;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
	while(overFlowCounter < totalOverFlows)
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d3ea      	bcc.n	8000daa <SYSTICK_DelayMs+0x3e>
	}
	/* Wait till flag is raised */
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	e000e010 	.word	0xe000e010

08000de4 <SYSTICK_SetNumOfTicks>:

static void SYSTICK_SetNumOfTicks(uint32_t copy_u32SystickNumOfTicks)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	/* Set Number of ticks*/
	if(copy_u32SystickNumOfTicks > SYSTICK_MAX_PRE_COUNT)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df2:	d904      	bls.n	8000dfe <SYSTICK_SetNumOfTicks+0x1a>
	{
			SYSTICK->SYSRVR	= SYSTICK_MAX_PRE_COUNT;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SYSTICK_SetNumOfTicks+0x2c>)
 8000df6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000dfa:	605a      	str	r2, [r3, #4]
	}
	else
	{
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
	}
}
 8000dfc:	e002      	b.n	8000e04 <SYSTICK_SetNumOfTicks+0x20>
			SYSTICK->SYSRVR = copy_u32SystickNumOfTicks;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <SYSTICK_SetNumOfTicks+0x2c>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6053      	str	r3, [r2, #4]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <SysTick_Handler>:
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
}


void SysTick_Handler()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	if(SYSTICK_OverflowCounter < SYSTICK_NumOfOverflows)
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <SysTick_Handler+0x2c>)
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <SysTick_Handler+0x30>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d205      	bcs.n	8000e30 <SysTick_Handler+0x1c>
	{
		SYSTICK_OverflowCounter++;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <SysTick_Handler+0x2c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <SysTick_Handler+0x2c>)
 8000e2c:	6013      	str	r3, [r2, #0]
	else
	{
		SYSTICK_OverflowCounter = 0;
		SYSTICK_CallBackFunction();
	}
 8000e2e:	e005      	b.n	8000e3c <SysTick_Handler+0x28>
		SYSTICK_OverflowCounter = 0;
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <SysTick_Handler+0x2c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
		SYSTICK_CallBackFunction();
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Handler+0x34>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4798      	blx	r3
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000ac 	.word	0x200000ac
 8000e44:	200000b4 	.word	0x200000b4
 8000e48:	200000b0 	.word	0x200000b0

08000e4c <DMA_Init>:
 *   copy_dmaHandle: Pointer to the DMA handle structure containing the configuration.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if initialization is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Init(DMA_HandleTypeDef *copy_dmaHandle){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

    HAL_Status hal_Status = HAL_OKAY;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_dmaHandle)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d102      	bne.n	8000e64 <DMA_Init+0x18>
    {
        hal_Status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e09d      	b.n	8000fa0 <DMA_Init+0x154>
    }
    else
    {
    switch(copy_dmaHandle->dma_Direction)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	7a5b      	ldrb	r3, [r3, #9]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <DMA_Init+0x26>
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d009      	beq.n	8000e84 <DMA_Init+0x38>
 8000e70:	e015      	b.n	8000e9e <DMA_Init+0x52>
    {
        case DMA_READ_FROM_PERIPHERAL:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f022 0210 	bic.w	r2, r2, #16
 8000e80:	601a      	str	r2, [r3, #0]
            break;
 8000e82:	e00c      	b.n	8000e9e <DMA_Init+0x52>
        case DMA_READ_FROM_MEMORY:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0210 	orr.w	r2, r2, #16
 8000e92:	601a      	str	r2, [r3, #0]
            copy_dmaHandle->dma_TypeDef->CCR = 1<<4;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2210      	movs	r2, #16
 8000e9a:	601a      	str	r2, [r3, #0]
            break;
 8000e9c:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mem2Mem)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7b1b      	ldrb	r3, [r3, #12]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <DMA_Init+0x60>
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d009      	beq.n	8000ebe <DMA_Init+0x72>
 8000eaa:	e011      	b.n	8000ed0 <DMA_Init+0x84>
    {
        case DMA_MEM2MEM_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000eba:	601a      	str	r2, [r3, #0]
            break;
 8000ebc:	e008      	b.n	8000ed0 <DMA_Init+0x84>
        case DMA_MEM2MEM_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ecc:	601a      	str	r2, [r3, #0]
            break;
 8000ece:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mode)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7a1b      	ldrb	r3, [r3, #8]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00e      	beq.n	8000ef6 <DMA_Init+0xaa>
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d116      	bne.n	8000f0a <DMA_Init+0xbe>
    {
        case DMA_NON_CIRCULAR_MODE:
            if(copy_dmaHandle->dma_Mem2Mem != DMA_MEM2MEM_ENABLE )
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d011      	beq.n	8000f08 <DMA_Init+0xbc>
            {
                CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0220 	bic.w	r2, r2, #32
 8000ef2:	601a      	str	r2, [r3, #0]

            }
            break;
 8000ef4:	e008      	b.n	8000f08 <DMA_Init+0xbc>
        case DMA_CIRCULAR_MODE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0220 	orr.w	r2, r2, #32
 8000f04:	601a      	str	r2, [r3, #0]
            break;
 8000f06:	e000      	b.n	8000f0a <DMA_Init+0xbe>
            break;
 8000f08:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_MemIncMode)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7b5b      	ldrb	r3, [r3, #13]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <DMA_Init+0xcc>
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d009      	beq.n	8000f2a <DMA_Init+0xde>
 8000f16:	e011      	b.n	8000f3c <DMA_Init+0xf0>
    {
        case DMA_MEM_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f26:	601a      	str	r2, [r3, #0]
            break;
 8000f28:	e008      	b.n	8000f3c <DMA_Init+0xf0>
        case DMA_MEM_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f38:	601a      	str	r2, [r3, #0]
            break;
 8000f3a:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_PeriphIncMode)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	7b9b      	ldrb	r3, [r3, #14]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <DMA_Init+0xfe>
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d009      	beq.n	8000f5c <DMA_Init+0x110>
 8000f48:	e011      	b.n	8000f6e <DMA_Init+0x122>
    {
        case DMA_PERIPH_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f58:	601a      	str	r2, [r3, #0]
            break;
 8000f5a:	e008      	b.n	8000f6e <DMA_Init+0x122>
        case DMA_PERIPH_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f6a:	601a      	str	r2, [r3, #0]
            break;
 8000f6c:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Interrupt)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7bdb      	ldrb	r3, [r3, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d002      	beq.n	8000f7c <DMA_Init+0x130>
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d009      	beq.n	8000f8e <DMA_Init+0x142>
 8000f7a:	e011      	b.n	8000fa0 <DMA_Init+0x154>
    {
        case DMA_INTERRUPT_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0202 	orr.w	r2, r2, #2
 8000f8a:	601a      	str	r2, [r3, #0]
            break;
 8000f8c:	e008      	b.n	8000fa0 <DMA_Init+0x154>
        case DMA_INTERRUPT_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0202 	bic.w	r2, r2, #2
 8000f9c:	601a      	str	r2, [r3, #0]
            break;
 8000f9e:	bf00      	nop
    }
    }
    return hal_Status;
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <DMA_SetPeriphAddress>:
 *   copy_u32PeriphAddress: Pointer to the peripheral address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetPeriphAddress(DMA_HandleTypeDef *copy_dmaHandle,uint8_t *copy_u32PeriphAddress){
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32PeriphAddress || NULL == copy_dmaHandle )
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <DMA_SetPeriphAddress+0x1a>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d102      	bne.n	8000fcc <DMA_SetPeriphAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e003      	b.n	8000fd4 <DMA_SetPeriphAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CPAR = copy_u32PeriphAddress;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	609a      	str	r2, [r3, #8]
    }
    return hal_Status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <DMA_SetMemoryAddress>:
 *   copy_u32MemAddress: Pointer to the memory address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetMemoryAddress(DMA_HandleTypeDef *copy_dmaHandle ,uint8_t *copy_u32MemAddress){
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32MemAddress || NULL == copy_dmaHandle )
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <DMA_SetMemoryAddress+0x1a>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <DMA_SetMemoryAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e003      	b.n	8001008 <DMA_SetMemoryAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CMAR = copy_u32MemAddress;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	60da      	str	r2, [r3, #12]
    }
    return hal_Status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <DMA_Start>:
 *   hdma: Pointer to the DMA handle structure.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if starting the transfer is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Start(DMA_HandleTypeDef *hdma){
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 800101c:	2300      	movs	r3, #0
 800101e:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <DMA_Start+0x18>
    {
        hal_Status = HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e007      	b.n	800103c <DMA_Start+0x28>
    }
    else
    {
        SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f042 0201 	orr.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]
    }
    return hal_Status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <DMA_Stop>:
 *
 * @param hdma: Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the specified DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_Stop(DMA_HandleTypeDef *hdma){
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d102      	bne.n	8001060 <DMA_Stop+0x18>
    {
        hal_Status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	73fb      	strb	r3, [r7, #15]
 800105e:	e007      	b.n	8001070 <DMA_Stop+0x28>
    }
    else
    {
        CLR_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0201 	bic.w	r2, r2, #1
 800106e:	601a      	str	r2, [r3, #0]
    }
    return hal_Status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr

0800107c <DMA_SetDataCounter>:
 * @param copy_u32DataLength: The number of data items to be transferred by the DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_SetDataCounter(DMA_HandleTypeDef *hdma, uint32_t copy_u32DataLength)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <DMA_SetDataCounter+0x1a>
    {
        hal_Status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e003      	b.n	800109e <DMA_SetDataCounter+0x22>
    }
    else
    {
        hdma->dma_TypeDef->CNTDR = copy_u32DataLength;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	605a      	str	r2, [r3, #4]
        // SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
    }
    return hal_Status;
 800109e:	7bfb      	ldrb	r3, [r7, #15]

}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
	...

080010ac <DMA_SetCallBackFn>:
    return hal_Status;

}

HAL_Status DMA_SetCallBackFn(DMA_HandleTypeDef *hdma, DMA_CallbackFn callbackFn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <DMA_SetCallBackFn+0x1a>
    {
        hal_Status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e01b      	b.n	80010fe <DMA_SetCallBackFn+0x52>
    }
    else
    {
    switch ((uint32_t)hdma->dma_TypeDef)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <DMA_SetCallBackFn+0x60>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d011      	beq.n	80010f4 <DMA_SetCallBackFn+0x48>
 80010d0:	4a0e      	ldr	r2, [pc, #56]	; (800110c <DMA_SetCallBackFn+0x60>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d812      	bhi.n	80010fc <DMA_SetCallBackFn+0x50>
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <DMA_SetCallBackFn+0x64>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d003      	beq.n	80010e4 <DMA_SetCallBackFn+0x38>
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <DMA_SetCallBackFn+0x68>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d004      	beq.n	80010ec <DMA_SetCallBackFn+0x40>
            // Code for DMA1_3
            DMA1_3_CallbackFnPtr = callbackFn;
            break;
        default:
            // Default case
            break;
 80010e2:	e00b      	b.n	80010fc <DMA_SetCallBackFn+0x50>
            DMA1_1_CallbackFnPtr = callbackFn;
 80010e4:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <DMA_SetCallBackFn+0x6c>)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6013      	str	r3, [r2, #0]
            break;
 80010ea:	e008      	b.n	80010fe <DMA_SetCallBackFn+0x52>
            DMA1_2_CallbackFnPtr = callbackFn;
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <DMA_SetCallBackFn+0x70>)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	6013      	str	r3, [r2, #0]
            break;
 80010f2:	e004      	b.n	80010fe <DMA_SetCallBackFn+0x52>
            DMA1_3_CallbackFnPtr = callbackFn;
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <DMA_SetCallBackFn+0x74>)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6013      	str	r3, [r2, #0]
            break;
 80010fa:	e000      	b.n	80010fe <DMA_SetCallBackFn+0x52>
            break;
 80010fc:	bf00      	nop
    }
    }
    return hal_Status;
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40020030 	.word	0x40020030
 8001110:	40020008 	.word	0x40020008
 8001114:	4002001c 	.word	0x4002001c
 8001118:	200000b8 	.word	0x200000b8
 800111c:	200000c4 	.word	0x200000c4
 8001120:	200000bc 	.word	0x200000bc

08001124 <DMA_ClearInterruptFlag>:
        CLR_BIT(hdma->dma_TypeDef->CCR,DMA_CCR_TCIE_Pos);
    }
}

HAL_Status DMA_ClearInterruptFlag(DMA_HandleTypeDef *hdma)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <DMA_ClearInterruptFlag+0x18>
    {
        hal_Status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e02a      	b.n	8001192 <DMA_ClearInterruptFlag+0x6e>
    }
    else
    {
    switch ((uint32_t)hdma->dma_TypeDef)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <DMA_ClearInterruptFlag+0x7c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01b      	beq.n	800117e <DMA_ClearInterruptFlag+0x5a>
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <DMA_ClearInterruptFlag+0x7c>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d821      	bhi.n	8001190 <DMA_ClearInterruptFlag+0x6c>
 800114c:	4a15      	ldr	r2, [pc, #84]	; (80011a4 <DMA_ClearInterruptFlag+0x80>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d003      	beq.n	800115a <DMA_ClearInterruptFlag+0x36>
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <DMA_ClearInterruptFlag+0x84>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d009      	beq.n	800116c <DMA_ClearInterruptFlag+0x48>
            // Code for DMA1_3
            SET_BIT(hdma->dma_StatusTypedef->IFCR,9);
            break;
        default:
            // Default case
            break;
 8001158:	e01a      	b.n	8001190 <DMA_ClearInterruptFlag+0x6c>
            SET_BIT(hdma->dma_StatusTypedef->IFCR,1);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f042 0202 	orr.w	r2, r2, #2
 8001168:	605a      	str	r2, [r3, #4]
            break;
 800116a:	e012      	b.n	8001192 <DMA_ClearInterruptFlag+0x6e>
            SET_BIT(hdma->dma_StatusTypedef->IFCR,5);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f042 0220 	orr.w	r2, r2, #32
 800117a:	605a      	str	r2, [r3, #4]
            break;
 800117c:	e009      	b.n	8001192 <DMA_ClearInterruptFlag+0x6e>
            SET_BIT(hdma->dma_StatusTypedef->IFCR,9);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800118c:	605a      	str	r2, [r3, #4]
            break;
 800118e:	e000      	b.n	8001192 <DMA_ClearInterruptFlag+0x6e>
            break;
 8001190:	bf00      	nop
    }        
    }
}
 8001192:	bf00      	nop
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40020030 	.word	0x40020030
 80011a4:	40020008 	.word	0x40020008
 80011a8:	4002001c 	.word	0x4002001c

080011ac <DMA1_Channel1_IRQHandler>:



void DMA1_Channel1_IRQHandler()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    DMA1_1_CallbackFnPtr();
 80011b0:	4b02      	ldr	r3, [pc, #8]	; (80011bc <DMA1_Channel1_IRQHandler+0x10>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4798      	blx	r3
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000b8 	.word	0x200000b8

080011c0 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler()
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
    DMA1_2_CallbackFnPtr();
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <DMA1_Channel2_IRQHandler+0x10>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4798      	blx	r3
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200000c4 	.word	0x200000c4

080011d4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler()
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

    DMA1_3_CallbackFnPtr();
 80011d8:	4b02      	ldr	r3, [pc, #8]	; (80011e4 <DMA1_Channel3_IRQHandler+0x10>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4798      	blx	r3
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000bc 	.word	0x200000bc

080011e8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 80011ec:	4b02      	ldr	r3, [pc, #8]	; (80011f8 <DMA1_Channel4_IRQHandler+0x10>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4798      	blx	r3
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000bc 	.word	0x200000bc

080011fc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler()
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler()
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler()
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler()
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler()
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <ILI9341_Draw_Hollow_Circle>:
#include <stdarg.h>
// #include "spi.h"

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4604      	mov	r4, r0
 800124c:	4608      	mov	r0, r1
 800124e:	4611      	mov	r1, r2
 8001250:	461a      	mov	r2, r3
 8001252:	4623      	mov	r3, r4
 8001254:	80fb      	strh	r3, [r7, #6]
 8001256:	4603      	mov	r3, r0
 8001258:	80bb      	strh	r3, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	807b      	strh	r3, [r7, #2]
 800125e:	4613      	mov	r3, r2
 8001260:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	3b01      	subs	r3, #1
 8001266:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
    int dy = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 800127e:	e08d      	b.n	800139c <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	b29a      	uxth	r2, r3
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	4413      	add	r3, r2
 8001288:	b298      	uxth	r0, r3
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	b29a      	uxth	r2, r3
 800128e:	88bb      	ldrh	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	883a      	ldrh	r2, [r7, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	f000 fd98 	bl	8001dcc <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4413      	add	r3, r2
 80012a4:	b298      	uxth	r0, r3
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	88bb      	ldrh	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	883a      	ldrh	r2, [r7, #0]
 80012b2:	4619      	mov	r1, r3
 80012b4:	f000 fd8a 	bl	8001dcc <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	b298      	uxth	r0, r3
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	88bb      	ldrh	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	883a      	ldrh	r2, [r7, #0]
 80012ce:	4619      	mov	r1, r3
 80012d0:	f000 fd7c 	bl	8001dcc <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	88fa      	ldrh	r2, [r7, #6]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b298      	uxth	r0, r3
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	883a      	ldrh	r2, [r7, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	f000 fd6e 	bl	8001dcc <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	88fa      	ldrh	r2, [r7, #6]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	b298      	uxth	r0, r3
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	883a      	ldrh	r2, [r7, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	f000 fd60 	bl	8001dcc <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	b29b      	uxth	r3, r3
 8001310:	88fa      	ldrh	r2, [r7, #6]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	b298      	uxth	r0, r3
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	b29b      	uxth	r3, r3
 800131a:	88ba      	ldrh	r2, [r7, #4]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	b29b      	uxth	r3, r3
 8001320:	883a      	ldrh	r2, [r7, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	f000 fd52 	bl	8001dcc <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	b29a      	uxth	r2, r3
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	4413      	add	r3, r2
 8001330:	b298      	uxth	r0, r3
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	b29b      	uxth	r3, r3
 8001336:	88ba      	ldrh	r2, [r7, #4]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	b29b      	uxth	r3, r3
 800133c:	883a      	ldrh	r2, [r7, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	f000 fd44 	bl	8001dcc <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	b29a      	uxth	r2, r3
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	4413      	add	r3, r2
 800134c:	b298      	uxth	r0, r3
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	b29b      	uxth	r3, r3
 8001352:	88ba      	ldrh	r2, [r7, #4]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b29b      	uxth	r3, r3
 8001358:	883a      	ldrh	r2, [r7, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	f000 fd36 	bl	8001dcc <ILI9341_Draw_Pixel>

        if (err <= 0)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	dc09      	bgt.n	800137a <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	3301      	adds	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
            err += dy;
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4413      	add	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
            dy += 2;
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	3302      	adds	r3, #2
 8001378:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	dd0d      	ble.n	800139c <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3b01      	subs	r3, #1
 8001384:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3302      	adds	r3, #2
 800138a:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	425b      	negs	r3, r3
 8001390:	005a      	lsls	r2, r3, #1
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	4413      	add	r3, r2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4413      	add	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	f6bf af6d 	bge.w	8001280 <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	3724      	adds	r7, #36	; 0x24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	4604      	mov	r4, r0
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	4623      	mov	r3, r4
 80013c0:	71fb      	strb	r3, [r7, #7]
 80013c2:	4603      	mov	r3, r0
 80013c4:	71bb      	strb	r3, [r7, #6]
 80013c6:	460b      	mov	r3, r1
 80013c8:	717b      	strb	r3, [r7, #5]
 80013ca:	4613      	mov	r3, r2
 80013cc:	807b      	strh	r3, [r7, #2]
	uint8_t 	function_char;
    uint8_t 	i,j;
		
	function_char = Character;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	2b1f      	cmp	r3, #31
 80013d6:	d802      	bhi.n	80013de <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	e002      	b.n	80013e4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80013de:	7dfb      	ldrb	r3, [r7, #23]
 80013e0:	3b20      	subs	r3, #32
 80013e2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	753b      	strb	r3, [r7, #20]
 80013e8:	e014      	b.n	8001414 <ILI9341_Draw_Char+0x64>
		{
		temp[k] = font[function_char][CHAR_WIDTH-k-1];
 80013ea:	7dfa      	ldrb	r2, [r7, #23]
 80013ec:	7d3b      	ldrb	r3, [r7, #20]
 80013ee:	f1c3 0005 	rsb	r0, r3, #5
 80013f2:	7d39      	ldrb	r1, [r7, #20]
 80013f4:	4c3c      	ldr	r4, [pc, #240]	; (80014e8 <ILI9341_Draw_Char+0x138>)
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4423      	add	r3, r4
 8001400:	4403      	add	r3, r0
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	440b      	add	r3, r1
 800140a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800140e:	7d3b      	ldrb	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	753b      	strb	r3, [r7, #20]
 8001414:	7d3b      	ldrb	r3, [r7, #20]
 8001416:	2b05      	cmp	r3, #5
 8001418:	d9e7      	bls.n	80013ea <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
	ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	b298      	uxth	r0, r3
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	b299      	uxth	r1, r3
 8001422:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001424:	461a      	mov	r2, r3
 8001426:	0052      	lsls	r2, r2, #1
 8001428:	4413      	add	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	b29a      	uxth	r2, r3
 800142e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	b29c      	uxth	r4, r3
 8001434:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4623      	mov	r3, r4
 800143a:	f000 fd7f 	bl	8001f3c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800143e:	2300      	movs	r3, #0
 8001440:	757b      	strb	r3, [r7, #21]
 8001442:	e048      	b.n	80014d6 <ILI9341_Draw_Char+0x126>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001444:	2300      	movs	r3, #0
 8001446:	75bb      	strb	r3, [r7, #22]
 8001448:	e03f      	b.n	80014ca <ILI9341_Draw_Char+0x11a>
            if (temp[j] & (1<<i)) {			
 800144a:	7d7b      	ldrb	r3, [r7, #21]
 800144c:	f107 0218 	add.w	r2, r7, #24
 8001450:	4413      	add	r3, r2
 8001452:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001456:	461a      	mov	r2, r3
 8001458:	7dbb      	ldrb	r3, [r7, #22]
 800145a:	fa42 f303 	asr.w	r3, r2, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d02e      	beq.n	80014c4 <ILI9341_Draw_Char+0x114>
							if(Size == 1)
 8001466:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001468:	2b01      	cmp	r3, #1
 800146a:	d110      	bne.n	800148e <ILI9341_Draw_Char+0xde>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	b29a      	uxth	r2, r3
 8001470:	7d7b      	ldrb	r3, [r7, #21]
 8001472:	b29b      	uxth	r3, r3
 8001474:	4413      	add	r3, r2
 8001476:	b298      	uxth	r0, r3
 8001478:	797b      	ldrb	r3, [r7, #5]
 800147a:	b29a      	uxth	r2, r3
 800147c:	7dbb      	ldrb	r3, [r7, #22]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4413      	add	r3, r2
 8001482:	b29b      	uxth	r3, r3
 8001484:	887a      	ldrh	r2, [r7, #2]
 8001486:	4619      	mov	r1, r3
 8001488:	f000 fca0 	bl	8001dcc <ILI9341_Draw_Pixel>
 800148c:	e01a      	b.n	80014c4 <ILI9341_Draw_Char+0x114>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800148e:	79bb      	ldrb	r3, [r7, #6]
 8001490:	b29a      	uxth	r2, r3
 8001492:	7d7b      	ldrb	r3, [r7, #21]
 8001494:	b29b      	uxth	r3, r3
 8001496:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	b29b      	uxth	r3, r3
 800149e:	4413      	add	r3, r2
 80014a0:	b298      	uxth	r0, r3
 80014a2:	797b      	ldrb	r3, [r7, #5]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	7dbb      	ldrb	r3, [r7, #22]
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	b299      	uxth	r1, r3
 80014b6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80014b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	4623      	mov	r3, r4
 80014c0:	f000 fd3c 	bl	8001f3c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80014c4:	7dbb      	ldrb	r3, [r7, #22]
 80014c6:	3301      	adds	r3, #1
 80014c8:	75bb      	strb	r3, [r7, #22]
 80014ca:	7dbb      	ldrb	r3, [r7, #22]
 80014cc:	2b07      	cmp	r3, #7
 80014ce:	d9bc      	bls.n	800144a <ILI9341_Draw_Char+0x9a>
    for (j=0; j<CHAR_WIDTH; j++) {
 80014d0:	7d7b      	ldrb	r3, [r7, #21]
 80014d2:	3301      	adds	r3, #1
 80014d4:	757b      	strb	r3, [r7, #21]
 80014d6:	7d7b      	ldrb	r3, [r7, #21]
 80014d8:	2b05      	cmp	r3, #5
 80014da:	d9b3      	bls.n	8001444 <ILI9341_Draw_Char+0x94>
							}
            }						
        }
    }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd90      	pop	{r4, r7, pc}
 80014e6:	bf00      	nop
 80014e8:	08003ba8 	.word	0x08003ba8

080014ec <ILI9341_Text_Format>:

void ILI9341_Text_Format(char* dest_str, uint8_t *msg, ...)
{
 80014ec:	b40e      	push	{r1, r2, r3}
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
    va_list arg_list;
    va_start(arg_list,msg);
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	60fb      	str	r3, [r7, #12]
    vsprintf(dest_str,msg,arg_list);
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	69f9      	ldr	r1, [r7, #28]
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f001 fef9 	bl	80032f8 <vsiprintf>
	va_end (arg_list);
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001510:	b003      	add	sp, #12
 8001512:	4770      	bx	lr

08001514 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b087      	sub	sp, #28
 8001518:	af02      	add	r7, sp, #8
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	4608      	mov	r0, r1
 800151e:	4611      	mov	r1, r2
 8001520:	461a      	mov	r2, r3
 8001522:	4603      	mov	r3, r0
 8001524:	70fb      	strb	r3, [r7, #3]
 8001526:	460b      	mov	r3, r1
 8001528:	70bb      	strb	r3, [r7, #2]
 800152a:	4613      	mov	r3, r2
 800152c:	803b      	strh	r3, [r7, #0]
	
	for(int i=strlen(Text)-1;i>=0;i--)
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7fe fe1e 	bl	8000170 <strlen>
 8001534:	4603      	mov	r3, r0
 8001536:	3b01      	subs	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	e01a      	b.n	8001572 <ILI9341_Draw_Text+0x5e>
	{
			ILI9341_Draw_Char(Text[i], X, Y, Colour, Size, Background_Colour);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	7818      	ldrb	r0, [r3, #0]
 8001544:	883c      	ldrh	r4, [r7, #0]
 8001546:	78ba      	ldrb	r2, [r7, #2]
 8001548:	78f9      	ldrb	r1, [r7, #3]
 800154a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	8c3b      	ldrh	r3, [r7, #32]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	4623      	mov	r3, r4
 8001554:	f7ff ff2c 	bl	80013b0 <ILI9341_Draw_Char>
			X += CHAR_WIDTH*Size;
 8001558:	8c3b      	ldrh	r3, [r7, #32]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	0052      	lsls	r2, r2, #1
 8001560:	4413      	add	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	78fb      	ldrb	r3, [r7, #3]
 8001568:	4413      	add	r3, r2
 800156a:	70fb      	strb	r3, [r7, #3]
	for(int i=strlen(Text)-1;i>=0;i--)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3b01      	subs	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	dae1      	bge.n	800153c <ILI9341_Draw_Text+0x28>
	}
    // while (*Text) {
    // }
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bd90      	pop	{r4, r7, pc}
	...

08001584 <ILI9341_SPI_Init>:
float ILI9341_OverallTimeElapsedMs = 0;
TIM_HandleTypeDef TIM2;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	/* Init SPI */
	hspi1.Instance = SPI1;
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <ILI9341_SPI_Init+0x180>)
 800158a:	4a5f      	ldr	r2, [pc, #380]	; (8001708 <ILI9341_SPI_Init+0x184>)
 800158c:	601a      	str	r2, [r3, #0]
	hspi1.Mode = SPI_MODE_MASTER;
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <ILI9341_SPI_Init+0x180>)
 8001590:	2200      	movs	r2, #0
 8001592:	711a      	strb	r2, [r3, #4]
	hspi1.DataSize = SPI_DATASIZE_8BIT;
 8001594:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <ILI9341_SPI_Init+0x180>)
 8001596:	2200      	movs	r2, #0
 8001598:	745a      	strb	r2, [r3, #17]
	hspi1.CPOL = SPI_CPOL_LOW;
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <ILI9341_SPI_Init+0x180>)
 800159c:	2200      	movs	r2, #0
 800159e:	719a      	strb	r2, [r3, #6]
	hspi1.CPHA = SPI_CPHA_1EDGE;
 80015a0:	4b58      	ldr	r3, [pc, #352]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	71da      	strb	r2, [r3, #7]
	hspi1.BaudRate = SPI_BAUDRATE_DIV2;
 80015a6:	4b57      	ldr	r3, [pc, #348]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	715a      	strb	r2, [r3, #5]
	hspi1.NSS = SPI_NSS_DISABLE;
 80015ac:	4b55      	ldr	r3, [pc, #340]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	751a      	strb	r2, [r3, #20]
	hspi1.BiDir = SPI_BIDIR_DISABLE;
 80015b2:	4b54      	ldr	r3, [pc, #336]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	755a      	strb	r2, [r3, #21]
	hspi1.CRC = SPI_CRC_DISABLE;
 80015b8:	4b52      	ldr	r3, [pc, #328]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	759a      	strb	r2, [r3, #22]
	hspi1.FirstBit = SPI_LSB_FIRST;
 80015be:	4b51      	ldr	r3, [pc, #324]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	741a      	strb	r2, [r3, #16]
	hspi1.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 80015c4:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	75da      	strb	r2, [r3, #23]
	hspi1.CRCDir = SPI_CRC_TX;
 80015ca:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	761a      	strb	r2, [r3, #24]
	hspi1.SpiTxDma = SPI_TX_DMA_ENABLE;
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	749a      	strb	r2, [r3, #18]
	hspi1.SpiRxDma = SPI_RX_DMA_DISABLE;
 80015d6:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80015d8:	2201      	movs	r2, #1
 80015da:	74da      	strb	r2, [r3, #19]

	/* Init GPIOs*/
	/* Init MOSI */
	SDA.GPIO_TypeDef = PORT_SPI1;
 80015dc:	4b4b      	ldr	r3, [pc, #300]	; (800170c <ILI9341_SPI_Init+0x188>)
 80015de:	4a4c      	ldr	r2, [pc, #304]	; (8001710 <ILI9341_SPI_Init+0x18c>)
 80015e0:	601a      	str	r2, [r3, #0]
	SDA.GPIO_Pin = MOSI_SPI1;
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <ILI9341_SPI_Init+0x188>)
 80015e4:	2207      	movs	r2, #7
 80015e6:	711a      	strb	r2, [r3, #4]
	SDA.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80015e8:	4b48      	ldr	r3, [pc, #288]	; (800170c <ILI9341_SPI_Init+0x188>)
 80015ea:	2202      	movs	r2, #2
 80015ec:	715a      	strb	r2, [r3, #5]
	SDA.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <ILI9341_SPI_Init+0x188>)
 80015f0:	2205      	movs	r2, #5
 80015f2:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&SDA);
 80015f4:	4845      	ldr	r0, [pc, #276]	; (800170c <ILI9341_SPI_Init+0x188>)
 80015f6:	f000 fd85 	bl	8002104 <GPIO_Init>

	/* Init SCK */
	SCK.GPIO_TypeDef = PORT_SPI1;
 80015fa:	4b46      	ldr	r3, [pc, #280]	; (8001714 <ILI9341_SPI_Init+0x190>)
 80015fc:	4a44      	ldr	r2, [pc, #272]	; (8001710 <ILI9341_SPI_Init+0x18c>)
 80015fe:	601a      	str	r2, [r3, #0]
	SCK.GPIO_Pin = SCK_SPI1;
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <ILI9341_SPI_Init+0x190>)
 8001602:	2205      	movs	r2, #5
 8001604:	711a      	strb	r2, [r3, #4]
	SCK.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8001606:	4b43      	ldr	r3, [pc, #268]	; (8001714 <ILI9341_SPI_Init+0x190>)
 8001608:	2202      	movs	r2, #2
 800160a:	715a      	strb	r2, [r3, #5]
	SCK.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <ILI9341_SPI_Init+0x190>)
 800160e:	2205      	movs	r2, #5
 8001610:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&SCK);
 8001612:	4840      	ldr	r0, [pc, #256]	; (8001714 <ILI9341_SPI_Init+0x190>)
 8001614:	f000 fd76 	bl	8002104 <GPIO_Init>

	/* Init CS */
	CS.GPIO_TypeDef = PORT_SPI1;
 8001618:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <ILI9341_SPI_Init+0x194>)
 800161a:	4a3d      	ldr	r2, [pc, #244]	; (8001710 <ILI9341_SPI_Init+0x18c>)
 800161c:	601a      	str	r2, [r3, #0]
	CS.GPIO_Pin = GPIO_PIN_3;
 800161e:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <ILI9341_SPI_Init+0x194>)
 8001620:	2203      	movs	r2, #3
 8001622:	711a      	strb	r2, [r3, #4]
	CS.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8001624:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <ILI9341_SPI_Init+0x194>)
 8001626:	2202      	movs	r2, #2
 8001628:	715a      	strb	r2, [r3, #5]
	CS.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <ILI9341_SPI_Init+0x194>)
 800162c:	2203      	movs	r2, #3
 800162e:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&CS);
 8001630:	4839      	ldr	r0, [pc, #228]	; (8001718 <ILI9341_SPI_Init+0x194>)
 8001632:	f000 fd67 	bl	8002104 <GPIO_Init>

	/* Init DC */
	DC.GPIO_TypeDef = PORT_SPI1;
 8001636:	4b39      	ldr	r3, [pc, #228]	; (800171c <ILI9341_SPI_Init+0x198>)
 8001638:	4a35      	ldr	r2, [pc, #212]	; (8001710 <ILI9341_SPI_Init+0x18c>)
 800163a:	601a      	str	r2, [r3, #0]
	DC.GPIO_Pin = GPIO_PIN_2;
 800163c:	4b37      	ldr	r3, [pc, #220]	; (800171c <ILI9341_SPI_Init+0x198>)
 800163e:	2202      	movs	r2, #2
 8001640:	711a      	strb	r2, [r3, #4]
	DC.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <ILI9341_SPI_Init+0x198>)
 8001644:	2202      	movs	r2, #2
 8001646:	715a      	strb	r2, [r3, #5]
	DC.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8001648:	4b34      	ldr	r3, [pc, #208]	; (800171c <ILI9341_SPI_Init+0x198>)
 800164a:	2203      	movs	r2, #3
 800164c:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&DC);
 800164e:	4833      	ldr	r0, [pc, #204]	; (800171c <ILI9341_SPI_Init+0x198>)
 8001650:	f000 fd58 	bl	8002104 <GPIO_Init>


	RST.GPIO_TypeDef = PORT_SPI1;
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <ILI9341_SPI_Init+0x19c>)
 8001656:	4a2e      	ldr	r2, [pc, #184]	; (8001710 <ILI9341_SPI_Init+0x18c>)
 8001658:	601a      	str	r2, [r3, #0]
	RST.GPIO_Pin = GPIO_PIN_8;
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <ILI9341_SPI_Init+0x19c>)
 800165c:	2208      	movs	r2, #8
 800165e:	711a      	strb	r2, [r3, #4]
	RST.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <ILI9341_SPI_Init+0x19c>)
 8001662:	2202      	movs	r2, #2
 8001664:	715a      	strb	r2, [r3, #5]
	RST.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <ILI9341_SPI_Init+0x19c>)
 8001668:	2203      	movs	r2, #3
 800166a:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&RST);
 800166c:	482c      	ldr	r0, [pc, #176]	; (8001720 <ILI9341_SPI_Init+0x19c>)
 800166e:	f000 fd49 	bl	8002104 <GPIO_Init>

	/*Init DMA channels */
	spiTxdma.dma_TypeDef = DMA1_3;
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 8001674:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <ILI9341_SPI_Init+0x1a4>)
 8001676:	601a      	str	r2, [r3, #0]
	spiTxdma.dma_StatusTypedef = DMA1;
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 800167a:	4a2c      	ldr	r2, [pc, #176]	; (800172c <ILI9341_SPI_Init+0x1a8>)
 800167c:	605a      	str	r2, [r3, #4]
	spiTxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 8001680:	2201      	movs	r2, #1
 8001682:	731a      	strb	r2, [r3, #12]
	spiTxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 8001686:	2201      	movs	r2, #1
 8001688:	721a      	strb	r2, [r3, #8]
	spiTxdma.dma_Direction = DMA_READ_FROM_MEMORY;
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 800168c:	2201      	movs	r2, #1
 800168e:	725a      	strb	r2, [r3, #9]
	spiTxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 8001692:	2200      	movs	r2, #0
 8001694:	729a      	strb	r2, [r3, #10]
	spiTxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 8001698:	2200      	movs	r2, #0
 800169a:	72da      	strb	r2, [r3, #11]
	spiTxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	735a      	strb	r2, [r3, #13]
	spiTxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	739a      	strb	r2, [r3, #14]
	spiTxdma.dma_Interrupt = DMA_INTERRUPT_ENABLE;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	73da      	strb	r2, [r3, #15]

	hspi1.txdma = &spiTxdma;
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80016b0:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <ILI9341_SPI_Init+0x1a0>)
 80016b2:	609a      	str	r2, [r3, #8]

	DMA_Init(hspi1.txdma);
 80016b4:	4b13      	ldr	r3, [pc, #76]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fbc7 	bl	8000e4c <DMA_Init>
	DMA_SetCallBackFn(hspi1.txdma,ILI9341_SPI_DMACallbackFn);
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	491b      	ldr	r1, [pc, #108]	; (8001730 <ILI9341_SPI_Init+0x1ac>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fcf1 	bl	80010ac <DMA_SetCallBackFn>

	/* Init SPI */
	SPI_Init(&hspi1);
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <ILI9341_SPI_Init+0x180>)
 80016cc:	f000 ff74 	bl	80025b8 <SPI_Init>


	/* Init Timer for benchmarking */
	TIM2.Instance = TIM_2_BASE;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <ILI9341_SPI_Init+0x1b0>)
 80016d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d6:	601a      	str	r2, [r3, #0]
	TIM2.Interrupt = TIM_INTERRUPT_ENABLE;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <ILI9341_SPI_Init+0x1b0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	731a      	strb	r2, [r3, #12]
	TIM2.NumberOfMilliseconds = 1;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <ILI9341_SPI_Init+0x1b0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	605a      	str	r2, [r3, #4]
	TIM2.Prescaler = TIM_PRESCALAR_VALUE_DIV_8;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <ILI9341_SPI_Init+0x1b0>)
 80016e6:	2208      	movs	r2, #8
 80016e8:	609a      	str	r2, [r3, #8]

	/* Set Callback function for timer */
	TIM_SetCallBackFn(&TIM2,ILI9341_TimerCallbackFn);
 80016ea:	4913      	ldr	r1, [pc, #76]	; (8001738 <ILI9341_SPI_Init+0x1b4>)
 80016ec:	4811      	ldr	r0, [pc, #68]	; (8001734 <ILI9341_SPI_Init+0x1b0>)
 80016ee:	f001 f9db 	bl	8002aa8 <TIM_SetCallBackFn>
	/* Init */
	TIM_Init(&TIM2);	
 80016f2:	4810      	ldr	r0, [pc, #64]	; (8001734 <ILI9341_SPI_Init+0x1b0>)
 80016f4:	f001 f94a 	bl	800298c <TIM_Init>
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80016f8:	2100      	movs	r1, #0
 80016fa:	4807      	ldr	r0, [pc, #28]	; (8001718 <ILI9341_SPI_Init+0x194>)
 80016fc:	f000 ff24 	bl	8002548 <GPIO_WritePin>

// MX_SPI5_Init();																							//SPI INIT
// MX_GPIO_Init();																							//GPIO INIT
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000104 	.word	0x20000104
 8001708:	40013000 	.word	0x40013000
 800170c:	200000f4 	.word	0x200000f4
 8001710:	40010800 	.word	0x40010800
 8001714:	200000fc 	.word	0x200000fc
 8001718:	20000120 	.word	0x20000120
 800171c:	200000ec 	.word	0x200000ec
 8001720:	200000e4 	.word	0x200000e4
 8001724:	200000d4 	.word	0x200000d4
 8001728:	40020030 	.word	0x40020030
 800172c:	40020000 	.word	0x40020000
 8001730:	08001819 	.word	0x08001819
 8001734:	20000320 	.word	0x20000320
 8001738:	080017fd 	.word	0x080017fd

0800173c <ILI9341_Return_BenchmarkSize>:

int ILI9341_Return_BenchmarkSize()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
	int size = TotalSize;
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <ILI9341_Return_BenchmarkSize+0x20>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	607b      	str	r3, [r7, #4]
	TotalSize = 0;
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <ILI9341_Return_BenchmarkSize+0x20>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
	return size;
 800174e:	687b      	ldr	r3, [r7, #4]
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000008c 	.word	0x2000008c

08001760 <ILI9341_StartBenchmark>:

void ILI9341_StartBenchmark()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	/* Reset Timer Elapsed counter */
	ILI9341_CurrentTimeElapsedMs = 0;
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <ILI9341_StartBenchmark+0x1c>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
	/* Reset Timer Counter */
	TIM2.Instance->CNT = 0;
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <ILI9341_StartBenchmark+0x20>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
	/* Start Timer */
	TIM_Start(&TIM2);
 8001772:	4803      	ldr	r0, [pc, #12]	; (8001780 <ILI9341_StartBenchmark+0x20>)
 8001774:	f001 f964 	bl	8002a40 <TIM_Start>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000094 	.word	0x20000094
 8001780:	20000320 	.word	0x20000320
 8001784:	00000000 	.word	0x00000000

08001788 <ILI9341_StopBenchmark>:

void ILI9341_StopBenchmark()
{
 8001788:	b598      	push	{r3, r4, r7, lr}
 800178a:	af00      	add	r7, sp, #0
	/* Stop Timer */
	TIM_Stop(&TIM2);
 800178c:	4818      	ldr	r0, [pc, #96]	; (80017f0 <ILI9341_StopBenchmark+0x68>)
 800178e:	f001 f971 	bl	8002a74 <TIM_Stop>
	/* Calculate TimeElapsed and add it to overallTimeElapsed */
	ILI9341_OverallTimeElapsedMs += ILI9341_CurrentTimeElapsedMs + (float)((TIM2.Instance->CNT) * 0.001);
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <ILI9341_StopBenchmark+0x6c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f8de 	bl	8000958 <__aeabi_ui2f>
 800179c:	4604      	mov	r4, r0
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <ILI9341_StopBenchmark+0x68>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe ff57 	bl	8000658 <__aeabi_ui2d>
 80017aa:	a30f      	add	r3, pc, #60	; (adr r3, 80017e8 <ILI9341_StopBenchmark+0x60>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe fce6 	bl	8000180 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7fe ffc6 	bl	800074c <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4619      	mov	r1, r3
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff f817 	bl	80007f8 <__addsf3>
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <ILI9341_StopBenchmark+0x70>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4619      	mov	r1, r3
 80017d4:	4610      	mov	r0, r2
 80017d6:	f7ff f80f 	bl	80007f8 <__addsf3>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <ILI9341_StopBenchmark+0x70>)
 80017e0:	601a      	str	r2, [r3, #0]
}
 80017e2:	bf00      	nop
 80017e4:	bd98      	pop	{r3, r4, r7, pc}
 80017e6:	bf00      	nop
 80017e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017ec:	3f50624d 	.word	0x3f50624d
 80017f0:	20000320 	.word	0x20000320
 80017f4:	20000094 	.word	0x20000094
 80017f8:	20000098 	.word	0x20000098

080017fc <ILI9341_TimerCallbackFn>:

void ILI9341_TimerCallbackFn()
{	
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
	ILI9341_CurrentTimeElapsedMs++;
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <ILI9341_TimerCallbackFn+0x18>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	4a03      	ldr	r2, [pc, #12]	; (8001814 <ILI9341_TimerCallbackFn+0x18>)
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000094 	.word	0x20000094

08001818 <ILI9341_SPI_DMACallbackFn>:


void ILI9341_SPI_DMACallbackFn()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0

	DMA_Stop(hspi1.txdma);
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <ILI9341_SPI_DMACallbackFn+0x54>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fc11 	bl	8001048 <DMA_Stop>
	//DMA_InterruptDisable(hspi1.txdma);
	DMA_ClearInterruptFlag(hspi1.txdma);
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <ILI9341_SPI_DMACallbackFn+0x54>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc7a 	bl	8001124 <DMA_ClearInterruptFlag>
	if(Color_burstCounter < Color_burstSize)
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <ILI9341_SPI_DMACallbackFn+0x58>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <ILI9341_SPI_DMACallbackFn+0x5c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d20c      	bcs.n	8001856 <ILI9341_SPI_DMACallbackFn+0x3e>
	{
		SPI_TransmitDMA(&hspi1, (unsigned char *)Color_buffer, Color_bufferSize);
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <ILI9341_SPI_DMACallbackFn+0x60>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	490e      	ldr	r1, [pc, #56]	; (800187c <ILI9341_SPI_DMACallbackFn+0x64>)
 8001844:	4809      	ldr	r0, [pc, #36]	; (800186c <ILI9341_SPI_DMACallbackFn+0x54>)
 8001846:	f001 f874 	bl	8002932 <SPI_TransmitDMA>
		Color_burstCounter++;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <ILI9341_SPI_DMACallbackFn+0x58>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <ILI9341_SPI_DMACallbackFn+0x58>)
 8001852:	6013      	str	r3, [r2, #0]
		/* STOP benchmarking */
		#if BENCHMARK_ENABLE
		ILI9341_StopBenchmark();
		#endif
	}
}
 8001854:	e008      	b.n	8001868 <ILI9341_SPI_DMACallbackFn+0x50>
		Color_burstCounter = 0;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <ILI9341_SPI_DMACallbackFn+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
		GPIO_WritePin(&CS, GPIO_PIN_SET);
 800185c:	2101      	movs	r1, #1
 800185e:	4808      	ldr	r0, [pc, #32]	; (8001880 <ILI9341_SPI_DMACallbackFn+0x68>)
 8001860:	f000 fe72 	bl	8002548 <GPIO_WritePin>
		ILI9341_StopBenchmark();
 8001864:	f7ff ff90 	bl	8001788 <ILI9341_StopBenchmark>
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000104 	.word	0x20000104
 8001870:	20000088 	.word	0x20000088
 8001874:	20000090 	.word	0x20000090
 8001878:	20000084 	.word	0x20000084
 800187c:	2000012c 	.word	0x2000012c
 8001880:	20000120 	.word	0x20000120

08001884 <ILI9341_Return_TimeElapsed>:

float ILI9341_Return_TimeElapsed()
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
	float buff = ILI9341_OverallTimeElapsedMs;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <ILI9341_Return_TimeElapsed+0x28>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	607b      	str	r3, [r7, #4]
	ILI9341_OverallTimeElapsedMs = 0;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <ILI9341_Return_TimeElapsed+0x28>)
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
	ILI9341_CurrentTimeElapsedMs = 0;
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <ILI9341_Return_TimeElapsed+0x2c>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
	return buff;
 800189e:	687b      	ldr	r3, [r7, #4]
} 
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000098 	.word	0x20000098
 80018b0:	20000094 	.word	0x20000094

080018b4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(uint8_t SPI_Data)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
//HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
SPI_Transmit(&hspi1, &SPI_Data, 1);
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	2201      	movs	r2, #1
 80018c2:	4619      	mov	r1, r3
 80018c4:	4803      	ldr	r0, [pc, #12]	; (80018d4 <ILI9341_SPI_Send+0x20>)
 80018c6:	f000 ffe7 	bl	8002898 <SPI_Transmit>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000104 	.word	0x20000104

080018d8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80018e2:	2100      	movs	r1, #0
 80018e4:	4809      	ldr	r0, [pc, #36]	; (800190c <ILI9341_Write_Command+0x34>)
 80018e6:	f000 fe2f 	bl	8002548 <GPIO_WritePin>
	GPIO_WritePin(&DC, GPIO_PIN_RESET);
 80018ea:	2100      	movs	r1, #0
 80018ec:	4808      	ldr	r0, [pc, #32]	; (8001910 <ILI9341_Write_Command+0x38>)
 80018ee:	f000 fe2b 	bl	8002548 <GPIO_WritePin>
	ILI9341_SPI_Send(Command);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ffdd 	bl	80018b4 <ILI9341_SPI_Send>
	GPIO_WritePin(&CS, GPIO_PIN_SET);
 80018fa:	2101      	movs	r1, #1
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <ILI9341_Write_Command+0x34>)
 80018fe:	f000 fe23 	bl	8002548 <GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000120 	.word	0x20000120
 8001910:	200000ec 	.word	0x200000ec

08001914 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 800191e:	2100      	movs	r1, #0
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <ILI9341_Write_Data+0x34>)
 8001922:	f000 fe11 	bl	8002548 <GPIO_WritePin>
	GPIO_WritePin(&DC, GPIO_PIN_SET);
 8001926:	2101      	movs	r1, #1
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <ILI9341_Write_Data+0x38>)
 800192a:	f000 fe0d 	bl	8002548 <GPIO_WritePin>
	ILI9341_SPI_Send(Data);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ffbf 	bl	80018b4 <ILI9341_SPI_Send>
	GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001936:	2101      	movs	r1, #1
 8001938:	4803      	ldr	r0, [pc, #12]	; (8001948 <ILI9341_Write_Data+0x34>)
 800193a:	f000 fe05 	bl	8002548 <GPIO_WritePin>

// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
// ILI9341_SPI_Send(Data);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000120 	.word	0x20000120
 800194c:	200000ec 	.word	0x200000ec

08001950 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4604      	mov	r4, r0
 8001958:	4608      	mov	r0, r1
 800195a:	4611      	mov	r1, r2
 800195c:	461a      	mov	r2, r3
 800195e:	4623      	mov	r3, r4
 8001960:	80fb      	strh	r3, [r7, #6]
 8001962:	4603      	mov	r3, r0
 8001964:	80bb      	strh	r3, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]
 800196a:	4613      	mov	r3, r2
 800196c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800196e:	202a      	movs	r0, #42	; 0x2a
 8001970:	f7ff ffb2 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001974:	88fb      	ldrh	r3, [r7, #6]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	b29b      	uxth	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ffc9 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ffc4 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	b29b      	uxth	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffbd 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ffb8 	bl	8001914 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80019a4:	202b      	movs	r0, #43	; 0x2b
 80019a6:	f7ff ff97 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ffae 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80019b8:	88bb      	ldrh	r3, [r7, #4]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ffa9 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80019c2:	883b      	ldrh	r3, [r7, #0]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ffa2 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80019d0:	883b      	ldrh	r3, [r7, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff9d 	bl	8001914 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80019da:	202c      	movs	r0, #44	; 0x2c
 80019dc:	f7ff ff7c 	bl	80018d8 <ILI9341_Write_Command>
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd90      	pop	{r4, r7, pc}

080019e8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	GPIO_WritePin(&RST, GPIO_PIN_RESET);
 80019ec:	2100      	movs	r1, #0
 80019ee:	4809      	ldr	r0, [pc, #36]	; (8001a14 <ILI9341_Reset+0x2c>)
 80019f0:	f000 fdaa 	bl	8002548 <GPIO_WritePin>
	SYSTICK_DelayMs(200);
 80019f4:	20c8      	movs	r0, #200	; 0xc8
 80019f6:	f7ff f9b9 	bl	8000d6c <SYSTICK_DelayMs>
	GPIO_WritePin(&CS, GPIO_PIN_RESET);
 80019fa:	2100      	movs	r1, #0
 80019fc:	4806      	ldr	r0, [pc, #24]	; (8001a18 <ILI9341_Reset+0x30>)
 80019fe:	f000 fda3 	bl	8002548 <GPIO_WritePin>
	SYSTICK_DelayMs(200);
 8001a02:	20c8      	movs	r0, #200	; 0xc8
 8001a04:	f7ff f9b2 	bl	8000d6c <SYSTICK_DelayMs>
	GPIO_WritePin(&RST, GPIO_PIN_SET);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	4802      	ldr	r0, [pc, #8]	; (8001a14 <ILI9341_Reset+0x2c>)
 8001a0c:	f000 fd9c 	bl	8002548 <GPIO_WritePin>
	// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
	// HAL_Delay(200);
	// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	// HAL_Delay(200);
	// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200000e4 	.word	0x200000e4
 8001a18:	20000120 	.word	0x20000120

08001a1c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001a2a:	2036      	movs	r0, #54	; 0x36
 8001a2c:	f7ff ff54 	bl	80018d8 <ILI9341_Write_Command>
SYSTICK_DelayMs(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff f99b 	bl	8000d6c <SYSTICK_DelayMs>
	
switch(screen_rotation) 
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d837      	bhi.n	8001aac <ILI9341_Set_Rotation+0x90>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <ILI9341_Set_Rotation+0x28>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001a6b 	.word	0x08001a6b
 8001a4c:	08001a81 	.word	0x08001a81
 8001a50:	08001a97 	.word	0x08001a97
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001a54:	2048      	movs	r0, #72	; 0x48
 8001a56:	f7ff ff5d 	bl	8001914 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <ILI9341_Set_Rotation+0x9c>)
 8001a5c:	22f0      	movs	r2, #240	; 0xf0
 8001a5e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <ILI9341_Set_Rotation+0xa0>)
 8001a62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a66:	801a      	strh	r2, [r3, #0]
			break;
 8001a68:	e021      	b.n	8001aae <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001a6a:	2028      	movs	r0, #40	; 0x28
 8001a6c:	f7ff ff52 	bl	8001914 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <ILI9341_Set_Rotation+0x9c>)
 8001a72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <ILI9341_Set_Rotation+0xa0>)
 8001a7a:	22f0      	movs	r2, #240	; 0xf0
 8001a7c:	801a      	strh	r2, [r3, #0]
			break;
 8001a7e:	e016      	b.n	8001aae <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001a80:	2088      	movs	r0, #136	; 0x88
 8001a82:	f7ff ff47 	bl	8001914 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <ILI9341_Set_Rotation+0x9c>)
 8001a88:	22f0      	movs	r2, #240	; 0xf0
 8001a8a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <ILI9341_Set_Rotation+0xa0>)
 8001a8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a92:	801a      	strh	r2, [r3, #0]
			break;
 8001a94:	e00b      	b.n	8001aae <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001a96:	20e8      	movs	r0, #232	; 0xe8
 8001a98:	f7ff ff3c 	bl	8001914 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <ILI9341_Set_Rotation+0x9c>)
 8001a9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001aa2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	; (8001abc <ILI9341_Set_Rotation+0xa0>)
 8001aa6:	22f0      	movs	r2, #240	; 0xf0
 8001aa8:	801a      	strh	r2, [r3, #0]
			break;
 8001aaa:	e000      	b.n	8001aae <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001aac:	bf00      	nop
	}
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000002 	.word	0x20000002
 8001abc:	20000000 	.word	0x20000000

08001ac0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
// HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
	GPIO_WritePin(&RST, GPIO_PIN_SET);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <ILI9341_Enable+0x10>)
 8001ac8:	f000 fd3e 	bl	8002548 <GPIO_WritePin>

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200000e4 	.word	0x200000e4

08001ad4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0

ILI9341_SPI_Init();
 8001ad8:	f7ff fd54 	bl	8001584 <ILI9341_SPI_Init>
ILI9341_Enable();
 8001adc:	f7ff fff0 	bl	8001ac0 <ILI9341_Enable>
ILI9341_Reset();
 8001ae0:	f7ff ff82 	bl	80019e8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff fef7 	bl	80018d8 <ILI9341_Write_Command>
SYSTICK_DelayMs(1000);
 8001aea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aee:	f7ff f93d 	bl	8000d6c <SYSTICK_DelayMs>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8001af2:	20cb      	movs	r0, #203	; 0xcb
 8001af4:	f7ff fef0 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8001af8:	2039      	movs	r0, #57	; 0x39
 8001afa:	f7ff ff0b 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8001afe:	202c      	movs	r0, #44	; 0x2c
 8001b00:	f7ff ff08 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff ff05 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8001b0a:	2034      	movs	r0, #52	; 0x34
 8001b0c:	f7ff ff02 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8001b10:	2002      	movs	r0, #2
 8001b12:	f7ff feff 	bl	8001914 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8001b16:	20cf      	movs	r0, #207	; 0xcf
 8001b18:	f7ff fede 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fef9 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001b22:	20c1      	movs	r0, #193	; 0xc1
 8001b24:	f7ff fef6 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8001b28:	2030      	movs	r0, #48	; 0x30
 8001b2a:	f7ff fef3 	bl	8001914 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8001b2e:	20e8      	movs	r0, #232	; 0xe8
 8001b30:	f7ff fed2 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8001b34:	2085      	movs	r0, #133	; 0x85
 8001b36:	f7ff feed 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff feea 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8001b40:	2078      	movs	r0, #120	; 0x78
 8001b42:	f7ff fee7 	bl	8001914 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8001b46:	20ea      	movs	r0, #234	; 0xea
 8001b48:	f7ff fec6 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fee1 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff fede 	bl	8001914 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8001b58:	20ed      	movs	r0, #237	; 0xed
 8001b5a:	f7ff febd 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001b5e:	2064      	movs	r0, #100	; 0x64
 8001b60:	f7ff fed8 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f7ff fed5 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8001b6a:	2012      	movs	r0, #18
 8001b6c:	f7ff fed2 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001b70:	2081      	movs	r0, #129	; 0x81
 8001b72:	f7ff fecf 	bl	8001914 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001b76:	20f7      	movs	r0, #247	; 0xf7
 8001b78:	f7ff feae 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8001b7c:	2020      	movs	r0, #32
 8001b7e:	f7ff fec9 	bl	8001914 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001b82:	20c0      	movs	r0, #192	; 0xc0
 8001b84:	f7ff fea8 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8001b88:	2023      	movs	r0, #35	; 0x23
 8001b8a:	f7ff fec3 	bl	8001914 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001b8e:	20c1      	movs	r0, #193	; 0xc1
 8001b90:	f7ff fea2 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001b94:	2010      	movs	r0, #16
 8001b96:	f7ff febd 	bl	8001914 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8001b9a:	20c5      	movs	r0, #197	; 0xc5
 8001b9c:	f7ff fe9c 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001ba0:	203e      	movs	r0, #62	; 0x3e
 8001ba2:	f7ff feb7 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001ba6:	2028      	movs	r0, #40	; 0x28
 8001ba8:	f7ff feb4 	bl	8001914 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8001bac:	20c7      	movs	r0, #199	; 0xc7
 8001bae:	f7ff fe93 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001bb2:	2086      	movs	r0, #134	; 0x86
 8001bb4:	f7ff feae 	bl	8001914 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8001bb8:	2036      	movs	r0, #54	; 0x36
 8001bba:	f7ff fe8d 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001bbe:	2048      	movs	r0, #72	; 0x48
 8001bc0:	f7ff fea8 	bl	8001914 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001bc4:	203a      	movs	r0, #58	; 0x3a
 8001bc6:	f7ff fe87 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8001bca:	2055      	movs	r0, #85	; 0x55
 8001bcc:	f7ff fea2 	bl	8001914 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001bd0:	20b1      	movs	r0, #177	; 0xb1
 8001bd2:	f7ff fe81 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fe9c 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8001bdc:	2018      	movs	r0, #24
 8001bde:	f7ff fe99 	bl	8001914 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001be2:	20b6      	movs	r0, #182	; 0xb6
 8001be4:	f7ff fe78 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8001be8:	2008      	movs	r0, #8
 8001bea:	f7ff fe93 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8001bee:	2082      	movs	r0, #130	; 0x82
 8001bf0:	f7ff fe90 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8001bf4:	2027      	movs	r0, #39	; 0x27
 8001bf6:	f7ff fe8d 	bl	8001914 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8001bfa:	20f2      	movs	r0, #242	; 0xf2
 8001bfc:	f7ff fe6c 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff fe87 	bl	8001914 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8001c06:	2026      	movs	r0, #38	; 0x26
 8001c08:	f7ff fe66 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff fe81 	bl	8001914 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8001c12:	20e0      	movs	r0, #224	; 0xe0
 8001c14:	f7ff fe60 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8001c18:	200f      	movs	r0, #15
 8001c1a:	f7ff fe7b 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001c1e:	2031      	movs	r0, #49	; 0x31
 8001c20:	f7ff fe78 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8001c24:	202b      	movs	r0, #43	; 0x2b
 8001c26:	f7ff fe75 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001c2a:	200c      	movs	r0, #12
 8001c2c:	f7ff fe72 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001c30:	200e      	movs	r0, #14
 8001c32:	f7ff fe6f 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001c36:	2008      	movs	r0, #8
 8001c38:	f7ff fe6c 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8001c3c:	204e      	movs	r0, #78	; 0x4e
 8001c3e:	f7ff fe69 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8001c42:	20f1      	movs	r0, #241	; 0xf1
 8001c44:	f7ff fe66 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8001c48:	2037      	movs	r0, #55	; 0x37
 8001c4a:	f7ff fe63 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001c4e:	2007      	movs	r0, #7
 8001c50:	f7ff fe60 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001c54:	2010      	movs	r0, #16
 8001c56:	f7ff fe5d 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001c5a:	2003      	movs	r0, #3
 8001c5c:	f7ff fe5a 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001c60:	200e      	movs	r0, #14
 8001c62:	f7ff fe57 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001c66:	2009      	movs	r0, #9
 8001c68:	f7ff fe54 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff fe51 	bl	8001914 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001c72:	20e1      	movs	r0, #225	; 0xe1
 8001c74:	f7ff fe30 	bl	80018d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff fe4b 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001c7e:	200e      	movs	r0, #14
 8001c80:	f7ff fe48 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001c84:	2014      	movs	r0, #20
 8001c86:	f7ff fe45 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001c8a:	2003      	movs	r0, #3
 8001c8c:	f7ff fe42 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001c90:	2011      	movs	r0, #17
 8001c92:	f7ff fe3f 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001c96:	2007      	movs	r0, #7
 8001c98:	f7ff fe3c 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001c9c:	2031      	movs	r0, #49	; 0x31
 8001c9e:	f7ff fe39 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001ca2:	20c1      	movs	r0, #193	; 0xc1
 8001ca4:	f7ff fe36 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8001ca8:	2048      	movs	r0, #72	; 0x48
 8001caa:	f7ff fe33 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001cae:	2008      	movs	r0, #8
 8001cb0:	f7ff fe30 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001cb4:	200f      	movs	r0, #15
 8001cb6:	f7ff fe2d 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f7ff fe2a 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001cc0:	2031      	movs	r0, #49	; 0x31
 8001cc2:	f7ff fe27 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001cc6:	2036      	movs	r0, #54	; 0x36
 8001cc8:	f7ff fe24 	bl	8001914 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001ccc:	200f      	movs	r0, #15
 8001cce:	f7ff fe21 	bl	8001914 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001cd2:	2011      	movs	r0, #17
 8001cd4:	f7ff fe00 	bl	80018d8 <ILI9341_Write_Command>
SYSTICK_DelayMs(120);
 8001cd8:	2078      	movs	r0, #120	; 0x78
 8001cda:	f7ff f847 	bl	8000d6c <SYSTICK_DelayMs>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001cde:	2029      	movs	r0, #41	; 0x29
 8001ce0:	f7ff fdfa 	bl	80018d8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff fe99 	bl	8001a1c <ILI9341_Set_Rotation>
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	80fb      	strh	r3, [r7, #6]
//SENDS COLOUR
	
GPIO_WritePin(&DC, GPIO_PIN_SET);
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	482c      	ldr	r0, [pc, #176]	; (8001db0 <ILI9341_Draw_Colour_Burst+0xc0>)
 8001d00:	f000 fc22 	bl	8002548 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001d04:	2100      	movs	r1, #0
 8001d06:	482b      	ldr	r0, [pc, #172]	; (8001db4 <ILI9341_Draw_Colour_Burst+0xc4>)
 8001d08:	f000 fc1e 	bl	8002548 <GPIO_WritePin>
if((Size*2) < BURST_MAX_SIZE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d14:	d203      	bcs.n	8001d1e <ILI9341_Draw_Colour_Burst+0x2e>
{
	Color_bufferSize = Size;
 8001d16:	4a28      	ldr	r2, [pc, #160]	; (8001db8 <ILI9341_Draw_Colour_Burst+0xc8>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	e003      	b.n	8001d26 <ILI9341_Draw_Colour_Burst+0x36>
}
else
{
	Color_bufferSize = BURST_MAX_SIZE;
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <ILI9341_Draw_Colour_Burst+0xc8>)
 8001d20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d24:	601a      	str	r2, [r3, #0]
}

unsigned char shifted = 	Colour>>8;;
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	0a1b      	lsrs	r3, r3, #8
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	74fb      	strb	r3, [r7, #19]
for(uint32_t j = 0; j < Color_bufferSize; j+=2)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	e00d      	b.n	8001d50 <ILI9341_Draw_Colour_Burst+0x60>
{
	Color_buffer[j] = 	shifted;
 8001d34:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <ILI9341_Draw_Colour_Burst+0xcc>)
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	4413      	add	r3, r2
 8001d3a:	7cfa      	ldrb	r2, [r7, #19]
 8001d3c:	701a      	strb	r2, [r3, #0]
	Color_buffer[j+1] = Colour;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	b2d1      	uxtb	r1, r2
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <ILI9341_Draw_Colour_Burst+0xcc>)
 8001d48:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Color_bufferSize; j+=2)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <ILI9341_Draw_Colour_Burst+0xc8>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3ec      	bcc.n	8001d34 <ILI9341_Draw_Colour_Burst+0x44>
}
uint32_t Sending_Size = Size*2;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
Color_burstSize = Sending_Size/Color_bufferSize;
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <ILI9341_Draw_Colour_Burst+0xc8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4a15      	ldr	r2, [pc, #84]	; (8001dc0 <ILI9341_Draw_Colour_Burst+0xd0>)
 8001d6c:	6013      	str	r3, [r2, #0]
uint32_t Remainder_from_block = Sending_Size%Color_bufferSize;
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <ILI9341_Draw_Colour_Burst+0xc8>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d78:	fb02 f201 	mul.w	r2, r2, r1
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]

#if BENCHMARK_ENABLE
TotalSize += Sending_Size;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <ILI9341_Draw_Colour_Burst+0xd4>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <ILI9341_Draw_Colour_Burst+0xd4>)
 8001d8a:	6013      	str	r3, [r2, #0]
ILI9341_StartBenchmark();
 8001d8c:	f7ff fce8 	bl	8001760 <ILI9341_StartBenchmark>
#endif

#if TRANSMIT_MODE == DMA_MODE
if(Color_burstSize)
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <ILI9341_Draw_Colour_Burst+0xd0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <ILI9341_Draw_Colour_Burst+0xb6>
{
	SPI_TransmitDMA(&hspi1, (unsigned char *)Color_buffer, Color_bufferSize);
 8001d98:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <ILI9341_Draw_Colour_Burst+0xc8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4907      	ldr	r1, [pc, #28]	; (8001dbc <ILI9341_Draw_Colour_Burst+0xcc>)
 8001da0:	4809      	ldr	r0, [pc, #36]	; (8001dc8 <ILI9341_Draw_Colour_Burst+0xd8>)
 8001da2:	f000 fdc6 	bl	8002932 <SPI_TransmitDMA>
SPI_Transmit(&hspi1, (unsigned char *)Color_buffer, Remainder_from_block);
GPIO_WritePin(&CS, GPIO_PIN_SET);

#endif

}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200000ec 	.word	0x200000ec
 8001db4:	20000120 	.word	0x20000120
 8001db8:	20000084 	.word	0x20000084
 8001dbc:	2000012c 	.word	0x2000012c
 8001dc0:	20000090 	.word	0x20000090
 8001dc4:	2000008c 	.word	0x2000008c
 8001dc8:	20000104 	.word	0x20000104

08001dcc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	80bb      	strh	r3, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001dde:	4b52      	ldr	r3, [pc, #328]	; (8001f28 <ILI9341_Draw_Pixel+0x15c>)
 8001de0:	881b      	ldrh	r3, [r3, #0]
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	f080 809a 	bcs.w	8001f20 <ILI9341_Draw_Pixel+0x154>
 8001dec:	4b4f      	ldr	r3, [pc, #316]	; (8001f2c <ILI9341_Draw_Pixel+0x160>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	88ba      	ldrh	r2, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	f080 8093 	bcs.w	8001f20 <ILI9341_Draw_Pixel+0x154>
	
//ADDRESS
GPIO_WritePin(&DC, GPIO_PIN_RESET);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	484c      	ldr	r0, [pc, #304]	; (8001f30 <ILI9341_Draw_Pixel+0x164>)
 8001dfe:	f000 fba3 	bl	8002548 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001e02:	2100      	movs	r1, #0
 8001e04:	484b      	ldr	r0, [pc, #300]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001e06:	f000 fb9f 	bl	8002548 <GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001e0a:	202a      	movs	r0, #42	; 0x2a
 8001e0c:	f7ff fd52 	bl	80018b4 <ILI9341_SPI_Send>
GPIO_WritePin(&DC, GPIO_PIN_SET);
 8001e10:	2101      	movs	r1, #1
 8001e12:	4847      	ldr	r0, [pc, #284]	; (8001f30 <ILI9341_Draw_Pixel+0x164>)
 8001e14:	f000 fb98 	bl	8002548 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001e18:	2101      	movs	r1, #1
 8001e1a:	4846      	ldr	r0, [pc, #280]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001e1c:	f000 fb94 	bl	8002548 <GPIO_WritePin>
// ILI9341_SPI_Send(0x2A);
// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		

//XDATA
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001e20:	2100      	movs	r1, #0
 8001e22:	4844      	ldr	r0, [pc, #272]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001e24:	f000 fb90 	bl	8002548 <GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	0a1b      	lsrs	r3, r3, #8
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	753b      	strb	r3, [r7, #20]
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	757b      	strb	r3, [r7, #21]
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	121b      	asrs	r3, r3, #8
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	75bb      	strb	r3, [r7, #22]
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	3301      	adds	r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	75fb      	strb	r3, [r7, #23]
SPI_Transmit(&hspi1, Temp_Buffer, 4);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	2204      	movs	r2, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4838      	ldr	r0, [pc, #224]	; (8001f38 <ILI9341_Draw_Pixel+0x16c>)
 8001e56:	f000 fd1f 	bl	8002898 <SPI_Transmit>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	4835      	ldr	r0, [pc, #212]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001e5e:	f000 fb73 	bl	8002548 <GPIO_WritePin>
// unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
// HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);

//ADDRESS
GPIO_WritePin(&DC, GPIO_PIN_RESET);
 8001e62:	2100      	movs	r1, #0
 8001e64:	4832      	ldr	r0, [pc, #200]	; (8001f30 <ILI9341_Draw_Pixel+0x164>)
 8001e66:	f000 fb6f 	bl	8002548 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4831      	ldr	r0, [pc, #196]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001e6e:	f000 fb6b 	bl	8002548 <GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8001e72:	202b      	movs	r0, #43	; 0x2b
 8001e74:	f7ff fd1e 	bl	80018b4 <ILI9341_SPI_Send>
GPIO_WritePin(&DC, GPIO_PIN_SET);
 8001e78:	2101      	movs	r1, #1
 8001e7a:	482d      	ldr	r0, [pc, #180]	; (8001f30 <ILI9341_Draw_Pixel+0x164>)
 8001e7c:	f000 fb64 	bl	8002548 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001e80:	2101      	movs	r1, #1
 8001e82:	482c      	ldr	r0, [pc, #176]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001e84:	f000 fb60 	bl	8002548 <GPIO_WritePin>
// ILI9341_SPI_Send(0x2B);
// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			

//YDATA
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001e88:	2100      	movs	r1, #0
 8001e8a:	482a      	ldr	r0, [pc, #168]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001e8c:	f000 fb5c 	bl	8002548 <GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001e90:	88bb      	ldrh	r3, [r7, #4]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	743b      	strb	r3, [r7, #16]
 8001e9a:	88bb      	ldrh	r3, [r7, #4]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	747b      	strb	r3, [r7, #17]
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	121b      	asrs	r3, r3, #8
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	74bb      	strb	r3, [r7, #18]
 8001eaa:	88bb      	ldrh	r3, [r7, #4]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	3301      	adds	r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	74fb      	strb	r3, [r7, #19]
SPI_Transmit(&hspi1, Temp_Buffer1, 4);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481e      	ldr	r0, [pc, #120]	; (8001f38 <ILI9341_Draw_Pixel+0x16c>)
 8001ebe:	f000 fceb 	bl	8002898 <SPI_Transmit>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	481b      	ldr	r0, [pc, #108]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001ec6:	f000 fb3f 	bl	8002548 <GPIO_WritePin>
// unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
// HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);

//ADDRESS	
GPIO_WritePin(&DC, GPIO_PIN_RESET);
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4818      	ldr	r0, [pc, #96]	; (8001f30 <ILI9341_Draw_Pixel+0x164>)
 8001ece:	f000 fb3b 	bl	8002548 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4817      	ldr	r0, [pc, #92]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001ed6:	f000 fb37 	bl	8002548 <GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001eda:	202c      	movs	r0, #44	; 0x2c
 8001edc:	f7ff fcea 	bl	80018b4 <ILI9341_SPI_Send>
GPIO_WritePin(&DC, GPIO_PIN_SET);
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4813      	ldr	r0, [pc, #76]	; (8001f30 <ILI9341_Draw_Pixel+0x164>)
 8001ee4:	f000 fb30 	bl	8002548 <GPIO_WritePin>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4812      	ldr	r0, [pc, #72]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001eec:	f000 fb2c 	bl	8002548 <GPIO_WritePin>
// ILI9341_SPI_Send(0x2C);
// HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			

//COLOUR	
GPIO_WritePin(&CS, GPIO_PIN_RESET);
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4810      	ldr	r0, [pc, #64]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001ef4:	f000 fb28 	bl	8002548 <GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	733b      	strb	r3, [r7, #12]
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	737b      	strb	r3, [r7, #13]
SPI_Transmit(&hspi1, Temp_Buffer2, 2);
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4809      	ldr	r0, [pc, #36]	; (8001f38 <ILI9341_Draw_Pixel+0x16c>)
 8001f12:	f000 fcc1 	bl	8002898 <SPI_Transmit>
GPIO_WritePin(&CS, GPIO_PIN_SET);
 8001f16:	2101      	movs	r1, #1
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <ILI9341_Draw_Pixel+0x168>)
 8001f1a:	f000 fb15 	bl	8002548 <GPIO_WritePin>
 8001f1e:	e000      	b.n	8001f22 <ILI9341_Draw_Pixel+0x156>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001f20:	bf00      	nop
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
// unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
// HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
// HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	
}
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000002 	.word	0x20000002
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	200000ec 	.word	0x200000ec
 8001f34:	20000120 	.word	0x20000120
 8001f38:	20000104 	.word	0x20000104

08001f3c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4623      	mov	r3, r4
 8001f4c:	80fb      	strh	r3, [r7, #6]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	80bb      	strh	r3, [r7, #4]
 8001f52:	460b      	mov	r3, r1
 8001f54:	807b      	strh	r3, [r7, #2]
 8001f56:	4613      	mov	r3, r2
 8001f58:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <ILI9341_Draw_Rectangle+0xb0>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	88fa      	ldrh	r2, [r7, #6]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d23d      	bcs.n	8001fe2 <ILI9341_Draw_Rectangle+0xa6>
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	88ba      	ldrh	r2, [r7, #4]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d237      	bcs.n	8001fe2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <ILI9341_Draw_Rectangle+0xb0>)
 8001f7a:	8812      	ldrh	r2, [r2, #0]
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	dd05      	ble.n	8001f8e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <ILI9341_Draw_Rectangle+0xb0>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8001f8e:	88ba      	ldrh	r2, [r7, #4]
 8001f90:	883b      	ldrh	r3, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8001f96:	8812      	ldrh	r2, [r2, #0]
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	dd05      	ble.n	8001faa <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <ILI9341_Draw_Rectangle+0xb4>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	88bb      	ldrh	r3, [r7, #4]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4413      	add	r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	b29c      	uxth	r4, r3
 8001fb6:	88ba      	ldrh	r2, [r7, #4]
 8001fb8:	883b      	ldrh	r3, [r7, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	88b9      	ldrh	r1, [r7, #4]
 8001fc4:	88f8      	ldrh	r0, [r7, #6]
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	f7ff fcc2 	bl	8001950 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8001fcc:	883b      	ldrh	r3, [r7, #0]
 8001fce:	887a      	ldrh	r2, [r7, #2]
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	8b3b      	ldrh	r3, [r7, #24]
 8001fd8:	4611      	mov	r1, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fe88 	bl	8001cf0 <ILI9341_Draw_Colour_Burst>
 8001fe0:	e000      	b.n	8001fe4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001fe2:	bf00      	nop
}
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000002 	.word	0x20000002
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4604      	mov	r4, r0
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4623      	mov	r3, r4
 8002004:	80fb      	strh	r3, [r7, #6]
 8002006:	4603      	mov	r3, r0
 8002008:	80bb      	strh	r3, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]
 800200e:	4613      	mov	r3, r2
 8002010:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <ILI9341_Draw_Horizontal_Line+0x80>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	429a      	cmp	r2, r3
 800201c:	d225      	bcs.n	800206a <ILI9341_Draw_Horizontal_Line+0x76>
 800201e:	4b16      	ldr	r3, [pc, #88]	; (8002078 <ILI9341_Draw_Horizontal_Line+0x84>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	88ba      	ldrh	r2, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d21f      	bcs.n	800206a <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 800202a:	88fa      	ldrh	r2, [r7, #6]
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	4413      	add	r3, r2
 8002030:	4a10      	ldr	r2, [pc, #64]	; (8002074 <ILI9341_Draw_Horizontal_Line+0x80>)
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	b292      	uxth	r2, r2
 8002036:	4293      	cmp	r3, r2
 8002038:	dd05      	ble.n	8002046 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <ILI9341_Draw_Horizontal_Line+0x80>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	b29a      	uxth	r2, r3
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 8002046:	88fa      	ldrh	r2, [r7, #6]
 8002048:	887b      	ldrh	r3, [r7, #2]
 800204a:	4413      	add	r3, r2
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	88bb      	ldrh	r3, [r7, #4]
 8002054:	88b9      	ldrh	r1, [r7, #4]
 8002056:	88f8      	ldrh	r0, [r7, #6]
 8002058:	f7ff fc7a 	bl	8001950 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 800205c:	887a      	ldrh	r2, [r7, #2]
 800205e:	883b      	ldrh	r3, [r7, #0]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fe44 	bl	8001cf0 <ILI9341_Draw_Colour_Burst>
 8002068:	e000      	b.n	800206c <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800206a:	bf00      	nop
}
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	bf00      	nop
 8002074:	20000002 	.word	0x20000002
 8002078:	20000000 	.word	0x20000000

0800207c <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4604      	mov	r4, r0
 8002084:	4608      	mov	r0, r1
 8002086:	4611      	mov	r1, r2
 8002088:	461a      	mov	r2, r3
 800208a:	4623      	mov	r3, r4
 800208c:	80fb      	strh	r3, [r7, #6]
 800208e:	4603      	mov	r3, r0
 8002090:	80bb      	strh	r3, [r7, #4]
 8002092:	460b      	mov	r3, r1
 8002094:	807b      	strh	r3, [r7, #2]
 8002096:	4613      	mov	r3, r2
 8002098:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <ILI9341_Draw_Vertical_Line+0x80>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d225      	bcs.n	80020f2 <ILI9341_Draw_Vertical_Line+0x76>
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <ILI9341_Draw_Vertical_Line+0x84>)
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	88ba      	ldrh	r2, [r7, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d21f      	bcs.n	80020f2 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 80020b2:	88ba      	ldrh	r2, [r7, #4]
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4413      	add	r3, r2
 80020b8:	4a11      	ldr	r2, [pc, #68]	; (8002100 <ILI9341_Draw_Vertical_Line+0x84>)
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	b292      	uxth	r2, r2
 80020be:	4293      	cmp	r3, r2
 80020c0:	dd05      	ble.n	80020ce <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <ILI9341_Draw_Vertical_Line+0x84>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	88bb      	ldrh	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80020ce:	88ba      	ldrh	r2, [r7, #4]
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	4413      	add	r3, r2
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29b      	uxth	r3, r3
 80020da:	88fa      	ldrh	r2, [r7, #6]
 80020dc:	88b9      	ldrh	r1, [r7, #4]
 80020de:	88f8      	ldrh	r0, [r7, #6]
 80020e0:	f7ff fc36 	bl	8001950 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	883b      	ldrh	r3, [r7, #0]
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fe00 	bl	8001cf0 <ILI9341_Draw_Colour_Burst>
 80020f0:	e000      	b.n	80020f4 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80020f2:	bf00      	nop
}
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000002 	.word	0x20000002
 8002100:	20000000 	.word	0x20000000

08002104 <GPIO_Init>:
 */

#include "Drivers/GPIO/GPIO.h"

HAL_Status GPIO_Init(GPIO_HandleTypeDef* gpio_handle)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 800210c:	2300      	movs	r3, #0
 800210e:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <GPIO_Init+0x18>
    {
        status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	73fb      	strb	r3, [r7, #15]
 800211a:	e20e      	b.n	800253a <GPIO_Init+0x436>
    }
    else
    {
        /* Check if pin number is less than 8 */
        if(gpio_handle->GPIO_Pin < GPIO_PIN_8)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	791b      	ldrb	r3, [r3, #4]
 8002120:	2b07      	cmp	r3, #7
 8002122:	f200 80fd 	bhi.w	8002320 <GPIO_Init+0x21c>
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	795b      	ldrb	r3, [r3, #5]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d876      	bhi.n	800221c <GPIO_Init+0x118>
 800212e:	a201      	add	r2, pc, #4	; (adr r2, 8002134 <GPIO_Init+0x30>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	08002145 	.word	0x08002145
 8002138:	0800217b 	.word	0x0800217b
 800213c:	080021b1 	.word	0x080021b1
 8002140:	080021e7 	.word	0x080021e7
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6819      	ldr	r1, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	791b      	ldrb	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	400a      	ands	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x04UL << (gpio_handle->GPIO_Pin * 4));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6819      	ldr	r1, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	791b      	ldrb	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	2204      	movs	r2, #4
 800216e:	409a      	lsls	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
                    break;
 8002178:	e053      	b.n	8002222 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	791b      	ldrb	r3, [r3, #4]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43da      	mvns	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	400a      	ands	r2, r1
 8002194:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6819      	ldr	r1, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	791b      	ldrb	r3, [r3, #4]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	2201      	movs	r2, #1
 80021a4:	409a      	lsls	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
                    break;
 80021ae:	e038      	b.n	8002222 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	220f      	movs	r2, #15
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	400a      	ands	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6819      	ldr	r1, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	791b      	ldrb	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	2202      	movs	r2, #2
 80021da:	409a      	lsls	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
                    break;
 80021e4:	e01d      	b.n	8002222 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	791b      	ldrb	r3, [r3, #4]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43da      	mvns	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	400a      	ands	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4));
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	2203      	movs	r2, #3
 8002210:	409a      	lsls	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	601a      	str	r2, [r3, #0]
                    break;
 800221a:	e002      	b.n	8002222 <GPIO_Init+0x11e>
                default:
                    status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
                    break;
 8002220:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	799b      	ldrb	r3, [r3, #6]
 8002226:	2b06      	cmp	r3, #6
 8002228:	d877      	bhi.n	800231a <GPIO_Init+0x216>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <GPIO_Init+0x12c>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	0800224d 	.word	0x0800224d
 8002234:	0800226d 	.word	0x0800226d
 8002238:	080022a7 	.word	0x080022a7
 800223c:	0800224d 	.word	0x0800224d
 8002240:	0800226d 	.word	0x0800226d
 8002244:	080022a7 	.word	0x080022a7
 8002248:	080022e1 	.word	0x080022e1
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	791b      	ldrb	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
                    break;
 800226a:	e166      	b.n	800253a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6819      	ldr	r1, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	791b      	ldrb	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43da      	mvns	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	400a      	ands	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	791b      	ldrb	r3, [r3, #4]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	2201      	movs	r2, #1
 800229a:	409a      	lsls	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]
                    break;
 80022a4:	e149      	b.n	800253a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6819      	ldr	r1, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	791b      	ldrb	r3, [r3, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	2202      	movs	r2, #2
 80022d4:	409a      	lsls	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
                    break;
 80022de:	e12c      	b.n	800253a <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	791b      	ldrb	r3, [r3, #4]
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	3302      	adds	r3, #2
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43da      	mvns	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	400a      	ands	r2, r1
 80022fc:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	791b      	ldrb	r3, [r3, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	3302      	adds	r3, #2
 800230c:	2203      	movs	r2, #3
 800230e:	409a      	lsls	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
                    break;
 8002318:	e10f      	b.n	800253a <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
                    break;
 800231e:	e10c      	b.n	800253a <GPIO_Init+0x436>
            }
        }
        else
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	795b      	ldrb	r3, [r3, #5]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d87f      	bhi.n	8002428 <GPIO_Init+0x324>
 8002328:	a201      	add	r2, pc, #4	; (adr r2, 8002330 <GPIO_Init+0x22c>)
 800232a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232e:	bf00      	nop
 8002330:	08002341 	.word	0x08002341
 8002334:	0800237b 	.word	0x0800237b
 8002338:	080023b5 	.word	0x080023b5
 800233c:	080023ef 	.word	0x080023ef
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6859      	ldr	r1, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	791b      	ldrb	r3, [r3, #4]
 800234a:	3b08      	subs	r3, #8
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	220f      	movs	r2, #15
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43da      	mvns	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	400a      	ands	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x04UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	791b      	ldrb	r3, [r3, #4]
 8002368:	3b08      	subs	r3, #8
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	2204      	movs	r2, #4
 800236e:	409a      	lsls	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]
                    break;
 8002378:	e059      	b.n	800242e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	791b      	ldrb	r3, [r3, #4]
 8002384:	3b08      	subs	r3, #8
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	400a      	ands	r2, r1
 8002396:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6859      	ldr	r1, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	791b      	ldrb	r3, [r3, #4]
 80023a2:	3b08      	subs	r3, #8
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	2201      	movs	r2, #1
 80023a8:	409a      	lsls	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	605a      	str	r2, [r3, #4]
                    break;
 80023b2:	e03c      	b.n	800242e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	791b      	ldrb	r3, [r3, #4]
 80023be:	3b08      	subs	r3, #8
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43da      	mvns	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	400a      	ands	r2, r1
 80023d0:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	791b      	ldrb	r3, [r3, #4]
 80023dc:	3b08      	subs	r3, #8
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	2202      	movs	r2, #2
 80023e2:	409a      	lsls	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	605a      	str	r2, [r3, #4]
                    break;
 80023ec:	e01f      	b.n	800242e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	791b      	ldrb	r3, [r3, #4]
 80023f8:	3b08      	subs	r3, #8
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	400a      	ands	r2, r1
 800240a:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	3b08      	subs	r3, #8
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	2203      	movs	r2, #3
 800241c:	409a      	lsls	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	605a      	str	r2, [r3, #4]
                    break;
 8002426:	e002      	b.n	800242e <GPIO_Init+0x32a>
                default:
                    status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	73fb      	strb	r3, [r7, #15]
                    break;
 800242c:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	799b      	ldrb	r3, [r3, #6]
 8002432:	2b06      	cmp	r3, #6
 8002434:	d87e      	bhi.n	8002534 <GPIO_Init+0x430>
 8002436:	a201      	add	r2, pc, #4	; (adr r2, 800243c <GPIO_Init+0x338>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	08002459 	.word	0x08002459
 8002440:	0800247b 	.word	0x0800247b
 8002444:	080024b9 	.word	0x080024b9
 8002448:	08002459 	.word	0x08002459
 800244c:	0800247b 	.word	0x0800247b
 8002450:	080024b9 	.word	0x080024b9
 8002454:	080024f7 	.word	0x080024f7
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6859      	ldr	r1, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	3b08      	subs	r3, #8
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	400a      	ands	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
                    break;
 8002478:	e05f      	b.n	800253a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6859      	ldr	r1, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	791b      	ldrb	r3, [r3, #4]
 8002484:	3b08      	subs	r3, #8
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43da      	mvns	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	400a      	ands	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	791b      	ldrb	r3, [r3, #4]
 80024a4:	3b08      	subs	r3, #8
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	2201      	movs	r2, #1
 80024ac:	409a      	lsls	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
                    break;
 80024b6:	e040      	b.n	800253a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6859      	ldr	r1, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	3b08      	subs	r3, #8
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	400a      	ands	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	791b      	ldrb	r3, [r3, #4]
 80024e2:	3b08      	subs	r3, #8
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	2202      	movs	r2, #2
 80024ea:	409a      	lsls	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]
                    break;
 80024f4:	e021      	b.n	800253a <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	791b      	ldrb	r3, [r3, #4]
 8002500:	3b08      	subs	r3, #8
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43da      	mvns	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	400a      	ands	r2, r1
 8002514:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	791b      	ldrb	r3, [r3, #4]
 8002520:	3b08      	subs	r3, #8
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	2203      	movs	r2, #3
 8002528:	409a      	lsls	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]
                    break;
 8002532:	e002      	b.n	800253a <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
                    break;
 8002538:	bf00      	nop
        }

    }    
    }
    return status;
 800253a:	7bfb      	ldrb	r3, [r7, #15]

}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop

08002548 <GPIO_WritePin>:


HAL_Status GPIO_WritePin(GPIO_HandleTypeDef* gpio_handle, GPIO_PinState pin_state)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
    HAL_Status status = HAL_OKAY;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d102      	bne.n	8002564 <GPIO_WritePin+0x1c>
    {
        status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
 8002562:	e023      	b.n	80025ac <GPIO_WritePin+0x64>
    }
    else
    {
        if(GPIO_PIN_RESET == pin_state)
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10d      	bne.n	8002586 <GPIO_WritePin+0x3e>
        {
            gpio_handle->GPIO_TypeDef->BRR |= (1UL << gpio_handle->GPIO_Pin);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6959      	ldr	r1, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	791b      	ldrb	r3, [r3, #4]
 8002574:	461a      	mov	r2, r3
 8002576:	2301      	movs	r3, #1
 8002578:	fa03 f202 	lsl.w	r2, r3, r2
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	615a      	str	r2, [r3, #20]
 8002584:	e012      	b.n	80025ac <GPIO_WritePin+0x64>
        }
        else if(GPIO_PIN_SET == pin_state)
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d10d      	bne.n	80025a8 <GPIO_WritePin+0x60>
        {
            gpio_handle->GPIO_TypeDef->BSRR |= (1UL << gpio_handle->GPIO_Pin);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6919      	ldr	r1, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	791b      	ldrb	r3, [r3, #4]
 8002596:	461a      	mov	r2, r3
 8002598:	2301      	movs	r3, #1
 800259a:	fa03 f202 	lsl.w	r2, r3, r2
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	611a      	str	r2, [r3, #16]
 80025a6:	e001      	b.n	80025ac <GPIO_WritePin+0x64>
        }
        else
        {
            status = HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr

080025b8 <SPI_Init>:

#include "Drivers/SPI/SPI.h"


HAL_Status SPI_Init(SPI_HandleTypeDef* hspi)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]

    if(NULL == hspi)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <SPI_Init+0x18>
    {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e15c      	b.n	800288a <SPI_Init+0x2d2>
    }
    else
    {
        
        /* Set SPI Slave Select */
        if(hspi->NSS == SPI_NSS_HARD)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7d1b      	ldrb	r3, [r3, #20]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <SPI_Init+0x32>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e023      	b.n	8002632 <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_SOFT)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7d1b      	ldrb	r3, [r3, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d108      	bne.n	8002604 <SPI_Init+0x4c>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e016      	b.n	8002632 <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_DISABLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	7d1b      	ldrb	r3, [r3, #20]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d110      	bne.n	800262e <SPI_Init+0x76>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800261a:	601a      	str	r2, [r3, #0]
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e001      	b.n	8002632 <SPI_Init+0x7a>
        }
        else
        {
            status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI mode */
        if(hspi->Mode == SPI_MODE_MASTER)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	791b      	ldrb	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d108      	bne.n	800264c <SPI_Init+0x94>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0204 	orr.w	r2, r2, #4
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e00e      	b.n	800266a <SPI_Init+0xb2>
        }
        else if(hspi->Mode == SPI_MODE_SLAVE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	791b      	ldrb	r3, [r3, #4]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d108      	bne.n	8002666 <SPI_Init+0xae>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e001      	b.n	800266a <SPI_Init+0xb2>
        }
        else
        {
            status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Bi-Directional mode */
        if(hspi->BiDir == SPI_BIDIR_ENABLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	7d5b      	ldrb	r3, [r3, #21]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <SPI_Init+0xcc>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_BIDIMODE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e00e      	b.n	80026a2 <SPI_Init+0xea>
        }
        else if(hspi->BiDir == SPI_BIDIR_DISABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7d5b      	ldrb	r3, [r3, #21]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <SPI_Init+0xe6>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_BIDIMODE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e001      	b.n	80026a2 <SPI_Init+0xea>
        }
        else
        {
            status = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Data Size */
        if(hspi->DataSize == SPI_DATASIZE_8BIT)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7c5b      	ldrb	r3, [r3, #17]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d108      	bne.n	80026bc <SPI_Init+0x104>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e00e      	b.n	80026da <SPI_Init+0x122>
        }
        else if(hspi->DataSize == SPI_DATASIZE_16BIT)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7c5b      	ldrb	r3, [r3, #17]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d108      	bne.n	80026d6 <SPI_Init+0x11e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e001      	b.n	80026da <SPI_Init+0x122>
        }
        else
        {
            status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Polarity */
        if(hspi->CPOL == SPI_CPOL_LOW)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	799b      	ldrb	r3, [r3, #6]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d108      	bne.n	80026f4 <SPI_Init+0x13c>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0202 	bic.w	r2, r2, #2
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e00e      	b.n	8002712 <SPI_Init+0x15a>
        }
        else if(hspi->CPOL == SPI_CPOL_HIGH)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	799b      	ldrb	r3, [r3, #6]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <SPI_Init+0x156>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0202 	orr.w	r2, r2, #2
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e001      	b.n	8002712 <SPI_Init+0x15a>
        }
        else
        {
           status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Phase */
        if(hspi->CPHA == SPI_CPHA_1EDGE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	79db      	ldrb	r3, [r3, #7]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d108      	bne.n	800272c <SPI_Init+0x174>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	e00e      	b.n	800274a <SPI_Init+0x192>
        }
        else if(hspi->CPHA == SPI_CPHA_2EDGE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	79db      	ldrb	r3, [r3, #7]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <SPI_Init+0x18e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e001      	b.n	800274a <SPI_Init+0x192>
        }
        else
        {
            status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
        }

        /*Set TX DMA Option */
        if(hspi->SpiTxDma == SPI_TX_DMA_ENABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7c9b      	ldrb	r3, [r3, #18]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <SPI_Init+0x1ac>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0202 	orr.w	r2, r2, #2
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	e007      	b.n	8002774 <SPI_Init+0x1bc>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0202 	bic.w	r2, r2, #2
 8002772:	605a      	str	r2, [r3, #4]
        }

        /*Set DMA Option */
        if(hspi->SpiRxDma == SPI_RX_DMA_ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7cdb      	ldrb	r3, [r3, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d108      	bne.n	800278e <SPI_Init+0x1d6>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	e007      	b.n	800279e <SPI_Init+0x1e6>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	605a      	str	r2, [r3, #4]
        }



        /* Set SPI Baud Rate */
        switch(hspi->BaudRate)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	795b      	ldrb	r3, [r3, #5]
 80027a2:	2b07      	cmp	r3, #7
 80027a4:	d866      	bhi.n	8002874 <SPI_Init+0x2bc>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <SPI_Init+0x1f4>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	080027cd 	.word	0x080027cd
 80027b0:	080027df 	.word	0x080027df
 80027b4:	080027f5 	.word	0x080027f5
 80027b8:	0800280b 	.word	0x0800280b
 80027bc:	08002821 	.word	0x08002821
 80027c0:	08002837 	.word	0x08002837
 80027c4:	0800284d 	.word	0x0800284d
 80027c8:	08002863 	.word	0x08002863
        {
            case SPI_BAUDRATE_DIV2:
                // Code for SPI_BAUD_RATE_DIV
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK , SPI_BAUDRATE_DIV2 << SPI_CR1_BR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80027da:	601a      	str	r2, [r3, #0]
                break;
 80027dc:	e04d      	b.n	800287a <SPI_Init+0x2c2>
            // Add more cases for other baud rates
            case SPI_BAUDRATE_DIV4:
                // Code for SPI_BAUDRATE_DIV4
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV4 << SPI_CR1_BR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0208 	orr.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
                break;
 80027f2:	e042      	b.n	800287a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV8:
                // Code for SPI_BAUDRATE_DIV8
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV8 << SPI_CR1_BR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0210 	orr.w	r2, r2, #16
 8002806:	601a      	str	r2, [r3, #0]
                break;
 8002808:	e037      	b.n	800287a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV16:
                // Code for SPI_BAUDRATE_DIV16
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV16 << SPI_CR1_BR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0218 	orr.w	r2, r2, #24
 800281c:	601a      	str	r2, [r3, #0]
                break;  
 800281e:	e02c      	b.n	800287a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV32:
                // Code for SPI_BAUDRATE_DIV32
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV32 << SPI_CR1_BR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	601a      	str	r2, [r3, #0]
                break;
 8002834:	e021      	b.n	800287a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV64:
                // Code for SPI_BAUDRATE_DIV64
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV64 << SPI_CR1_BR);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8002848:	601a      	str	r2, [r3, #0]
                break;
 800284a:	e016      	b.n	800287a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV128:
                // Code for SPI_BAUDRATE_DIV128
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV128 << SPI_CR1_BR);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800285e:	601a      	str	r2, [r3, #0]
                break;
 8002860:	e00b      	b.n	800287a <SPI_Init+0x2c2>
            case SPI_BAUDRATE_DIV256:
                // Code for SPI_BAUDRATE_DIV256
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV256 << SPI_CR1_BR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8002870:	601a      	str	r2, [r3, #0]
                break;
 8002872:	e002      	b.n	800287a <SPI_Init+0x2c2>
            default:
                /*------ Take some action ---- */
                status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
                break;
 8002878:	bf00      	nop
        }
        /* Enable SPI */
        SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002888:	601a      	str	r2, [r3, #0]

    }

    return status;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3714      	adds	r7, #20
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop

08002898 <SPI_Transmit>:
 * @param Timeout 
 * @return HAL_Status 
 */

HAL_Status SPI_Transmit(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 8002898:	b480      	push	{r7}
 800289a:	b087      	sub	sp, #28
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 80028a4:	2300      	movs	r3, #0
 80028a6:	75fb      	strb	r3, [r7, #23]
    if((NULL == hspi) || (NULL == pData))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <SPI_Transmit+0x1c>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d102      	bne.n	80028ba <SPI_Transmit+0x22>
    {
        status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	75fb      	strb	r3, [r7, #23]
 80028b8:	e035      	b.n	8002926 <SPI_Transmit+0x8e>
    }
    else
    {
           /* Init TX counter */
           uint32_t counter = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
           /* Check size */
           if(hspi->DataSize == SPI_DATASIZE_8BIT)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	7c5b      	ldrb	r3, [r3, #17]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d12b      	bne.n	800291e <SPI_Transmit+0x86>
           {
            /* 8-bit DataSize */
            while(counter < Size)
 80028c6:	e012      	b.n	80028ee <SPI_Transmit+0x56>
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 80028c8:	bf00      	nop
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f7      	beq.n	80028ca <SPI_Transmit+0x32>
                hspi->Instance->DR = (uint8_t)pData[counter];
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4413      	add	r3, r2
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60da      	str	r2, [r3, #12]
                counter++;
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	3301      	adds	r3, #1
 80028ec:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3e8      	bcc.n	80028c8 <SPI_Transmit+0x30>
 80028f6:	e016      	b.n	8002926 <SPI_Transmit+0x8e>
            {
            /* 16-bit DataSize */
            while(counter < Size)
            {
                /* Check TXE flag (Polling mode) */
                while(!GET_BIT(hspi->Instance->SR,SPI_SR_TXE));
 80028f8:	bf00      	nop
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f7      	beq.n	80028fa <SPI_Transmit+0x62>
                hspi->Instance->DR = (uint16_t)pData[counter];
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4413      	add	r3, r2
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60da      	str	r2, [r3, #12]
                counter++;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	3301      	adds	r3, #1
 800291c:	613b      	str	r3, [r7, #16]
            while(counter < Size)
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	429a      	cmp	r2, r3
 8002924:	d3e8      	bcc.n	80028f8 <SPI_Transmit+0x60>
            }           
            }
    }
    return status;
 8002926:	7dfb      	ldrb	r3, [r7, #23]
}
 8002928:	4618      	mov	r0, r3
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <SPI_TransmitDMA>:
 * @param pData 
 * @param Size 
 * @return HAL_Status 
 */
HAL_Status SPI_TransmitDMA(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
    if(NULL == hspi)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <SPI_TransmitDMA+0x1c>
    {
        status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
 800294c:	e019      	b.n	8002982 <SPI_TransmitDMA+0x50>
    }
    else
    {
        /* Set the DMA channel memory address */
        DMA_SetMemoryAddress(hspi->txdma, pData);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fb43 	bl	8000fe0 <DMA_SetMemoryAddress>

        /* Set the DMA channel peripheral address */
        DMA_SetPeriphAddress(hspi->txdma, &(hspi->Instance->DR));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f7fe fb20 	bl	8000fac <DMA_SetPeriphAddress>

        /* Set the DMA channel count */
        DMA_SetDataCounter(hspi->txdma,Size);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4618      	mov	r0, r3
 8002974:	f7fe fb82 	bl	800107c <DMA_SetDataCounter>

        /* Start sending */
        DMA_Start(hspi->txdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fe fb49 	bl	8001014 <DMA_Start>

        /* Stop sending */
        //DMA_Stop(hspi->txdma);
    }
    return status;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3718      	adds	r7, #24
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <TIM_Init>:
 * 
 * @param TIM_Handle 
 * @return HAL_Status 
 */
HAL_Status TIM_Init(TIM_HandleTypeDef *TIM_Handle)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]

    if(NULL == TIM_Handle)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <TIM_Init+0x18>
    {
        status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
 80029a2:	e041      	b.n	8002a28 <TIM_Init+0x9c>
    }
    else
    {
        /* Set the URS bit */
        SET_BIT(TIM_Handle->Instance->CR1, TIM_CR1_URS_POS);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0204 	orr.w	r2, r2, #4
 80029b2:	601a      	str	r2, [r3, #0]

        /* Set the ARPE bit */
        SET_BIT(TIM_Handle->Instance->CR1, TIM_CR1_ARPE_POS);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029c2:	601a      	str	r2, [r3, #0]


        /* Set Auto-Reload value */
        TIM_Handle->Instance->ARR = TIM_ARR_VALUE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029cc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set Periodicity */
        switch((uint32_t)TIM_Handle->Instance)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d6:	d003      	beq.n	80029e0 <TIM_Init+0x54>
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <TIM_Init+0xa8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d005      	beq.n	80029ea <TIM_Init+0x5e>
 80029de:	e009      	b.n	80029f4 <TIM_Init+0x68>
        {
            case (uint32_t)TIM_2_BASE:
            TIM2_NumOfOverFlows =   TIM_Handle->NumberOfMilliseconds / TIM_OVERFLOW_TIME_IN_MS;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <TIM_Init+0xac>)
 80029e6:	6013      	str	r3, [r2, #0]
            break;
 80029e8:	e004      	b.n	80029f4 <TIM_Init+0x68>
            case (uint32_t)TIM_3_BASE:
            TIM3_NumOfOverFlows =   TIM_Handle->NumberOfMilliseconds / TIM_OVERFLOW_TIME_IN_MS;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <TIM_Init+0xb0>)
 80029f0:	6013      	str	r3, [r2, #0]
            break;
 80029f2:	bf00      	nop
        }

        /* Set Prescaler value */
        TIM_Handle->Instance->PSC = TIM_Handle->Prescaler;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6892      	ldr	r2, [r2, #8]
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28

        /* Check Interrupt */
        if(TIM_INTERRUPT_ENABLE == TIM_Handle->Interrupt)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7b1b      	ldrb	r3, [r3, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d108      	bne.n	8002a18 <TIM_Init+0x8c>
        {
            /* Enable the interrupt */
            SET_BIT(TIM_Handle->Instance->DIER, TIM_DIER_UIE_POS);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	e007      	b.n	8002a28 <TIM_Init+0x9c>
        }
        else
        {
            /* Disable the interrupt */
            CLR_BIT(TIM_Handle->Instance->DIER, TIM_DIER_UIE_POS);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	60da      	str	r2, [r3, #12]
        }

    }
    return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]

}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40000400 	.word	0x40000400
 8002a38:	20000338 	.word	0x20000338
 8002a3c:	20000334 	.word	0x20000334

08002a40 <TIM_Start>:
 * 
 * @param TIM_Handle 
 * @return HAL_Status 
 */
HAL_Status TIM_Start(TIM_HandleTypeDef *TIM_Handle)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
    if(NULL == TIM_Handle)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <TIM_Start+0x18>
    {
        status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	e007      	b.n	8002a68 <TIM_Start+0x28>
    }
    else
    {
        /* Enable the timer */
        SET_BIT(TIM_Handle->Instance->CR1, TIM_CR1_CEN_POS);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
    }
}
 8002a68:	bf00      	nop
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <TIM_Stop>:
 * 
 * @param TIM_Handle 
 * @return HAL_Status 
 */
HAL_Status TIM_Stop(TIM_HandleTypeDef *TIM_Handle)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	73fb      	strb	r3, [r7, #15]
    if(NULL == TIM_Handle)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <TIM_Stop+0x18>
    {
        status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e007      	b.n	8002a9c <TIM_Stop+0x28>
    }
    else
    {
        /* Disable the timer */
        CLR_BIT(TIM_Handle->Instance->CR1, TIM_CR1_CEN_POS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0201 	bic.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
    }
}
 8002a9c:	bf00      	nop
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <TIM_SetCallBackFn>:
 * @param TIM_Handle 
 * @param callback_fn 
 * @return HAL_Status 
 */
HAL_Status TIM_SetCallBackFn(TIM_HandleTypeDef *TIM_Handle,void (*callback_fn)(void))
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
     HAL_Status status = HAL_OKAY;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	73fb      	strb	r3, [r7, #15]

    if(NULL == TIM_Handle)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <TIM_SetCallBackFn+0x1a>
    {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e002      	b.n	8002ac8 <TIM_SetCallBackFn+0x20>
    }
    else
    {
        TIM2_CallbackFn = callback_fn;
 8002ac2:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <TIM_SetCallBackFn+0x2c>)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	6013      	str	r3, [r2, #0]
    }
    return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	20000128 	.word	0x20000128

08002ad8 <TIM2_IRQHandler>:
/**
 * @brief Timer 2 interrupt handler
 * 
 */
void TIM2_IRQHandler()
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
    /* Disable Timer Counter */
    CLR_BIT(TIM_2_BASE->CR1,TIM_CR1_CEN_POS);
 8002ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6013      	str	r3, [r2, #0]
    /*Clear Update Interrupt Flag*/
    CLR_BIT(TIM_2_BASE->SR,TIM_SR_UIF_POS);
 8002aee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6113      	str	r3, [r2, #16]
    #if TIM_APP_MODE == TIM_STOPWATCH_APP_MODE
    TIM2_OverFlowCounter++;
    #elif TIM_APP_MODE == TIM_TIMER_APP_MODE
    /* Check overflow counter */
    uint32_t counter = TIM_2_BASE->CNT;
 8002afe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	607b      	str	r3, [r7, #4]
    if(TIM2_OverFlowCounter < TIM2_NumOfOverFlows)
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <TIM2_IRQHandler+0x6c>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <TIM2_IRQHandler+0x70>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d205      	bcs.n	8002b1e <TIM2_IRQHandler+0x46>
    {
        TIM2_OverFlowCounter++;
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <TIM2_IRQHandler+0x6c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <TIM2_IRQHandler+0x6c>)
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e005      	b.n	8002b2a <TIM2_IRQHandler+0x52>
    }
    else
    {
        /* Call the callback function */
        TIM2_CallbackFn();
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <TIM2_IRQHandler+0x74>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4798      	blx	r3
        TIM2_OverFlowCounter = 0;
 8002b24:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <TIM2_IRQHandler+0x6c>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    }

    #endif
    /* Start Timer counter */
    SET_BIT(TIM_2_BASE->CR1,TIM_CR1_CEN_POS);
 8002b2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6013      	str	r3, [r2, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000009c 	.word	0x2000009c
 8002b48:	20000338 	.word	0x20000338
 8002b4c:	20000128 	.word	0x20000128

08002b50 <main>:
void transmit(uint8_t cmd);

void tim_callback();

int main(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08e      	sub	sp, #56	; 0x38
 8002b54:	af02      	add	r7, sp, #8
//	_RCC_GPIOA_ENABLE();
//	_RCC_GPIOB_ENABLE();
//	_RCC_SPI1_ENABLE();
//	_RCC_DMA1_ENABLE();

	HAL_Init();
 8002b56:	f000 fa49 	bl	8002fec <HAL_Init>
	ILI9341_Init();
 8002b5a:	f7fe ffbb 	bl	8001ad4 <ILI9341_Init>

	uint8_t data = 0x06;
 8002b5e:	2306      	movs	r3, #6
 8002b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	float res = 5.5;
 8002b64:	4baf      	ldr	r3, [pc, #700]	; (8002e24 <main+0x2d4>)
 8002b66:	61fb      	str	r3, [r7, #28]
	uint32_t size = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	61bb      	str	r3, [r7, #24]
	/* Loop forever */
	NVIC_SetEnableInterrupt(NVIC_IRQ_DMA1_Channel3_IRQHandler);
 8002b6c:	200d      	movs	r0, #13
 8002b6e:	f7fe f8c1 	bl	8000cf4 <NVIC_SetEnableInterrupt>
	NVIC_SetEnableInterrupt(NVIC_IRQ_TIM2_IRQHandler);
 8002b72:	201c      	movs	r0, #28
 8002b74:	f7fe f8be 	bl	8000cf4 <NVIC_SetEnableInterrupt>
	while(1)
	{
		// ILI9341_Fill_Screen(BLACK);
		/* Interlacing demo */
		/* Bricks draw */
		ILI9341_Draw_Rectangle(0,0,128,20,BLUE);
 8002b78:	231f      	movs	r3, #31
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2314      	movs	r3, #20
 8002b7e:	2280      	movs	r2, #128	; 0x80
 8002b80:	2100      	movs	r1, #0
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7ff f9da 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002b88:	20c8      	movs	r0, #200	; 0xc8
 8002b8a:	f7fe f8ef 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,40,128,20,BLUE);
 8002b8e:	231f      	movs	r3, #31
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	2314      	movs	r3, #20
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	2128      	movs	r1, #40	; 0x28
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f7ff f9cf 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002b9e:	20c8      	movs	r0, #200	; 0xc8
 8002ba0:	f7fe f8e4 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,80,128,20,BLUE);
 8002ba4:	231f      	movs	r3, #31
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2314      	movs	r3, #20
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	2150      	movs	r1, #80	; 0x50
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7ff f9c4 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002bb4:	20c8      	movs	r0, #200	; 0xc8
 8002bb6:	f7fe f8d9 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,120,128,20,BLUE);
 8002bba:	231f      	movs	r3, #31
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2314      	movs	r3, #20
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	2178      	movs	r1, #120	; 0x78
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7ff f9b9 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002bca:	20c8      	movs	r0, #200	; 0xc8
 8002bcc:	f7fe f8ce 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,20,128,20,RED);
 8002bd0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2314      	movs	r3, #20
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	2114      	movs	r1, #20
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7ff f9ad 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002be2:	20c8      	movs	r0, #200	; 0xc8
 8002be4:	f7fe f8c2 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,60,128,20,RED);
 8002be8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2314      	movs	r3, #20
 8002bf0:	2280      	movs	r2, #128	; 0x80
 8002bf2:	213c      	movs	r1, #60	; 0x3c
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7ff f9a1 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002bfa:	20c8      	movs	r0, #200	; 0xc8
 8002bfc:	f7fe f8b6 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,100,128,20,RED);
 8002c00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2314      	movs	r3, #20
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	2164      	movs	r1, #100	; 0x64
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7ff f995 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002c12:	20c8      	movs	r0, #200	; 0xc8
 8002c14:	f7fe f8aa 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,140,128,20,RED);
 8002c18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2314      	movs	r3, #20
 8002c20:	2280      	movs	r2, #128	; 0x80
 8002c22:	218c      	movs	r1, #140	; 0x8c
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7ff f989 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002c2a:	20c8      	movs	r0, #200	; 0xc8
 8002c2c:	f7fe f89e 	bl	8000d6c <SYSTICK_DelayMs>
		//res = ILI9341_Return_TimeElapsed();
		SYSTICK_DelayMs(50);
 8002c30:	2032      	movs	r0, #50	; 0x32
 8002c32:	f7fe f89b 	bl	8000d6c <SYSTICK_DelayMs>
		/* Football field draw */
		ILI9341_Draw_Rectangle(0,0,128,160,GREEN);
 8002c36:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	23a0      	movs	r3, #160	; 0xa0
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	2100      	movs	r1, #0
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7ff f97a 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002c48:	20c8      	movs	r0, #200	; 0xc8
 8002c4a:	f7fe f88f 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Hollow_Circle(64,80,20,WHITE);
 8002c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c52:	2214      	movs	r2, #20
 8002c54:	2150      	movs	r1, #80	; 0x50
 8002c56:	2040      	movs	r0, #64	; 0x40
 8002c58:	f7fe faf4 	bl	8001244 <ILI9341_Draw_Hollow_Circle>
		SYSTICK_DelayMs(200);
 8002c5c:	20c8      	movs	r0, #200	; 0xc8
 8002c5e:	f7fe f885 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Hollow_Circle(64,80,5,WHITE);
 8002c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c66:	2205      	movs	r2, #5
 8002c68:	2150      	movs	r1, #80	; 0x50
 8002c6a:	2040      	movs	r0, #64	; 0x40
 8002c6c:	f7fe faea 	bl	8001244 <ILI9341_Draw_Hollow_Circle>
		SYSTICK_DelayMs(200);
 8002c70:	20c8      	movs	r0, #200	; 0xc8
 8002c72:	f7fe f87b 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Horizontal_Line(0,80,128,WHITE);
 8002c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	2150      	movs	r1, #80	; 0x50
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7ff f9b8 	bl	8001ff4 <ILI9341_Draw_Horizontal_Line>
		/* Draw Playground border */
		SYSTICK_DelayMs(200);
 8002c84:	20c8      	movs	r0, #200	; 0xc8
 8002c86:	f7fe f871 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Vertical_Line(0,0,160,WHITE);
 8002c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c8e:	22a0      	movs	r2, #160	; 0xa0
 8002c90:	2100      	movs	r1, #0
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7ff f9f2 	bl	800207c <ILI9341_Draw_Vertical_Line>
		SYSTICK_DelayMs(200);
 8002c98:	20c8      	movs	r0, #200	; 0xc8
 8002c9a:	f7fe f867 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Vertical_Line(127,0,160,WHITE);
 8002c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca2:	22a0      	movs	r2, #160	; 0xa0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	207f      	movs	r0, #127	; 0x7f
 8002ca8:	f7ff f9e8 	bl	800207c <ILI9341_Draw_Vertical_Line>
		SYSTICK_DelayMs(200);
 8002cac:	20c8      	movs	r0, #200	; 0xc8
 8002cae:	f7fe f85d 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Horizontal_Line(0,0,128,WHITE);
 8002cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7ff f99a 	bl	8001ff4 <ILI9341_Draw_Horizontal_Line>
		SYSTICK_DelayMs(200);
 8002cc0:	20c8      	movs	r0, #200	; 0xc8
 8002cc2:	f7fe f853 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Horizontal_Line(0,159,128,WHITE);
 8002cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cca:	2280      	movs	r2, #128	; 0x80
 8002ccc:	219f      	movs	r1, #159	; 0x9f
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7ff f990 	bl	8001ff4 <ILI9341_Draw_Horizontal_Line>
		SYSTICK_DelayMs(200);
 8002cd4:	20c8      	movs	r0, #200	; 0xc8
 8002cd6:	f7fe f849 	bl	8000d6c <SYSTICK_DelayMs>
		/* Draw the Goal */
		ILI9341_Draw_Horizontal_Line(44,30,40,WHITE);
 8002cda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cde:	2228      	movs	r2, #40	; 0x28
 8002ce0:	211e      	movs	r1, #30
 8002ce2:	202c      	movs	r0, #44	; 0x2c
 8002ce4:	f7ff f986 	bl	8001ff4 <ILI9341_Draw_Horizontal_Line>
		SYSTICK_DelayMs(200);
 8002ce8:	20c8      	movs	r0, #200	; 0xc8
 8002cea:	f7fe f83f 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Horizontal_Line(44,130,40,WHITE);
 8002cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cf2:	2228      	movs	r2, #40	; 0x28
 8002cf4:	2182      	movs	r1, #130	; 0x82
 8002cf6:	202c      	movs	r0, #44	; 0x2c
 8002cf8:	f7ff f97c 	bl	8001ff4 <ILI9341_Draw_Horizontal_Line>
		SYSTICK_DelayMs(200);
 8002cfc:	20c8      	movs	r0, #200	; 0xc8
 8002cfe:	f7fe f835 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Vertical_Line(44,0,30,WHITE);
 8002d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d06:	221e      	movs	r2, #30
 8002d08:	2100      	movs	r1, #0
 8002d0a:	202c      	movs	r0, #44	; 0x2c
 8002d0c:	f7ff f9b6 	bl	800207c <ILI9341_Draw_Vertical_Line>
		SYSTICK_DelayMs(200);
 8002d10:	20c8      	movs	r0, #200	; 0xc8
 8002d12:	f7fe f82b 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Vertical_Line(84,0,30,WHITE);
 8002d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d1a:	221e      	movs	r2, #30
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	2054      	movs	r0, #84	; 0x54
 8002d20:	f7ff f9ac 	bl	800207c <ILI9341_Draw_Vertical_Line>
		SYSTICK_DelayMs(200);
 8002d24:	20c8      	movs	r0, #200	; 0xc8
 8002d26:	f7fe f821 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Vertical_Line(44,130,30,WHITE);
 8002d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d2e:	221e      	movs	r2, #30
 8002d30:	2182      	movs	r1, #130	; 0x82
 8002d32:	202c      	movs	r0, #44	; 0x2c
 8002d34:	f7ff f9a2 	bl	800207c <ILI9341_Draw_Vertical_Line>
		SYSTICK_DelayMs(200);
 8002d38:	20c8      	movs	r0, #200	; 0xc8
 8002d3a:	f7fe f817 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Vertical_Line(84,130,30,WHITE);
 8002d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d42:	221e      	movs	r2, #30
 8002d44:	2182      	movs	r1, #130	; 0x82
 8002d46:	2054      	movs	r0, #84	; 0x54
 8002d48:	f7ff f998 	bl	800207c <ILI9341_Draw_Vertical_Line>
		SYSTICK_DelayMs(200);
 8002d4c:	20c8      	movs	r0, #200	; 0xc8
 8002d4e:	f7fe f80d 	bl	8000d6c <SYSTICK_DelayMs>

		/* Draw black background */
		ILI9341_Draw_Rectangle(0,0,128,160,BLACK);
 8002d52:	2300      	movs	r3, #0
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	23a0      	movs	r3, #160	; 0xa0
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7ff f8ed 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(200);
 8002d62:	20c8      	movs	r0, #200	; 0xc8
 8002d64:	f7fe f802 	bl	8000d6c <SYSTICK_DelayMs>
		/* Draw Histogram animation Ascending */
		for(uint8_t i=1;i<=8;i++)
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002d6e:	e01c      	b.n	8002daa <main+0x25a>
		{
			ILI9341_Draw_Rectangle(0,(20*(i-1)),(16*i),20,GREENYELLOW);
 8002d70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	b299      	uxth	r1, r3
 8002d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	2314      	movs	r3, #20
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7ff f8d1 	bl	8001f3c <ILI9341_Draw_Rectangle>
			SYSTICK_DelayMs(200);			
 8002d9a:	20c8      	movs	r0, #200	; 0xc8
 8002d9c:	f7fd ffe6 	bl	8000d6c <SYSTICK_DelayMs>
		for(uint8_t i=1;i<=8;i++)
 8002da0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002da4:	3301      	adds	r3, #1
 8002da6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002daa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d9de      	bls.n	8002d70 <main+0x220>
		}
		/* Draw Histogram animation Descending */
		for(int i=7;i>=0;i--)
 8002db2:	2307      	movs	r3, #7
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db6:	e02e      	b.n	8002e16 <main+0x2c6>
		{
			/* Clear previous block */
			ILI9341_Draw_Rectangle(0,(20*i),(16*(i+1)),20,BLACK);
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	b299      	uxth	r1, r3
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	3301      	adds	r3, #1
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2314      	movs	r3, #20
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f7ff f8b0 	bl	8001f3c <ILI9341_Draw_Rectangle>
			SYSTICK_DelayMs(50);			
 8002ddc:	2032      	movs	r0, #50	; 0x32
 8002dde:	f7fd ffc5 	bl	8000d6c <SYSTICK_DelayMs>
			ILI9341_Draw_Rectangle(0,(20*i),(16*(8-i)),20,GREENYELLOW);
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	0092      	lsls	r2, r2, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	b299      	uxth	r1, r3
 8002df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df2:	f1c3 0308 	rsb	r3, r3, #8
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2314      	movs	r3, #20
 8002e04:	2000      	movs	r0, #0
 8002e06:	f7ff f899 	bl	8001f3c <ILI9341_Draw_Rectangle>
			SYSTICK_DelayMs(200);			
 8002e0a:	20c8      	movs	r0, #200	; 0xc8
 8002e0c:	f7fd ffae 	bl	8000d6c <SYSTICK_DelayMs>
		for(int i=7;i>=0;i--)
 8002e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	dacd      	bge.n	8002db8 <main+0x268>
		}
		/* Change height of Histogram bars to all be the same */
		for(int i=7;i>=0;i--)
 8002e1c:	2307      	movs	r3, #7
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	e02c      	b.n	8002e7c <main+0x32c>
 8002e22:	bf00      	nop
 8002e24:	40b00000 	.word	0x40b00000
		{
			/* Clear previous block */
			ILI9341_Draw_Rectangle(0,(20*i),(16*(i+1)),20,BLACK);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	b299      	uxth	r1, r3
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	3301      	adds	r3, #1
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	2300      	movs	r3, #0
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2314      	movs	r3, #20
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7ff f878 	bl	8001f3c <ILI9341_Draw_Rectangle>
			SYSTICK_DelayMs(50);			
 8002e4c:	2032      	movs	r0, #50	; 0x32
 8002e4e:	f7fd ff8d 	bl	8000d6c <SYSTICK_DelayMs>
			ILI9341_Draw_Rectangle(0,(20*i),128,20,GREENYELLOW);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	b299      	uxth	r1, r3
 8002e60:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2314      	movs	r3, #20
 8002e68:	2280      	movs	r2, #128	; 0x80
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7ff f866 	bl	8001f3c <ILI9341_Draw_Rectangle>
			SYSTICK_DelayMs(200);			
 8002e70:	20c8      	movs	r0, #200	; 0xc8
 8002e72:	f7fd ff7b 	bl	8000d6c <SYSTICK_DelayMs>
		for(int i=7;i>=0;i--)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	dad2      	bge.n	8002e28 <main+0x2d8>
		}
		/* Fill Screens with different colors */
		ILI9341_Draw_Rectangle(0,0,128,160,GREEN);
 8002e82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	23a0      	movs	r3, #160	; 0xa0
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7ff f854 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(500);
 8002e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e98:	f7fd ff68 	bl	8000d6c <SYSTICK_DelayMs>
//		ILI9341_Draw_Rectangle(0,0,128,160,YELLOW);
//		SYSTICK_DelayMs(200);
		ILI9341_Draw_Rectangle(0,0,128,160,PURPLE);
 8002e9c:	f647 030f 	movw	r3, #30735	; 0x780f
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	23a0      	movs	r3, #160	; 0xa0
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7ff f847 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(500);
 8002eae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002eb2:	f7fd ff5b 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,0,128,160,CYAN);
 8002eb6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	23a0      	movs	r3, #160	; 0xa0
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f7ff f83a 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(500);
 8002ec8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ecc:	f7fd ff4e 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Draw_Rectangle(0,0,128,160,PINK);
 8002ed0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	23a0      	movs	r3, #160	; 0xa0
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	2100      	movs	r1, #0
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7ff f82d 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(500);
 8002ee2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ee6:	f7fd ff41 	bl	8000d6c <SYSTICK_DelayMs>
		/* Clear and Show status */
		ILI9341_Draw_Rectangle(0,0,128,160,WHITE);
 8002eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	23a0      	movs	r3, #160	; 0xa0
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7ff f820 	bl	8001f3c <ILI9341_Draw_Rectangle>
		SYSTICK_DelayMs(500);
 8002efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f00:	f7fd ff34 	bl	8000d6c <SYSTICK_DelayMs>
		res = ILI9341_Return_TimeElapsed();
 8002f04:	f7fe fcbe 	bl	8001884 <ILI9341_Return_TimeElapsed>
 8002f08:	61f8      	str	r0, [r7, #28]
		size = (int)(ILI9341_Return_BenchmarkSize() / (float)1000);
 8002f0a:	f7fe fc17 	bl	800173c <ILI9341_Return_BenchmarkSize>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fd25 	bl	8000960 <__aeabi_i2f>
 8002f16:	4603      	mov	r3, r0
 8002f18:	492f      	ldr	r1, [pc, #188]	; (8002fd8 <main+0x488>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fe28 	bl	8000b70 <__aeabi_fdiv>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fec0 	bl	8000ca8 <__aeabi_f2iz>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	61bb      	str	r3, [r7, #24]
		char msg[20];
		#if TRANSMIT_MODE == DMA_MODE
		ILI9341_Draw_Text(" SPI DMA benchmark:", 5, 5, BLACK, 1, WHITE);
 8002f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	2301      	movs	r3, #1
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2300      	movs	r3, #0
 8002f38:	2205      	movs	r2, #5
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	4827      	ldr	r0, [pc, #156]	; (8002fdc <main+0x48c>)
 8002f3e:	f7fe fae9 	bl	8001514 <ILI9341_Draw_Text>
		#else
		ILI9341_Draw_Text(" Normal SPI benchmark:", 5, 5, BLACK, 1, WHITE);
		#endif
		ILI9341_Text_Format(msg,"Total time: %d ms",(int)res);
 8002f42:	69f8      	ldr	r0, [r7, #28]
 8002f44:	f7fd feb0 	bl	8000ca8 <__aeabi_f2iz>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	463b      	mov	r3, r7
 8002f4c:	4924      	ldr	r1, [pc, #144]	; (8002fe0 <main+0x490>)
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe facc 	bl	80014ec <ILI9341_Text_Format>
		ILI9341_Draw_Text(msg, 5, 20, BLACK, 1, WHITE);
 8002f54:	4638      	mov	r0, r7
 8002f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	2214      	movs	r2, #20
 8002f64:	2105      	movs	r1, #5
 8002f66:	f7fe fad5 	bl	8001514 <ILI9341_Draw_Text>
		ILI9341_Text_Format(msg,"Total bytes: %d KB",(int)(size));
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	491d      	ldr	r1, [pc, #116]	; (8002fe4 <main+0x494>)
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fabb 	bl	80014ec <ILI9341_Text_Format>
		ILI9341_Draw_Text(msg, 5, 40, BLACK, 1, WHITE);
 8002f76:	4638      	mov	r0, r7
 8002f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f7c:	9301      	str	r3, [sp, #4]
 8002f7e:	2301      	movs	r3, #1
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2300      	movs	r3, #0
 8002f84:	2228      	movs	r2, #40	; 0x28
 8002f86:	2105      	movs	r1, #5
 8002f88:	f7fe fac4 	bl	8001514 <ILI9341_Draw_Text>
		#if TRANSMIT_MODE == DMA_MODE
		int rate = (int)(size / (float)res);
 8002f8c:	69b8      	ldr	r0, [r7, #24]
 8002f8e:	f7fd fce3 	bl	8000958 <__aeabi_ui2f>
 8002f92:	4603      	mov	r3, r0
 8002f94:	69f9      	ldr	r1, [r7, #28]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fdea 	bl	8000b70 <__aeabi_fdiv>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd fe82 	bl	8000ca8 <__aeabi_f2iz>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	617b      	str	r3, [r7, #20]
		ILI9341_Text_Format(msg,"Rate: %d KB per 1ms",(int)(rate));
 8002fa8:	463b      	mov	r3, r7
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <main+0x498>)
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fa9c 	bl	80014ec <ILI9341_Text_Format>
		#else
		int rate = (int)((size*1000) / (float)res);
		ILI9341_Text_Format(msg,"Rate: %d Bytes per 1ms",(int)(rate));
		#endif
		// ILI9341_Text_Format(msg,"Rate: %d KB per 1ms",(int)(rate));
		ILI9341_Draw_Text(msg, 5, 60, BLACK, 1, WHITE);
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	9300      	str	r3, [sp, #0]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	223c      	movs	r2, #60	; 0x3c
 8002fc4:	2105      	movs	r1, #5
 8002fc6:	f7fe faa5 	bl	8001514 <ILI9341_Draw_Text>

		SYSTICK_DelayMs(8000);
 8002fca:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002fce:	f7fd fecd 	bl	8000d6c <SYSTICK_DelayMs>
		ILI9341_Return_TimeElapsed();
 8002fd2:	f7fe fc57 	bl	8001884 <ILI9341_Return_TimeElapsed>
	{
 8002fd6:	e5cf      	b.n	8002b78 <main+0x28>
 8002fd8:	447a0000 	.word	0x447a0000
 8002fdc:	08003b58 	.word	0x08003b58
 8002fe0:	08003b6c 	.word	0x08003b6c
 8002fe4:	08003b80 	.word	0x08003b80
 8002fe8:	08003b94 	.word	0x08003b94

08002fec <HAL_Init>:
	_RCC_GPIOD_ENABLE();

}

void HAL_Init()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
	 /* Init Systick */
	 SYSTICK_Init();
 8002ff0:	f7fd fea2 	bl	8000d38 <SYSTICK_Init>
	 /* enable RCC clock */
	 _RCC_GPIOA_ENABLE();
 8002ff4:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_Init+0x180>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	4a5c      	ldr	r2, [pc, #368]	; (800316c <HAL_Init+0x180>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	6193      	str	r3, [r2, #24]
	 _RCC_GPIOB_ENABLE();
 8003000:	4b5a      	ldr	r3, [pc, #360]	; (800316c <HAL_Init+0x180>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a59      	ldr	r2, [pc, #356]	; (800316c <HAL_Init+0x180>)
 8003006:	f043 0308 	orr.w	r3, r3, #8
 800300a:	6193      	str	r3, [r2, #24]
	 _RCC_SPI1_ENABLE();
 800300c:	4b57      	ldr	r3, [pc, #348]	; (800316c <HAL_Init+0x180>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4a56      	ldr	r2, [pc, #344]	; (800316c <HAL_Init+0x180>)
 8003012:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003016:	6193      	str	r3, [r2, #24]
	 _RCC_DMA1_ENABLE();
 8003018:	4b54      	ldr	r3, [pc, #336]	; (800316c <HAL_Init+0x180>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	4a53      	ldr	r2, [pc, #332]	; (800316c <HAL_Init+0x180>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6153      	str	r3, [r2, #20]
	 _RCC_TIM2_ENABLE();
 8003024:	4b51      	ldr	r3, [pc, #324]	; (800316c <HAL_Init+0x180>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4a50      	ldr	r2, [pc, #320]	; (800316c <HAL_Init+0x180>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	61d3      	str	r3, [r2, #28]
	// tim2.Prescaler = TIM_PRESCALAR_VALUE_DIV_8;

	// TIM_Init(&tim2);

	/*Init LED at pin A0 */
	led.GPIO_TypeDef = GPIOA;
 8003030:	4b4f      	ldr	r3, [pc, #316]	; (8003170 <HAL_Init+0x184>)
 8003032:	4a50      	ldr	r2, [pc, #320]	; (8003174 <HAL_Init+0x188>)
 8003034:	601a      	str	r2, [r3, #0]
	led.GPIO_Pin = GPIO_PIN_0;
 8003036:	4b4e      	ldr	r3, [pc, #312]	; (8003170 <HAL_Init+0x184>)
 8003038:	2200      	movs	r2, #0
 800303a:	711a      	strb	r2, [r3, #4]
	led.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 800303c:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <HAL_Init+0x184>)
 800303e:	2202      	movs	r2, #2
 8003040:	715a      	strb	r2, [r3, #5]
	led.GPIO_CNF = GPIO_CNF_OUTPUT_PUSH_PULL;
 8003042:	4b4b      	ldr	r3, [pc, #300]	; (8003170 <HAL_Init+0x184>)
 8003044:	2203      	movs	r2, #3
 8003046:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&led);
 8003048:	4849      	ldr	r0, [pc, #292]	; (8003170 <HAL_Init+0x184>)
 800304a:	f7ff f85b 	bl	8002104 <GPIO_Init>
	//  DMA_Init(spi1.txdma);

	//  SPI_Init(&spi1);

	/* Init SPI 2 as slave */
	_RCC_SPI2_ENABLE();
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <HAL_Init+0x180>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4a46      	ldr	r2, [pc, #280]	; (800316c <HAL_Init+0x180>)
 8003054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003058:	61d3      	str	r3, [r2, #28]
	spi2.Instance = SPI2;
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_Init+0x18c>)
 800305c:	4a47      	ldr	r2, [pc, #284]	; (800317c <HAL_Init+0x190>)
 800305e:	601a      	str	r2, [r3, #0]
	spi2.Mode = SPI_MODE_SLAVE;
 8003060:	4b45      	ldr	r3, [pc, #276]	; (8003178 <HAL_Init+0x18c>)
 8003062:	2201      	movs	r2, #1
 8003064:	711a      	strb	r2, [r3, #4]
	spi2.DataSize = SPI_DATASIZE_8BIT;
 8003066:	4b44      	ldr	r3, [pc, #272]	; (8003178 <HAL_Init+0x18c>)
 8003068:	2200      	movs	r2, #0
 800306a:	745a      	strb	r2, [r3, #17]
	spi2.CPOL = SPI_CPOL_LOW;
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_Init+0x18c>)
 800306e:	2200      	movs	r2, #0
 8003070:	719a      	strb	r2, [r3, #6]
	spi2.CPHA = SPI_CPHA_1EDGE;
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_Init+0x18c>)
 8003074:	2200      	movs	r2, #0
 8003076:	71da      	strb	r2, [r3, #7]
	spi2.BaudRate = SPI_BAUDRATE_DIV2;
 8003078:	4b3f      	ldr	r3, [pc, #252]	; (8003178 <HAL_Init+0x18c>)
 800307a:	2200      	movs	r2, #0
 800307c:	715a      	strb	r2, [r3, #5]
	spi2.NSS = SPI_NSS_HARD;
 800307e:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_Init+0x18c>)
 8003080:	2201      	movs	r2, #1
 8003082:	751a      	strb	r2, [r3, #20]
	spi2.BiDir = SPI_BIDIR_DISABLE;
 8003084:	4b3c      	ldr	r3, [pc, #240]	; (8003178 <HAL_Init+0x18c>)
 8003086:	2200      	movs	r2, #0
 8003088:	755a      	strb	r2, [r3, #21]
	spi2.CRC = SPI_CRC_DISABLE;
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_Init+0x18c>)
 800308c:	2200      	movs	r2, #0
 800308e:	759a      	strb	r2, [r3, #22]
	spi2.FirstBit = SPI_LSB_FIRST;
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_Init+0x18c>)
 8003092:	2201      	movs	r2, #1
 8003094:	741a      	strb	r2, [r3, #16]
	spi2.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 8003096:	4b38      	ldr	r3, [pc, #224]	; (8003178 <HAL_Init+0x18c>)
 8003098:	2200      	movs	r2, #0
 800309a:	75da      	strb	r2, [r3, #23]
	spi2.CRCDir = SPI_CRC_TX;
 800309c:	4b36      	ldr	r3, [pc, #216]	; (8003178 <HAL_Init+0x18c>)
 800309e:	2201      	movs	r2, #1
 80030a0:	761a      	strb	r2, [r3, #24]
	spi2.SpiTxDma = SPI_TX_DMA_DISABLE;
 80030a2:	4b35      	ldr	r3, [pc, #212]	; (8003178 <HAL_Init+0x18c>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	749a      	strb	r2, [r3, #18]
	spi2.SpiRxDma = SPI_RX_DMA_ENABLE;
 80030a8:	4b33      	ldr	r3, [pc, #204]	; (8003178 <HAL_Init+0x18c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	74da      	strb	r2, [r3, #19]

	/* Init MOSI,MISO,SCK,NSS pin configs */
	/* Init MOSI pin */
	mosi2.GPIO_TypeDef = PORT_SPI2;
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_Init+0x194>)
 80030b0:	4a34      	ldr	r2, [pc, #208]	; (8003184 <HAL_Init+0x198>)
 80030b2:	601a      	str	r2, [r3, #0]
	mosi2.GPIO_Pin = MOSI_SPI2;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <HAL_Init+0x194>)
 80030b6:	220f      	movs	r2, #15
 80030b8:	711a      	strb	r2, [r3, #4]
	mosi2.GPIO_Mode = GPIO_MODE_INPUT;
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_Init+0x194>)
 80030bc:	2200      	movs	r2, #0
 80030be:	715a      	strb	r2, [r3, #5]
	mosi2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_Init+0x194>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&mosi2);
 80030c6:	482e      	ldr	r0, [pc, #184]	; (8003180 <HAL_Init+0x194>)
 80030c8:	f7ff f81c 	bl	8002104 <GPIO_Init>

	/* Init MISO pin */
	miso2.GPIO_TypeDef = PORT_SPI2;
 80030cc:	4b2e      	ldr	r3, [pc, #184]	; (8003188 <HAL_Init+0x19c>)
 80030ce:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <HAL_Init+0x198>)
 80030d0:	601a      	str	r2, [r3, #0]
	miso2.GPIO_Pin = MISO_SPI2;
 80030d2:	4b2d      	ldr	r3, [pc, #180]	; (8003188 <HAL_Init+0x19c>)
 80030d4:	220e      	movs	r2, #14
 80030d6:	711a      	strb	r2, [r3, #4]
	miso2.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 80030d8:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <HAL_Init+0x19c>)
 80030da:	2202      	movs	r2, #2
 80030dc:	715a      	strb	r2, [r3, #5]
	miso2.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 80030de:	4b2a      	ldr	r3, [pc, #168]	; (8003188 <HAL_Init+0x19c>)
 80030e0:	2205      	movs	r2, #5
 80030e2:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&miso2);
 80030e4:	4828      	ldr	r0, [pc, #160]	; (8003188 <HAL_Init+0x19c>)
 80030e6:	f7ff f80d 	bl	8002104 <GPIO_Init>

	/* Init SCK pin */
	sck2.GPIO_TypeDef = PORT_SPI2;
 80030ea:	4b28      	ldr	r3, [pc, #160]	; (800318c <HAL_Init+0x1a0>)
 80030ec:	4a25      	ldr	r2, [pc, #148]	; (8003184 <HAL_Init+0x198>)
 80030ee:	601a      	str	r2, [r3, #0]
	sck2.GPIO_Pin = SCK_SPI2;
 80030f0:	4b26      	ldr	r3, [pc, #152]	; (800318c <HAL_Init+0x1a0>)
 80030f2:	220d      	movs	r2, #13
 80030f4:	711a      	strb	r2, [r3, #4]
	sck2.GPIO_Mode = GPIO_MODE_INPUT;
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_Init+0x1a0>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	715a      	strb	r2, [r3, #5]
	sck2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 80030fc:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_Init+0x1a0>)
 80030fe:	2201      	movs	r2, #1
 8003100:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&sck2);
 8003102:	4822      	ldr	r0, [pc, #136]	; (800318c <HAL_Init+0x1a0>)
 8003104:	f7fe fffe 	bl	8002104 <GPIO_Init>

	/* Init NSS pin */
	nss2.GPIO_TypeDef = PORT_SPI2;
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_Init+0x1a4>)
 800310a:	4a1e      	ldr	r2, [pc, #120]	; (8003184 <HAL_Init+0x198>)
 800310c:	601a      	str	r2, [r3, #0]
	nss2.GPIO_Pin = NSS_SPI2;
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_Init+0x1a4>)
 8003110:	220c      	movs	r2, #12
 8003112:	711a      	strb	r2, [r3, #4]
	nss2.GPIO_Mode = GPIO_MODE_INPUT;
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_Init+0x1a4>)
 8003116:	2200      	movs	r2, #0
 8003118:	715a      	strb	r2, [r3, #5]
	nss2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_Init+0x1a4>)
 800311c:	2201      	movs	r2, #1
 800311e:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&nss2);
 8003120:	481b      	ldr	r0, [pc, #108]	; (8003190 <HAL_Init+0x1a4>)
 8003122:	f7fe ffef 	bl	8002104 <GPIO_Init>
	
	/*Init DMA channels */
	spiRxdma.dma_TypeDef = DMA1_4;
 8003126:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_Init+0x1a8>)
 8003128:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <HAL_Init+0x1ac>)
 800312a:	601a      	str	r2, [r3, #0]
	spiRxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 800312c:	4b19      	ldr	r3, [pc, #100]	; (8003194 <HAL_Init+0x1a8>)
 800312e:	2201      	movs	r2, #1
 8003130:	731a      	strb	r2, [r3, #12]
	spiRxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8003132:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_Init+0x1a8>)
 8003134:	2201      	movs	r2, #1
 8003136:	721a      	strb	r2, [r3, #8]
	spiRxdma.dma_Direction = DMA_READ_FROM_PERIPHERAL;
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <HAL_Init+0x1a8>)
 800313a:	2200      	movs	r2, #0
 800313c:	725a      	strb	r2, [r3, #9]
	spiRxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 800313e:	4b15      	ldr	r3, [pc, #84]	; (8003194 <HAL_Init+0x1a8>)
 8003140:	2200      	movs	r2, #0
 8003142:	729a      	strb	r2, [r3, #10]
	spiRxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 8003144:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_Init+0x1a8>)
 8003146:	2200      	movs	r2, #0
 8003148:	72da      	strb	r2, [r3, #11]
	spiRxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 800314a:	4b12      	ldr	r3, [pc, #72]	; (8003194 <HAL_Init+0x1a8>)
 800314c:	2200      	movs	r2, #0
 800314e:	735a      	strb	r2, [r3, #13]
	spiRxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <HAL_Init+0x1a8>)
 8003152:	2201      	movs	r2, #1
 8003154:	739a      	strb	r2, [r3, #14]
	spiRxdma.dma_Interrupt = DMA_INTERRUPT_ENABLE;
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_Init+0x1a8>)
 8003158:	2200      	movs	r2, #0
 800315a:	73da      	strb	r2, [r3, #15]

	spi2.rxdma = &spiRxdma;
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_Init+0x18c>)
 800315e:	4a0d      	ldr	r2, [pc, #52]	; (8003194 <HAL_Init+0x1a8>)
 8003160:	60da      	str	r2, [r3, #12]

	//DMA_Init(spi2.rxdma);


	SPI_Init(&spi2);
 8003162:	4805      	ldr	r0, [pc, #20]	; (8003178 <HAL_Init+0x18c>)
 8003164:	f7ff fa28 	bl	80025b8 <SPI_Init>
	// DMA_Init(&dma);
	// DMA_SetCallBackFn(&dma,DMA1_1_CallbackFn);
	// DMA_Transfer(&dma, sendArray, receiveArray,2);


}
 8003168:	bf00      	nop
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	200003a8 	.word	0x200003a8
 8003174:	40010800 	.word	0x40010800
 8003178:	2000035c 	.word	0x2000035c
 800317c:	40003800 	.word	0x40003800
 8003180:	2000034c 	.word	0x2000034c
 8003184:	40010c00 	.word	0x40010c00
 8003188:	20000378 	.word	0x20000378
 800318c:	200003b8 	.word	0x200003b8
 8003190:	200003d0 	.word	0x200003d0
 8003194:	200003c0 	.word	0x200003c0
 8003198:	40020044 	.word	0x40020044

0800319c <WWDG_IRQHandler>:
{
	GPIOA->ODR ^= (1<<0);
}

void WWDG_IRQHandler()
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 80031a0:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <WWDG_IRQHandler+0x18>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a03      	ldr	r2, [pc, #12]	; (80031b4 <WWDG_IRQHandler+0x18>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	60d3      	str	r3, [r2, #12]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40010800 	.word	0x40010800

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	; (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	; (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	; (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f000 f846 	bl	8003278 <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	; (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	; (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	; (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20002800 	.word	0x20002800
 8003218:	00000400 	.word	0x00000400
 800321c:	200000a0 	.word	0x200000a0
 8003220:	20000408 	.word	0x20000408

08003224 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003224:	480d      	ldr	r0, [pc, #52]	; (800325c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003226:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003228:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <LoopForever+0x6>)
  ldr r1, =_edata
 800322e:	490d      	ldr	r1, [pc, #52]	; (8003264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003230:	4a0d      	ldr	r2, [pc, #52]	; (8003268 <LoopForever+0xe>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003234:	e002      	b.n	800323c <LoopCopyDataInit>

08003236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323a:	3304      	adds	r3, #4

0800323c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800323c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003240:	d3f9      	bcc.n	8003236 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003242:	4a0a      	ldr	r2, [pc, #40]	; (800326c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003244:	4c0a      	ldr	r4, [pc, #40]	; (8003270 <LoopForever+0x16>)
  movs r3, #0
 8003246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003248:	e001      	b.n	800324e <LoopFillZerobss>

0800324a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800324c:	3204      	adds	r2, #4

0800324e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003250:	d3fb      	bcc.n	800324a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003252:	f000 f817 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003256:	f7ff fc7b 	bl	8002b50 <main>

0800325a <LoopForever>:

LoopForever:
    b LoopForever
 800325a:	e7fe      	b.n	800325a <LoopForever>
  ldr   r0, =_estack
 800325c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8003260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003264:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003268:	08003e24 	.word	0x08003e24
  ldr r2, =_sbss
 800326c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003270:	20000404 	.word	0x20000404

08003274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003274:	e7fe      	b.n	8003274 <ADC1_2_IRQHandler>
	...

08003278 <__errno>:
 8003278:	4b01      	ldr	r3, [pc, #4]	; (8003280 <__errno+0x8>)
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20000004 	.word	0x20000004

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	2600      	movs	r6, #0
 8003288:	4d0c      	ldr	r5, [pc, #48]	; (80032bc <__libc_init_array+0x38>)
 800328a:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328c:	1b64      	subs	r4, r4, r5
 800328e:	10a4      	asrs	r4, r4, #2
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	f000 fc54 	bl	8003b40 <_init>
 8003298:	2600      	movs	r6, #0
 800329a:	4d0a      	ldr	r5, [pc, #40]	; (80032c4 <__libc_init_array+0x40>)
 800329c:	4c0a      	ldr	r4, [pc, #40]	; (80032c8 <__libc_init_array+0x44>)
 800329e:	1b64      	subs	r4, r4, r5
 80032a0:	10a4      	asrs	r4, r4, #2
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003e1c 	.word	0x08003e1c
 80032c0:	08003e1c 	.word	0x08003e1c
 80032c4:	08003e1c 	.word	0x08003e1c
 80032c8:	08003e20 	.word	0x08003e20

080032cc <_vsiprintf_r>:
 80032cc:	b500      	push	{lr}
 80032ce:	b09b      	sub	sp, #108	; 0x6c
 80032d0:	9100      	str	r1, [sp, #0]
 80032d2:	9104      	str	r1, [sp, #16]
 80032d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032d8:	9105      	str	r1, [sp, #20]
 80032da:	9102      	str	r1, [sp, #8]
 80032dc:	4905      	ldr	r1, [pc, #20]	; (80032f4 <_vsiprintf_r+0x28>)
 80032de:	9103      	str	r1, [sp, #12]
 80032e0:	4669      	mov	r1, sp
 80032e2:	f000 f86f 	bl	80033c4 <_svfiprintf_r>
 80032e6:	2200      	movs	r2, #0
 80032e8:	9b00      	ldr	r3, [sp, #0]
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	b01b      	add	sp, #108	; 0x6c
 80032ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80032f2:	bf00      	nop
 80032f4:	ffff0208 	.word	0xffff0208

080032f8 <vsiprintf>:
 80032f8:	4613      	mov	r3, r2
 80032fa:	460a      	mov	r2, r1
 80032fc:	4601      	mov	r1, r0
 80032fe:	4802      	ldr	r0, [pc, #8]	; (8003308 <vsiprintf+0x10>)
 8003300:	6800      	ldr	r0, [r0, #0]
 8003302:	f7ff bfe3 	b.w	80032cc <_vsiprintf_r>
 8003306:	bf00      	nop
 8003308:	20000004 	.word	0x20000004

0800330c <__ssputs_r>:
 800330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003310:	688e      	ldr	r6, [r1, #8]
 8003312:	4682      	mov	sl, r0
 8003314:	429e      	cmp	r6, r3
 8003316:	460c      	mov	r4, r1
 8003318:	4690      	mov	r8, r2
 800331a:	461f      	mov	r7, r3
 800331c:	d838      	bhi.n	8003390 <__ssputs_r+0x84>
 800331e:	898a      	ldrh	r2, [r1, #12]
 8003320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003324:	d032      	beq.n	800338c <__ssputs_r+0x80>
 8003326:	6825      	ldr	r5, [r4, #0]
 8003328:	6909      	ldr	r1, [r1, #16]
 800332a:	3301      	adds	r3, #1
 800332c:	eba5 0901 	sub.w	r9, r5, r1
 8003330:	6965      	ldr	r5, [r4, #20]
 8003332:	444b      	add	r3, r9
 8003334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800333c:	106d      	asrs	r5, r5, #1
 800333e:	429d      	cmp	r5, r3
 8003340:	bf38      	it	cc
 8003342:	461d      	movcc	r5, r3
 8003344:	0553      	lsls	r3, r2, #21
 8003346:	d531      	bpl.n	80033ac <__ssputs_r+0xa0>
 8003348:	4629      	mov	r1, r5
 800334a:	f000 fb53 	bl	80039f4 <_malloc_r>
 800334e:	4606      	mov	r6, r0
 8003350:	b950      	cbnz	r0, 8003368 <__ssputs_r+0x5c>
 8003352:	230c      	movs	r3, #12
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	f8ca 3000 	str.w	r3, [sl]
 800335c:	89a3      	ldrh	r3, [r4, #12]
 800335e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003362:	81a3      	strh	r3, [r4, #12]
 8003364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003368:	464a      	mov	r2, r9
 800336a:	6921      	ldr	r1, [r4, #16]
 800336c:	f000 face 	bl	800390c <memcpy>
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337a:	81a3      	strh	r3, [r4, #12]
 800337c:	6126      	str	r6, [r4, #16]
 800337e:	444e      	add	r6, r9
 8003380:	6026      	str	r6, [r4, #0]
 8003382:	463e      	mov	r6, r7
 8003384:	6165      	str	r5, [r4, #20]
 8003386:	eba5 0509 	sub.w	r5, r5, r9
 800338a:	60a5      	str	r5, [r4, #8]
 800338c:	42be      	cmp	r6, r7
 800338e:	d900      	bls.n	8003392 <__ssputs_r+0x86>
 8003390:	463e      	mov	r6, r7
 8003392:	4632      	mov	r2, r6
 8003394:	4641      	mov	r1, r8
 8003396:	6820      	ldr	r0, [r4, #0]
 8003398:	f000 fac6 	bl	8003928 <memmove>
 800339c:	68a3      	ldr	r3, [r4, #8]
 800339e:	6822      	ldr	r2, [r4, #0]
 80033a0:	1b9b      	subs	r3, r3, r6
 80033a2:	4432      	add	r2, r6
 80033a4:	2000      	movs	r0, #0
 80033a6:	60a3      	str	r3, [r4, #8]
 80033a8:	6022      	str	r2, [r4, #0]
 80033aa:	e7db      	b.n	8003364 <__ssputs_r+0x58>
 80033ac:	462a      	mov	r2, r5
 80033ae:	f000 fb7b 	bl	8003aa8 <_realloc_r>
 80033b2:	4606      	mov	r6, r0
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d1e1      	bne.n	800337c <__ssputs_r+0x70>
 80033b8:	4650      	mov	r0, sl
 80033ba:	6921      	ldr	r1, [r4, #16]
 80033bc:	f000 face 	bl	800395c <_free_r>
 80033c0:	e7c7      	b.n	8003352 <__ssputs_r+0x46>
	...

080033c4 <_svfiprintf_r>:
 80033c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c8:	4698      	mov	r8, r3
 80033ca:	898b      	ldrh	r3, [r1, #12]
 80033cc:	4607      	mov	r7, r0
 80033ce:	061b      	lsls	r3, r3, #24
 80033d0:	460d      	mov	r5, r1
 80033d2:	4614      	mov	r4, r2
 80033d4:	b09d      	sub	sp, #116	; 0x74
 80033d6:	d50e      	bpl.n	80033f6 <_svfiprintf_r+0x32>
 80033d8:	690b      	ldr	r3, [r1, #16]
 80033da:	b963      	cbnz	r3, 80033f6 <_svfiprintf_r+0x32>
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	f000 fb09 	bl	80039f4 <_malloc_r>
 80033e2:	6028      	str	r0, [r5, #0]
 80033e4:	6128      	str	r0, [r5, #16]
 80033e6:	b920      	cbnz	r0, 80033f2 <_svfiprintf_r+0x2e>
 80033e8:	230c      	movs	r3, #12
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295
 80033f0:	e0d1      	b.n	8003596 <_svfiprintf_r+0x1d2>
 80033f2:	2340      	movs	r3, #64	; 0x40
 80033f4:	616b      	str	r3, [r5, #20]
 80033f6:	2300      	movs	r3, #0
 80033f8:	9309      	str	r3, [sp, #36]	; 0x24
 80033fa:	2320      	movs	r3, #32
 80033fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003400:	2330      	movs	r3, #48	; 0x30
 8003402:	f04f 0901 	mov.w	r9, #1
 8003406:	f8cd 800c 	str.w	r8, [sp, #12]
 800340a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80035b0 <_svfiprintf_r+0x1ec>
 800340e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003412:	4623      	mov	r3, r4
 8003414:	469a      	mov	sl, r3
 8003416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800341a:	b10a      	cbz	r2, 8003420 <_svfiprintf_r+0x5c>
 800341c:	2a25      	cmp	r2, #37	; 0x25
 800341e:	d1f9      	bne.n	8003414 <_svfiprintf_r+0x50>
 8003420:	ebba 0b04 	subs.w	fp, sl, r4
 8003424:	d00b      	beq.n	800343e <_svfiprintf_r+0x7a>
 8003426:	465b      	mov	r3, fp
 8003428:	4622      	mov	r2, r4
 800342a:	4629      	mov	r1, r5
 800342c:	4638      	mov	r0, r7
 800342e:	f7ff ff6d 	bl	800330c <__ssputs_r>
 8003432:	3001      	adds	r0, #1
 8003434:	f000 80aa 	beq.w	800358c <_svfiprintf_r+0x1c8>
 8003438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800343a:	445a      	add	r2, fp
 800343c:	9209      	str	r2, [sp, #36]	; 0x24
 800343e:	f89a 3000 	ldrb.w	r3, [sl]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80a2 	beq.w	800358c <_svfiprintf_r+0x1c8>
 8003448:	2300      	movs	r3, #0
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
 800344e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003452:	f10a 0a01 	add.w	sl, sl, #1
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	9307      	str	r3, [sp, #28]
 800345a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800345e:	931a      	str	r3, [sp, #104]	; 0x68
 8003460:	4654      	mov	r4, sl
 8003462:	2205      	movs	r2, #5
 8003464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003468:	4851      	ldr	r0, [pc, #324]	; (80035b0 <_svfiprintf_r+0x1ec>)
 800346a:	f000 fa41 	bl	80038f0 <memchr>
 800346e:	9a04      	ldr	r2, [sp, #16]
 8003470:	b9d8      	cbnz	r0, 80034aa <_svfiprintf_r+0xe6>
 8003472:	06d0      	lsls	r0, r2, #27
 8003474:	bf44      	itt	mi
 8003476:	2320      	movmi	r3, #32
 8003478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800347c:	0711      	lsls	r1, r2, #28
 800347e:	bf44      	itt	mi
 8003480:	232b      	movmi	r3, #43	; 0x2b
 8003482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003486:	f89a 3000 	ldrb.w	r3, [sl]
 800348a:	2b2a      	cmp	r3, #42	; 0x2a
 800348c:	d015      	beq.n	80034ba <_svfiprintf_r+0xf6>
 800348e:	4654      	mov	r4, sl
 8003490:	2000      	movs	r0, #0
 8003492:	f04f 0c0a 	mov.w	ip, #10
 8003496:	9a07      	ldr	r2, [sp, #28]
 8003498:	4621      	mov	r1, r4
 800349a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800349e:	3b30      	subs	r3, #48	; 0x30
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d94e      	bls.n	8003542 <_svfiprintf_r+0x17e>
 80034a4:	b1b0      	cbz	r0, 80034d4 <_svfiprintf_r+0x110>
 80034a6:	9207      	str	r2, [sp, #28]
 80034a8:	e014      	b.n	80034d4 <_svfiprintf_r+0x110>
 80034aa:	eba0 0308 	sub.w	r3, r0, r8
 80034ae:	fa09 f303 	lsl.w	r3, r9, r3
 80034b2:	4313      	orrs	r3, r2
 80034b4:	46a2      	mov	sl, r4
 80034b6:	9304      	str	r3, [sp, #16]
 80034b8:	e7d2      	b.n	8003460 <_svfiprintf_r+0x9c>
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	1d19      	adds	r1, r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	9103      	str	r1, [sp, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	bfbb      	ittet	lt
 80034c6:	425b      	neglt	r3, r3
 80034c8:	f042 0202 	orrlt.w	r2, r2, #2
 80034cc:	9307      	strge	r3, [sp, #28]
 80034ce:	9307      	strlt	r3, [sp, #28]
 80034d0:	bfb8      	it	lt
 80034d2:	9204      	strlt	r2, [sp, #16]
 80034d4:	7823      	ldrb	r3, [r4, #0]
 80034d6:	2b2e      	cmp	r3, #46	; 0x2e
 80034d8:	d10c      	bne.n	80034f4 <_svfiprintf_r+0x130>
 80034da:	7863      	ldrb	r3, [r4, #1]
 80034dc:	2b2a      	cmp	r3, #42	; 0x2a
 80034de:	d135      	bne.n	800354c <_svfiprintf_r+0x188>
 80034e0:	9b03      	ldr	r3, [sp, #12]
 80034e2:	3402      	adds	r4, #2
 80034e4:	1d1a      	adds	r2, r3, #4
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	9203      	str	r2, [sp, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bfb8      	it	lt
 80034ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80034f2:	9305      	str	r3, [sp, #20]
 80034f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035c0 <_svfiprintf_r+0x1fc>
 80034f8:	2203      	movs	r2, #3
 80034fa:	4650      	mov	r0, sl
 80034fc:	7821      	ldrb	r1, [r4, #0]
 80034fe:	f000 f9f7 	bl	80038f0 <memchr>
 8003502:	b140      	cbz	r0, 8003516 <_svfiprintf_r+0x152>
 8003504:	2340      	movs	r3, #64	; 0x40
 8003506:	eba0 000a 	sub.w	r0, r0, sl
 800350a:	fa03 f000 	lsl.w	r0, r3, r0
 800350e:	9b04      	ldr	r3, [sp, #16]
 8003510:	3401      	adds	r4, #1
 8003512:	4303      	orrs	r3, r0
 8003514:	9304      	str	r3, [sp, #16]
 8003516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800351a:	2206      	movs	r2, #6
 800351c:	4825      	ldr	r0, [pc, #148]	; (80035b4 <_svfiprintf_r+0x1f0>)
 800351e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003522:	f000 f9e5 	bl	80038f0 <memchr>
 8003526:	2800      	cmp	r0, #0
 8003528:	d038      	beq.n	800359c <_svfiprintf_r+0x1d8>
 800352a:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <_svfiprintf_r+0x1f4>)
 800352c:	bb1b      	cbnz	r3, 8003576 <_svfiprintf_r+0x1b2>
 800352e:	9b03      	ldr	r3, [sp, #12]
 8003530:	3307      	adds	r3, #7
 8003532:	f023 0307 	bic.w	r3, r3, #7
 8003536:	3308      	adds	r3, #8
 8003538:	9303      	str	r3, [sp, #12]
 800353a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800353c:	4433      	add	r3, r6
 800353e:	9309      	str	r3, [sp, #36]	; 0x24
 8003540:	e767      	b.n	8003412 <_svfiprintf_r+0x4e>
 8003542:	460c      	mov	r4, r1
 8003544:	2001      	movs	r0, #1
 8003546:	fb0c 3202 	mla	r2, ip, r2, r3
 800354a:	e7a5      	b.n	8003498 <_svfiprintf_r+0xd4>
 800354c:	2300      	movs	r3, #0
 800354e:	f04f 0c0a 	mov.w	ip, #10
 8003552:	4619      	mov	r1, r3
 8003554:	3401      	adds	r4, #1
 8003556:	9305      	str	r3, [sp, #20]
 8003558:	4620      	mov	r0, r4
 800355a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800355e:	3a30      	subs	r2, #48	; 0x30
 8003560:	2a09      	cmp	r2, #9
 8003562:	d903      	bls.n	800356c <_svfiprintf_r+0x1a8>
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0c5      	beq.n	80034f4 <_svfiprintf_r+0x130>
 8003568:	9105      	str	r1, [sp, #20]
 800356a:	e7c3      	b.n	80034f4 <_svfiprintf_r+0x130>
 800356c:	4604      	mov	r4, r0
 800356e:	2301      	movs	r3, #1
 8003570:	fb0c 2101 	mla	r1, ip, r1, r2
 8003574:	e7f0      	b.n	8003558 <_svfiprintf_r+0x194>
 8003576:	ab03      	add	r3, sp, #12
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	462a      	mov	r2, r5
 800357c:	4638      	mov	r0, r7
 800357e:	4b0f      	ldr	r3, [pc, #60]	; (80035bc <_svfiprintf_r+0x1f8>)
 8003580:	a904      	add	r1, sp, #16
 8003582:	f3af 8000 	nop.w
 8003586:	1c42      	adds	r2, r0, #1
 8003588:	4606      	mov	r6, r0
 800358a:	d1d6      	bne.n	800353a <_svfiprintf_r+0x176>
 800358c:	89ab      	ldrh	r3, [r5, #12]
 800358e:	065b      	lsls	r3, r3, #25
 8003590:	f53f af2c 	bmi.w	80033ec <_svfiprintf_r+0x28>
 8003594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003596:	b01d      	add	sp, #116	; 0x74
 8003598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800359c:	ab03      	add	r3, sp, #12
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	462a      	mov	r2, r5
 80035a2:	4638      	mov	r0, r7
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <_svfiprintf_r+0x1f8>)
 80035a6:	a904      	add	r1, sp, #16
 80035a8:	f000 f87c 	bl	80036a4 <_printf_i>
 80035ac:	e7eb      	b.n	8003586 <_svfiprintf_r+0x1c2>
 80035ae:	bf00      	nop
 80035b0:	08003de8 	.word	0x08003de8
 80035b4:	08003df2 	.word	0x08003df2
 80035b8:	00000000 	.word	0x00000000
 80035bc:	0800330d 	.word	0x0800330d
 80035c0:	08003dee 	.word	0x08003dee

080035c4 <_printf_common>:
 80035c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c8:	4616      	mov	r6, r2
 80035ca:	4699      	mov	r9, r3
 80035cc:	688a      	ldr	r2, [r1, #8]
 80035ce:	690b      	ldr	r3, [r1, #16]
 80035d0:	4607      	mov	r7, r0
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bfb8      	it	lt
 80035d6:	4613      	movlt	r3, r2
 80035d8:	6033      	str	r3, [r6, #0]
 80035da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035de:	460c      	mov	r4, r1
 80035e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035e4:	b10a      	cbz	r2, 80035ea <_printf_common+0x26>
 80035e6:	3301      	adds	r3, #1
 80035e8:	6033      	str	r3, [r6, #0]
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	0699      	lsls	r1, r3, #26
 80035ee:	bf42      	ittt	mi
 80035f0:	6833      	ldrmi	r3, [r6, #0]
 80035f2:	3302      	addmi	r3, #2
 80035f4:	6033      	strmi	r3, [r6, #0]
 80035f6:	6825      	ldr	r5, [r4, #0]
 80035f8:	f015 0506 	ands.w	r5, r5, #6
 80035fc:	d106      	bne.n	800360c <_printf_common+0x48>
 80035fe:	f104 0a19 	add.w	sl, r4, #25
 8003602:	68e3      	ldr	r3, [r4, #12]
 8003604:	6832      	ldr	r2, [r6, #0]
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	42ab      	cmp	r3, r5
 800360a:	dc28      	bgt.n	800365e <_printf_common+0x9a>
 800360c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003610:	1e13      	subs	r3, r2, #0
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	bf18      	it	ne
 8003616:	2301      	movne	r3, #1
 8003618:	0692      	lsls	r2, r2, #26
 800361a:	d42d      	bmi.n	8003678 <_printf_common+0xb4>
 800361c:	4649      	mov	r1, r9
 800361e:	4638      	mov	r0, r7
 8003620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003624:	47c0      	blx	r8
 8003626:	3001      	adds	r0, #1
 8003628:	d020      	beq.n	800366c <_printf_common+0xa8>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	68e5      	ldr	r5, [r4, #12]
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf18      	it	ne
 8003636:	2500      	movne	r5, #0
 8003638:	6832      	ldr	r2, [r6, #0]
 800363a:	f04f 0600 	mov.w	r6, #0
 800363e:	68a3      	ldr	r3, [r4, #8]
 8003640:	bf08      	it	eq
 8003642:	1aad      	subeq	r5, r5, r2
 8003644:	6922      	ldr	r2, [r4, #16]
 8003646:	bf08      	it	eq
 8003648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800364c:	4293      	cmp	r3, r2
 800364e:	bfc4      	itt	gt
 8003650:	1a9b      	subgt	r3, r3, r2
 8003652:	18ed      	addgt	r5, r5, r3
 8003654:	341a      	adds	r4, #26
 8003656:	42b5      	cmp	r5, r6
 8003658:	d11a      	bne.n	8003690 <_printf_common+0xcc>
 800365a:	2000      	movs	r0, #0
 800365c:	e008      	b.n	8003670 <_printf_common+0xac>
 800365e:	2301      	movs	r3, #1
 8003660:	4652      	mov	r2, sl
 8003662:	4649      	mov	r1, r9
 8003664:	4638      	mov	r0, r7
 8003666:	47c0      	blx	r8
 8003668:	3001      	adds	r0, #1
 800366a:	d103      	bne.n	8003674 <_printf_common+0xb0>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003674:	3501      	adds	r5, #1
 8003676:	e7c4      	b.n	8003602 <_printf_common+0x3e>
 8003678:	2030      	movs	r0, #48	; 0x30
 800367a:	18e1      	adds	r1, r4, r3
 800367c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003686:	4422      	add	r2, r4
 8003688:	3302      	adds	r3, #2
 800368a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800368e:	e7c5      	b.n	800361c <_printf_common+0x58>
 8003690:	2301      	movs	r3, #1
 8003692:	4622      	mov	r2, r4
 8003694:	4649      	mov	r1, r9
 8003696:	4638      	mov	r0, r7
 8003698:	47c0      	blx	r8
 800369a:	3001      	adds	r0, #1
 800369c:	d0e6      	beq.n	800366c <_printf_common+0xa8>
 800369e:	3601      	adds	r6, #1
 80036a0:	e7d9      	b.n	8003656 <_printf_common+0x92>
	...

080036a4 <_printf_i>:
 80036a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	460c      	mov	r4, r1
 80036aa:	7e27      	ldrb	r7, [r4, #24]
 80036ac:	4691      	mov	r9, r2
 80036ae:	2f78      	cmp	r7, #120	; 0x78
 80036b0:	4680      	mov	r8, r0
 80036b2:	469a      	mov	sl, r3
 80036b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ba:	d807      	bhi.n	80036cc <_printf_i+0x28>
 80036bc:	2f62      	cmp	r7, #98	; 0x62
 80036be:	d80a      	bhi.n	80036d6 <_printf_i+0x32>
 80036c0:	2f00      	cmp	r7, #0
 80036c2:	f000 80d9 	beq.w	8003878 <_printf_i+0x1d4>
 80036c6:	2f58      	cmp	r7, #88	; 0x58
 80036c8:	f000 80a4 	beq.w	8003814 <_printf_i+0x170>
 80036cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036d4:	e03a      	b.n	800374c <_printf_i+0xa8>
 80036d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036da:	2b15      	cmp	r3, #21
 80036dc:	d8f6      	bhi.n	80036cc <_printf_i+0x28>
 80036de:	a001      	add	r0, pc, #4	; (adr r0, 80036e4 <_printf_i+0x40>)
 80036e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036e4:	0800373d 	.word	0x0800373d
 80036e8:	08003751 	.word	0x08003751
 80036ec:	080036cd 	.word	0x080036cd
 80036f0:	080036cd 	.word	0x080036cd
 80036f4:	080036cd 	.word	0x080036cd
 80036f8:	080036cd 	.word	0x080036cd
 80036fc:	08003751 	.word	0x08003751
 8003700:	080036cd 	.word	0x080036cd
 8003704:	080036cd 	.word	0x080036cd
 8003708:	080036cd 	.word	0x080036cd
 800370c:	080036cd 	.word	0x080036cd
 8003710:	0800385f 	.word	0x0800385f
 8003714:	08003781 	.word	0x08003781
 8003718:	08003841 	.word	0x08003841
 800371c:	080036cd 	.word	0x080036cd
 8003720:	080036cd 	.word	0x080036cd
 8003724:	08003881 	.word	0x08003881
 8003728:	080036cd 	.word	0x080036cd
 800372c:	08003781 	.word	0x08003781
 8003730:	080036cd 	.word	0x080036cd
 8003734:	080036cd 	.word	0x080036cd
 8003738:	08003849 	.word	0x08003849
 800373c:	680b      	ldr	r3, [r1, #0]
 800373e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003742:	1d1a      	adds	r2, r3, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	600a      	str	r2, [r1, #0]
 8003748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800374c:	2301      	movs	r3, #1
 800374e:	e0a4      	b.n	800389a <_printf_i+0x1f6>
 8003750:	6825      	ldr	r5, [r4, #0]
 8003752:	6808      	ldr	r0, [r1, #0]
 8003754:	062e      	lsls	r6, r5, #24
 8003756:	f100 0304 	add.w	r3, r0, #4
 800375a:	d50a      	bpl.n	8003772 <_printf_i+0xce>
 800375c:	6805      	ldr	r5, [r0, #0]
 800375e:	600b      	str	r3, [r1, #0]
 8003760:	2d00      	cmp	r5, #0
 8003762:	da03      	bge.n	800376c <_printf_i+0xc8>
 8003764:	232d      	movs	r3, #45	; 0x2d
 8003766:	426d      	negs	r5, r5
 8003768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800376c:	230a      	movs	r3, #10
 800376e:	485e      	ldr	r0, [pc, #376]	; (80038e8 <_printf_i+0x244>)
 8003770:	e019      	b.n	80037a6 <_printf_i+0x102>
 8003772:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003776:	6805      	ldr	r5, [r0, #0]
 8003778:	600b      	str	r3, [r1, #0]
 800377a:	bf18      	it	ne
 800377c:	b22d      	sxthne	r5, r5
 800377e:	e7ef      	b.n	8003760 <_printf_i+0xbc>
 8003780:	680b      	ldr	r3, [r1, #0]
 8003782:	6825      	ldr	r5, [r4, #0]
 8003784:	1d18      	adds	r0, r3, #4
 8003786:	6008      	str	r0, [r1, #0]
 8003788:	0628      	lsls	r0, r5, #24
 800378a:	d501      	bpl.n	8003790 <_printf_i+0xec>
 800378c:	681d      	ldr	r5, [r3, #0]
 800378e:	e002      	b.n	8003796 <_printf_i+0xf2>
 8003790:	0669      	lsls	r1, r5, #25
 8003792:	d5fb      	bpl.n	800378c <_printf_i+0xe8>
 8003794:	881d      	ldrh	r5, [r3, #0]
 8003796:	2f6f      	cmp	r7, #111	; 0x6f
 8003798:	bf0c      	ite	eq
 800379a:	2308      	moveq	r3, #8
 800379c:	230a      	movne	r3, #10
 800379e:	4852      	ldr	r0, [pc, #328]	; (80038e8 <_printf_i+0x244>)
 80037a0:	2100      	movs	r1, #0
 80037a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037a6:	6866      	ldr	r6, [r4, #4]
 80037a8:	2e00      	cmp	r6, #0
 80037aa:	bfa8      	it	ge
 80037ac:	6821      	ldrge	r1, [r4, #0]
 80037ae:	60a6      	str	r6, [r4, #8]
 80037b0:	bfa4      	itt	ge
 80037b2:	f021 0104 	bicge.w	r1, r1, #4
 80037b6:	6021      	strge	r1, [r4, #0]
 80037b8:	b90d      	cbnz	r5, 80037be <_printf_i+0x11a>
 80037ba:	2e00      	cmp	r6, #0
 80037bc:	d04d      	beq.n	800385a <_printf_i+0x1b6>
 80037be:	4616      	mov	r6, r2
 80037c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80037c4:	fb03 5711 	mls	r7, r3, r1, r5
 80037c8:	5dc7      	ldrb	r7, [r0, r7]
 80037ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037ce:	462f      	mov	r7, r5
 80037d0:	42bb      	cmp	r3, r7
 80037d2:	460d      	mov	r5, r1
 80037d4:	d9f4      	bls.n	80037c0 <_printf_i+0x11c>
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d10b      	bne.n	80037f2 <_printf_i+0x14e>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	07df      	lsls	r7, r3, #31
 80037de:	d508      	bpl.n	80037f2 <_printf_i+0x14e>
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	6861      	ldr	r1, [r4, #4]
 80037e4:	4299      	cmp	r1, r3
 80037e6:	bfde      	ittt	le
 80037e8:	2330      	movle	r3, #48	; 0x30
 80037ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037f2:	1b92      	subs	r2, r2, r6
 80037f4:	6122      	str	r2, [r4, #16]
 80037f6:	464b      	mov	r3, r9
 80037f8:	4621      	mov	r1, r4
 80037fa:	4640      	mov	r0, r8
 80037fc:	f8cd a000 	str.w	sl, [sp]
 8003800:	aa03      	add	r2, sp, #12
 8003802:	f7ff fedf 	bl	80035c4 <_printf_common>
 8003806:	3001      	adds	r0, #1
 8003808:	d14c      	bne.n	80038a4 <_printf_i+0x200>
 800380a:	f04f 30ff 	mov.w	r0, #4294967295
 800380e:	b004      	add	sp, #16
 8003810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003814:	4834      	ldr	r0, [pc, #208]	; (80038e8 <_printf_i+0x244>)
 8003816:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800381a:	680e      	ldr	r6, [r1, #0]
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003822:	061f      	lsls	r7, r3, #24
 8003824:	600e      	str	r6, [r1, #0]
 8003826:	d514      	bpl.n	8003852 <_printf_i+0x1ae>
 8003828:	07d9      	lsls	r1, r3, #31
 800382a:	bf44      	itt	mi
 800382c:	f043 0320 	orrmi.w	r3, r3, #32
 8003830:	6023      	strmi	r3, [r4, #0]
 8003832:	b91d      	cbnz	r5, 800383c <_printf_i+0x198>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	f023 0320 	bic.w	r3, r3, #32
 800383a:	6023      	str	r3, [r4, #0]
 800383c:	2310      	movs	r3, #16
 800383e:	e7af      	b.n	80037a0 <_printf_i+0xfc>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	f043 0320 	orr.w	r3, r3, #32
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	2378      	movs	r3, #120	; 0x78
 800384a:	4828      	ldr	r0, [pc, #160]	; (80038ec <_printf_i+0x248>)
 800384c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003850:	e7e3      	b.n	800381a <_printf_i+0x176>
 8003852:	065e      	lsls	r6, r3, #25
 8003854:	bf48      	it	mi
 8003856:	b2ad      	uxthmi	r5, r5
 8003858:	e7e6      	b.n	8003828 <_printf_i+0x184>
 800385a:	4616      	mov	r6, r2
 800385c:	e7bb      	b.n	80037d6 <_printf_i+0x132>
 800385e:	680b      	ldr	r3, [r1, #0]
 8003860:	6826      	ldr	r6, [r4, #0]
 8003862:	1d1d      	adds	r5, r3, #4
 8003864:	6960      	ldr	r0, [r4, #20]
 8003866:	600d      	str	r5, [r1, #0]
 8003868:	0635      	lsls	r5, r6, #24
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	d501      	bpl.n	8003872 <_printf_i+0x1ce>
 800386e:	6018      	str	r0, [r3, #0]
 8003870:	e002      	b.n	8003878 <_printf_i+0x1d4>
 8003872:	0671      	lsls	r1, r6, #25
 8003874:	d5fb      	bpl.n	800386e <_printf_i+0x1ca>
 8003876:	8018      	strh	r0, [r3, #0]
 8003878:	2300      	movs	r3, #0
 800387a:	4616      	mov	r6, r2
 800387c:	6123      	str	r3, [r4, #16]
 800387e:	e7ba      	b.n	80037f6 <_printf_i+0x152>
 8003880:	680b      	ldr	r3, [r1, #0]
 8003882:	1d1a      	adds	r2, r3, #4
 8003884:	600a      	str	r2, [r1, #0]
 8003886:	681e      	ldr	r6, [r3, #0]
 8003888:	2100      	movs	r1, #0
 800388a:	4630      	mov	r0, r6
 800388c:	6862      	ldr	r2, [r4, #4]
 800388e:	f000 f82f 	bl	80038f0 <memchr>
 8003892:	b108      	cbz	r0, 8003898 <_printf_i+0x1f4>
 8003894:	1b80      	subs	r0, r0, r6
 8003896:	6060      	str	r0, [r4, #4]
 8003898:	6863      	ldr	r3, [r4, #4]
 800389a:	6123      	str	r3, [r4, #16]
 800389c:	2300      	movs	r3, #0
 800389e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a2:	e7a8      	b.n	80037f6 <_printf_i+0x152>
 80038a4:	4632      	mov	r2, r6
 80038a6:	4649      	mov	r1, r9
 80038a8:	4640      	mov	r0, r8
 80038aa:	6923      	ldr	r3, [r4, #16]
 80038ac:	47d0      	blx	sl
 80038ae:	3001      	adds	r0, #1
 80038b0:	d0ab      	beq.n	800380a <_printf_i+0x166>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	079b      	lsls	r3, r3, #30
 80038b6:	d413      	bmi.n	80038e0 <_printf_i+0x23c>
 80038b8:	68e0      	ldr	r0, [r4, #12]
 80038ba:	9b03      	ldr	r3, [sp, #12]
 80038bc:	4298      	cmp	r0, r3
 80038be:	bfb8      	it	lt
 80038c0:	4618      	movlt	r0, r3
 80038c2:	e7a4      	b.n	800380e <_printf_i+0x16a>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4632      	mov	r2, r6
 80038c8:	4649      	mov	r1, r9
 80038ca:	4640      	mov	r0, r8
 80038cc:	47d0      	blx	sl
 80038ce:	3001      	adds	r0, #1
 80038d0:	d09b      	beq.n	800380a <_printf_i+0x166>
 80038d2:	3501      	adds	r5, #1
 80038d4:	68e3      	ldr	r3, [r4, #12]
 80038d6:	9903      	ldr	r1, [sp, #12]
 80038d8:	1a5b      	subs	r3, r3, r1
 80038da:	42ab      	cmp	r3, r5
 80038dc:	dcf2      	bgt.n	80038c4 <_printf_i+0x220>
 80038de:	e7eb      	b.n	80038b8 <_printf_i+0x214>
 80038e0:	2500      	movs	r5, #0
 80038e2:	f104 0619 	add.w	r6, r4, #25
 80038e6:	e7f5      	b.n	80038d4 <_printf_i+0x230>
 80038e8:	08003df9 	.word	0x08003df9
 80038ec:	08003e0a 	.word	0x08003e0a

080038f0 <memchr>:
 80038f0:	4603      	mov	r3, r0
 80038f2:	b510      	push	{r4, lr}
 80038f4:	b2c9      	uxtb	r1, r1
 80038f6:	4402      	add	r2, r0
 80038f8:	4293      	cmp	r3, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	d101      	bne.n	8003902 <memchr+0x12>
 80038fe:	2000      	movs	r0, #0
 8003900:	e003      	b.n	800390a <memchr+0x1a>
 8003902:	7804      	ldrb	r4, [r0, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	428c      	cmp	r4, r1
 8003908:	d1f6      	bne.n	80038f8 <memchr+0x8>
 800390a:	bd10      	pop	{r4, pc}

0800390c <memcpy>:
 800390c:	440a      	add	r2, r1
 800390e:	4291      	cmp	r1, r2
 8003910:	f100 33ff 	add.w	r3, r0, #4294967295
 8003914:	d100      	bne.n	8003918 <memcpy+0xc>
 8003916:	4770      	bx	lr
 8003918:	b510      	push	{r4, lr}
 800391a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800391e:	4291      	cmp	r1, r2
 8003920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003924:	d1f9      	bne.n	800391a <memcpy+0xe>
 8003926:	bd10      	pop	{r4, pc}

08003928 <memmove>:
 8003928:	4288      	cmp	r0, r1
 800392a:	b510      	push	{r4, lr}
 800392c:	eb01 0402 	add.w	r4, r1, r2
 8003930:	d902      	bls.n	8003938 <memmove+0x10>
 8003932:	4284      	cmp	r4, r0
 8003934:	4623      	mov	r3, r4
 8003936:	d807      	bhi.n	8003948 <memmove+0x20>
 8003938:	1e43      	subs	r3, r0, #1
 800393a:	42a1      	cmp	r1, r4
 800393c:	d008      	beq.n	8003950 <memmove+0x28>
 800393e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003946:	e7f8      	b.n	800393a <memmove+0x12>
 8003948:	4601      	mov	r1, r0
 800394a:	4402      	add	r2, r0
 800394c:	428a      	cmp	r2, r1
 800394e:	d100      	bne.n	8003952 <memmove+0x2a>
 8003950:	bd10      	pop	{r4, pc}
 8003952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800395a:	e7f7      	b.n	800394c <memmove+0x24>

0800395c <_free_r>:
 800395c:	b538      	push	{r3, r4, r5, lr}
 800395e:	4605      	mov	r5, r0
 8003960:	2900      	cmp	r1, #0
 8003962:	d043      	beq.n	80039ec <_free_r+0x90>
 8003964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003968:	1f0c      	subs	r4, r1, #4
 800396a:	2b00      	cmp	r3, #0
 800396c:	bfb8      	it	lt
 800396e:	18e4      	addlt	r4, r4, r3
 8003970:	f000 f8d0 	bl	8003b14 <__malloc_lock>
 8003974:	4a1e      	ldr	r2, [pc, #120]	; (80039f0 <_free_r+0x94>)
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	4610      	mov	r0, r2
 800397a:	b933      	cbnz	r3, 800398a <_free_r+0x2e>
 800397c:	6063      	str	r3, [r4, #4]
 800397e:	6014      	str	r4, [r2, #0]
 8003980:	4628      	mov	r0, r5
 8003982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003986:	f000 b8cb 	b.w	8003b20 <__malloc_unlock>
 800398a:	42a3      	cmp	r3, r4
 800398c:	d90a      	bls.n	80039a4 <_free_r+0x48>
 800398e:	6821      	ldr	r1, [r4, #0]
 8003990:	1862      	adds	r2, r4, r1
 8003992:	4293      	cmp	r3, r2
 8003994:	bf01      	itttt	eq
 8003996:	681a      	ldreq	r2, [r3, #0]
 8003998:	685b      	ldreq	r3, [r3, #4]
 800399a:	1852      	addeq	r2, r2, r1
 800399c:	6022      	streq	r2, [r4, #0]
 800399e:	6063      	str	r3, [r4, #4]
 80039a0:	6004      	str	r4, [r0, #0]
 80039a2:	e7ed      	b.n	8003980 <_free_r+0x24>
 80039a4:	461a      	mov	r2, r3
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	b10b      	cbz	r3, 80039ae <_free_r+0x52>
 80039aa:	42a3      	cmp	r3, r4
 80039ac:	d9fa      	bls.n	80039a4 <_free_r+0x48>
 80039ae:	6811      	ldr	r1, [r2, #0]
 80039b0:	1850      	adds	r0, r2, r1
 80039b2:	42a0      	cmp	r0, r4
 80039b4:	d10b      	bne.n	80039ce <_free_r+0x72>
 80039b6:	6820      	ldr	r0, [r4, #0]
 80039b8:	4401      	add	r1, r0
 80039ba:	1850      	adds	r0, r2, r1
 80039bc:	4283      	cmp	r3, r0
 80039be:	6011      	str	r1, [r2, #0]
 80039c0:	d1de      	bne.n	8003980 <_free_r+0x24>
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4401      	add	r1, r0
 80039c8:	6011      	str	r1, [r2, #0]
 80039ca:	6053      	str	r3, [r2, #4]
 80039cc:	e7d8      	b.n	8003980 <_free_r+0x24>
 80039ce:	d902      	bls.n	80039d6 <_free_r+0x7a>
 80039d0:	230c      	movs	r3, #12
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	e7d4      	b.n	8003980 <_free_r+0x24>
 80039d6:	6820      	ldr	r0, [r4, #0]
 80039d8:	1821      	adds	r1, r4, r0
 80039da:	428b      	cmp	r3, r1
 80039dc:	bf01      	itttt	eq
 80039de:	6819      	ldreq	r1, [r3, #0]
 80039e0:	685b      	ldreq	r3, [r3, #4]
 80039e2:	1809      	addeq	r1, r1, r0
 80039e4:	6021      	streq	r1, [r4, #0]
 80039e6:	6063      	str	r3, [r4, #4]
 80039e8:	6054      	str	r4, [r2, #4]
 80039ea:	e7c9      	b.n	8003980 <_free_r+0x24>
 80039ec:	bd38      	pop	{r3, r4, r5, pc}
 80039ee:	bf00      	nop
 80039f0:	200000a4 	.word	0x200000a4

080039f4 <_malloc_r>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	1ccd      	adds	r5, r1, #3
 80039f8:	f025 0503 	bic.w	r5, r5, #3
 80039fc:	3508      	adds	r5, #8
 80039fe:	2d0c      	cmp	r5, #12
 8003a00:	bf38      	it	cc
 8003a02:	250c      	movcc	r5, #12
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	4606      	mov	r6, r0
 8003a08:	db01      	blt.n	8003a0e <_malloc_r+0x1a>
 8003a0a:	42a9      	cmp	r1, r5
 8003a0c:	d903      	bls.n	8003a16 <_malloc_r+0x22>
 8003a0e:	230c      	movs	r3, #12
 8003a10:	6033      	str	r3, [r6, #0]
 8003a12:	2000      	movs	r0, #0
 8003a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a16:	f000 f87d 	bl	8003b14 <__malloc_lock>
 8003a1a:	4921      	ldr	r1, [pc, #132]	; (8003aa0 <_malloc_r+0xac>)
 8003a1c:	680a      	ldr	r2, [r1, #0]
 8003a1e:	4614      	mov	r4, r2
 8003a20:	b99c      	cbnz	r4, 8003a4a <_malloc_r+0x56>
 8003a22:	4f20      	ldr	r7, [pc, #128]	; (8003aa4 <_malloc_r+0xb0>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b923      	cbnz	r3, 8003a32 <_malloc_r+0x3e>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	f000 f862 	bl	8003af4 <_sbrk_r>
 8003a30:	6038      	str	r0, [r7, #0]
 8003a32:	4629      	mov	r1, r5
 8003a34:	4630      	mov	r0, r6
 8003a36:	f000 f85d 	bl	8003af4 <_sbrk_r>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	d123      	bne.n	8003a86 <_malloc_r+0x92>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	4630      	mov	r0, r6
 8003a42:	6033      	str	r3, [r6, #0]
 8003a44:	f000 f86c 	bl	8003b20 <__malloc_unlock>
 8003a48:	e7e3      	b.n	8003a12 <_malloc_r+0x1e>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	1b5b      	subs	r3, r3, r5
 8003a4e:	d417      	bmi.n	8003a80 <_malloc_r+0x8c>
 8003a50:	2b0b      	cmp	r3, #11
 8003a52:	d903      	bls.n	8003a5c <_malloc_r+0x68>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	441c      	add	r4, r3
 8003a58:	6025      	str	r5, [r4, #0]
 8003a5a:	e004      	b.n	8003a66 <_malloc_r+0x72>
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	42a2      	cmp	r2, r4
 8003a60:	bf0c      	ite	eq
 8003a62:	600b      	streq	r3, [r1, #0]
 8003a64:	6053      	strne	r3, [r2, #4]
 8003a66:	4630      	mov	r0, r6
 8003a68:	f000 f85a 	bl	8003b20 <__malloc_unlock>
 8003a6c:	f104 000b 	add.w	r0, r4, #11
 8003a70:	1d23      	adds	r3, r4, #4
 8003a72:	f020 0007 	bic.w	r0, r0, #7
 8003a76:	1ac2      	subs	r2, r0, r3
 8003a78:	d0cc      	beq.n	8003a14 <_malloc_r+0x20>
 8003a7a:	1a1b      	subs	r3, r3, r0
 8003a7c:	50a3      	str	r3, [r4, r2]
 8003a7e:	e7c9      	b.n	8003a14 <_malloc_r+0x20>
 8003a80:	4622      	mov	r2, r4
 8003a82:	6864      	ldr	r4, [r4, #4]
 8003a84:	e7cc      	b.n	8003a20 <_malloc_r+0x2c>
 8003a86:	1cc4      	adds	r4, r0, #3
 8003a88:	f024 0403 	bic.w	r4, r4, #3
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d0e3      	beq.n	8003a58 <_malloc_r+0x64>
 8003a90:	1a21      	subs	r1, r4, r0
 8003a92:	4630      	mov	r0, r6
 8003a94:	f000 f82e 	bl	8003af4 <_sbrk_r>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d1dd      	bne.n	8003a58 <_malloc_r+0x64>
 8003a9c:	e7cf      	b.n	8003a3e <_malloc_r+0x4a>
 8003a9e:	bf00      	nop
 8003aa0:	200000a4 	.word	0x200000a4
 8003aa4:	200000a8 	.word	0x200000a8

08003aa8 <_realloc_r>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	4607      	mov	r7, r0
 8003aac:	4614      	mov	r4, r2
 8003aae:	460e      	mov	r6, r1
 8003ab0:	b921      	cbnz	r1, 8003abc <_realloc_r+0x14>
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ab8:	f7ff bf9c 	b.w	80039f4 <_malloc_r>
 8003abc:	b922      	cbnz	r2, 8003ac8 <_realloc_r+0x20>
 8003abe:	f7ff ff4d 	bl	800395c <_free_r>
 8003ac2:	4625      	mov	r5, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac8:	f000 f830 	bl	8003b2c <_malloc_usable_size_r>
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d20f      	bcs.n	8003af0 <_realloc_r+0x48>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	f7ff ff8e 	bl	80039f4 <_malloc_r>
 8003ad8:	4605      	mov	r5, r0
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d0f2      	beq.n	8003ac4 <_realloc_r+0x1c>
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	f7ff ff13 	bl	800390c <memcpy>
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4638      	mov	r0, r7
 8003aea:	f7ff ff37 	bl	800395c <_free_r>
 8003aee:	e7e9      	b.n	8003ac4 <_realloc_r+0x1c>
 8003af0:	4635      	mov	r5, r6
 8003af2:	e7e7      	b.n	8003ac4 <_realloc_r+0x1c>

08003af4 <_sbrk_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	2300      	movs	r3, #0
 8003af8:	4d05      	ldr	r5, [pc, #20]	; (8003b10 <_sbrk_r+0x1c>)
 8003afa:	4604      	mov	r4, r0
 8003afc:	4608      	mov	r0, r1
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	f7ff fb5a 	bl	80031b8 <_sbrk>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_sbrk_r+0x1a>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_sbrk_r+0x1a>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	200003f4 	.word	0x200003f4

08003b14 <__malloc_lock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <__malloc_lock+0x8>)
 8003b16:	f000 b811 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	200003fc 	.word	0x200003fc

08003b20 <__malloc_unlock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__malloc_unlock+0x8>)
 8003b22:	f000 b80c 	b.w	8003b3e <__retarget_lock_release_recursive>
 8003b26:	bf00      	nop
 8003b28:	200003fc 	.word	0x200003fc

08003b2c <_malloc_usable_size_r>:
 8003b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b30:	1f18      	subs	r0, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bfbc      	itt	lt
 8003b36:	580b      	ldrlt	r3, [r1, r0]
 8003b38:	18c0      	addlt	r0, r0, r3
 8003b3a:	4770      	bx	lr

08003b3c <__retarget_lock_acquire_recursive>:
 8003b3c:	4770      	bx	lr

08003b3e <__retarget_lock_release_recursive>:
 8003b3e:	4770      	bx	lr

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
