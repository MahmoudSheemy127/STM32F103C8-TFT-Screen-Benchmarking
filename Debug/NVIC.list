
NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f1c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800104c  0800104c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800104c  0800104c  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  0800104c  0800104c  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800104c  0800104c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800104c  0800104c  0001104c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001050  08001050  00011050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000008  0800105c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  0800105c  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002670  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000076d  00000000  00000000  000226a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  00022e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e8  00000000  00000000  00023060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001569  00000000  00000000  00023248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000145a  00000000  00000000  000247b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000661b  00000000  00000000  00025c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002c226  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000794  00000000  00000000  0002c27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08001034 	.word	0x08001034

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08001034 	.word	0x08001034

08000170 <NVIC_SetEnableInterrupt>:
 * @brief Enable interrupt for a given irq
 * 
 * @param copy_enumIRQ irq number for interrupt 
 */
void NVIC_SetEnableInterrupt(NVIC_IRQ copy_enumIRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
    NVIC->ISER[(copy_enumIRQ >> 5)] |= (1 << (copy_enumIRQ & 0x1F));
 800017a:	4a0d      	ldr	r2, [pc, #52]	; (80001b0 <NVIC_SetEnableInterrupt+0x40>)
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	115b      	asrs	r3, r3, #5
 8000182:	b25b      	sxtb	r3, r3
 8000184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000188:	79fa      	ldrb	r2, [r7, #7]
 800018a:	f002 021f 	and.w	r2, r2, #31
 800018e:	2101      	movs	r1, #1
 8000190:	fa01 f202 	lsl.w	r2, r1, r2
 8000194:	4610      	mov	r0, r2
 8000196:	4906      	ldr	r1, [pc, #24]	; (80001b0 <NVIC_SetEnableInterrupt+0x40>)
 8000198:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800019c:	1152      	asrs	r2, r2, #5
 800019e:	b252      	sxtb	r2, r2
 80001a0:	4303      	orrs	r3, r0
 80001a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	e000e100 	.word	0xe000e100

080001b4 <SYSTICK_Init>:

#include "CortexM3/SYSTICK_M3.h"


void SYSTICK_Init()
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	/* Disable SYSTICK */
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
 80001b8:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <SYSTICK_Init+0x30>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a09      	ldr	r2, [pc, #36]	; (80001e4 <SYSTICK_Init+0x30>)
 80001be:	f023 0301 	bic.w	r3, r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
	/* Enable Interrupt*/
	SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_TICKINT_BIT_POS);
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <SYSTICK_Init+0x30>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <SYSTICK_Init+0x30>)
 80001ca:	f043 0302 	orr.w	r3, r3, #2
 80001ce:	6013      	str	r3, [r2, #0]
	/* Set Prescaler of the Systick*/
	if(SYSTICK_CLK_SRC_PRESCALER == SYSTICK_CLK_SRC_PRESCALER_1)
	{
		SET_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_CLKSOURCE_BIT_POS);
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <SYSTICK_Init+0x30>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <SYSTICK_Init+0x30>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6013      	str	r3, [r2, #0]
	}	
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e010 	.word	0xe000e010

080001e8 <SysTick_Handler>:
	CLR_BIT(SYSTICK->SYSCSR,SYSTICK_CONTROL_STATUS_REGISTER_ENABLE_BIT_POS);
}


void SysTick_Handler()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	if(SYSTICK_OverflowCounter < SYSTICK_NumOfOverflows)
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <SysTick_Handler+0x2c>)
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b09      	ldr	r3, [pc, #36]	; (8000218 <SysTick_Handler+0x30>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d205      	bcs.n	8000204 <SysTick_Handler+0x1c>
	{
		SYSTICK_OverflowCounter++;
 80001f8:	4b06      	ldr	r3, [pc, #24]	; (8000214 <SysTick_Handler+0x2c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3301      	adds	r3, #1
 80001fe:	4a05      	ldr	r2, [pc, #20]	; (8000214 <SysTick_Handler+0x2c>)
 8000200:	6013      	str	r3, [r2, #0]
	else
	{
		SYSTICK_OverflowCounter = 0;
		SYSTICK_CallBackFunction();
	}
 8000202:	e005      	b.n	8000210 <SysTick_Handler+0x28>
		SYSTICK_OverflowCounter = 0;
 8000204:	4b03      	ldr	r3, [pc, #12]	; (8000214 <SysTick_Handler+0x2c>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
		SYSTICK_CallBackFunction();
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <SysTick_Handler+0x34>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4798      	blx	r3
 8000210:	bf00      	nop
 8000212:	bd80      	pop	{r7, pc}
 8000214:	20000024 	.word	0x20000024
 8000218:	2000002c 	.word	0x2000002c
 800021c:	20000028 	.word	0x20000028

08000220 <DMA_Init>:
 *   copy_dmaHandle: Pointer to the DMA handle structure containing the configuration.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if initialization is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Init(DMA_HandleTypeDef *copy_dmaHandle){
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]

    HAL_Status hal_Status = HAL_OKAY;
 8000228:	2300      	movs	r3, #0
 800022a:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_dmaHandle)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d102      	bne.n	8000238 <DMA_Init+0x18>
    {
        hal_Status = HAL_ERROR;
 8000232:	2301      	movs	r3, #1
 8000234:	73fb      	strb	r3, [r7, #15]
 8000236:	e09d      	b.n	8000374 <DMA_Init+0x154>
    }
    else
    {
    switch(copy_dmaHandle->dma_Direction)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	795b      	ldrb	r3, [r3, #5]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d002      	beq.n	8000246 <DMA_Init+0x26>
 8000240:	2b01      	cmp	r3, #1
 8000242:	d009      	beq.n	8000258 <DMA_Init+0x38>
 8000244:	e015      	b.n	8000272 <DMA_Init+0x52>
    {
        case DMA_READ_FROM_PERIPHERAL:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f022 0210 	bic.w	r2, r2, #16
 8000254:	601a      	str	r2, [r3, #0]
            break;
 8000256:	e00c      	b.n	8000272 <DMA_Init+0x52>
        case DMA_READ_FROM_MEMORY:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f042 0210 	orr.w	r2, r2, #16
 8000266:	601a      	str	r2, [r3, #0]
            copy_dmaHandle->dma_TypeDef->CCR = 1<<4;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2210      	movs	r2, #16
 800026e:	601a      	str	r2, [r3, #0]
            break;
 8000270:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mem2Mem)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	7a1b      	ldrb	r3, [r3, #8]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d002      	beq.n	8000280 <DMA_Init+0x60>
 800027a:	2b01      	cmp	r3, #1
 800027c:	d009      	beq.n	8000292 <DMA_Init+0x72>
 800027e:	e011      	b.n	80002a4 <DMA_Init+0x84>
    {
        case DMA_MEM2MEM_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800028e:	601a      	str	r2, [r3, #0]
            break;
 8000290:	e008      	b.n	80002a4 <DMA_Init+0x84>
        case DMA_MEM2MEM_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	681a      	ldr	r2, [r3, #0]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80002a0:	601a      	str	r2, [r3, #0]
            break;
 80002a2:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mode)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	791b      	ldrb	r3, [r3, #4]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00e      	beq.n	80002ca <DMA_Init+0xaa>
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	d116      	bne.n	80002de <DMA_Init+0xbe>
    {
        case DMA_NON_CIRCULAR_MODE:
            if(copy_dmaHandle->dma_Mem2Mem != DMA_MEM2MEM_ENABLE )
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	7a1b      	ldrb	r3, [r3, #8]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d011      	beq.n	80002dc <DMA_Init+0xbc>
            {
                CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f022 0220 	bic.w	r2, r2, #32
 80002c6:	601a      	str	r2, [r3, #0]

            }
            break;
 80002c8:	e008      	b.n	80002dc <DMA_Init+0xbc>
        case DMA_CIRCULAR_MODE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f042 0220 	orr.w	r2, r2, #32
 80002d8:	601a      	str	r2, [r3, #0]
            break;
 80002da:	e000      	b.n	80002de <DMA_Init+0xbe>
            break;
 80002dc:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_MemIncMode)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7a5b      	ldrb	r3, [r3, #9]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <DMA_Init+0xcc>
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d009      	beq.n	80002fe <DMA_Init+0xde>
 80002ea:	e011      	b.n	8000310 <DMA_Init+0xf0>
    {
        case DMA_MEM_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80002fa:	601a      	str	r2, [r3, #0]
            break;
 80002fc:	e008      	b.n	8000310 <DMA_Init+0xf0>
        case DMA_MEM_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800030c:	601a      	str	r2, [r3, #0]
            break;
 800030e:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_PeriphIncMode)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	7a9b      	ldrb	r3, [r3, #10]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d002      	beq.n	800031e <DMA_Init+0xfe>
 8000318:	2b01      	cmp	r3, #1
 800031a:	d009      	beq.n	8000330 <DMA_Init+0x110>
 800031c:	e011      	b.n	8000342 <DMA_Init+0x122>
    {
        case DMA_PERIPH_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800032c:	601a      	str	r2, [r3, #0]
            break;
 800032e:	e008      	b.n	8000342 <DMA_Init+0x122>
        case DMA_PERIPH_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800033e:	601a      	str	r2, [r3, #0]
            break;
 8000340:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Interrupt)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	7adb      	ldrb	r3, [r3, #11]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d002      	beq.n	8000350 <DMA_Init+0x130>
 800034a:	2b01      	cmp	r3, #1
 800034c:	d009      	beq.n	8000362 <DMA_Init+0x142>
 800034e:	e011      	b.n	8000374 <DMA_Init+0x154>
    {
        case DMA_INTERRUPT_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	681a      	ldr	r2, [r3, #0]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f042 0202 	orr.w	r2, r2, #2
 800035e:	601a      	str	r2, [r3, #0]
            break;
 8000360:	e008      	b.n	8000374 <DMA_Init+0x154>
        case DMA_INTERRUPT_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	f022 0202 	bic.w	r2, r2, #2
 8000370:	601a      	str	r2, [r3, #0]
            break;
 8000372:	bf00      	nop
    }
    }
    return hal_Status;
 8000374:	7bfb      	ldrb	r3, [r7, #15]
}
 8000376:	4618      	mov	r0, r3
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <DMA_SetPeriphAddress>:
 *   copy_u32PeriphAddress: Pointer to the peripheral address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetPeriphAddress(DMA_HandleTypeDef *copy_dmaHandle,uint8_t *copy_u32PeriphAddress){
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 800038a:	2300      	movs	r3, #0
 800038c:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32PeriphAddress || NULL == copy_dmaHandle )
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d002      	beq.n	800039a <DMA_SetPeriphAddress+0x1a>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d102      	bne.n	80003a0 <DMA_SetPeriphAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 800039a:	2301      	movs	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	e003      	b.n	80003a8 <DMA_SetPeriphAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CPAR = copy_u32PeriphAddress;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	609a      	str	r2, [r3, #8]
    }
    return hal_Status;
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr

080003b4 <DMA_SetMemoryAddress>:
 *   copy_u32MemAddress: Pointer to the memory address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetMemoryAddress(DMA_HandleTypeDef *copy_dmaHandle ,uint8_t *copy_u32MemAddress){
 80003b4:	b480      	push	{r7}
 80003b6:	b085      	sub	sp, #20
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80003be:	2300      	movs	r3, #0
 80003c0:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32MemAddress || NULL == copy_dmaHandle )
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d002      	beq.n	80003ce <DMA_SetMemoryAddress+0x1a>
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d102      	bne.n	80003d4 <DMA_SetMemoryAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 80003ce:	2301      	movs	r3, #1
 80003d0:	73fb      	strb	r3, [r7, #15]
 80003d2:	e003      	b.n	80003dc <DMA_SetMemoryAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CMAR = copy_u32MemAddress;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	683a      	ldr	r2, [r7, #0]
 80003da:	60da      	str	r2, [r3, #12]
    }
    return hal_Status;
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <DMA_Start>:
 *   hdma: Pointer to the DMA handle structure.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if starting the transfer is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Start(DMA_HandleTypeDef *hdma){
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d102      	bne.n	8000400 <DMA_Start+0x18>
    {
        hal_Status = HAL_ERROR;
 80003fa:	2301      	movs	r3, #1
 80003fc:	73fb      	strb	r3, [r7, #15]
 80003fe:	e007      	b.n	8000410 <DMA_Start+0x28>
    }
    else
    {
        SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	681a      	ldr	r2, [r3, #0]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f042 0201 	orr.w	r2, r2, #1
 800040e:	601a      	str	r2, [r3, #0]
    }
    return hal_Status;
 8000410:	7bfb      	ldrb	r3, [r7, #15]
}
 8000412:	4618      	mov	r0, r3
 8000414:	3714      	adds	r7, #20
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr

0800041c <DMA_SetDataCounter>:
 * @param copy_u32DataLength: The number of data items to be transferred by the DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_SetDataCounter(DMA_HandleTypeDef *hdma, uint32_t copy_u32DataLength)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d102      	bne.n	8000436 <DMA_SetDataCounter+0x1a>
    {
        hal_Status = HAL_ERROR;
 8000430:	2301      	movs	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	e003      	b.n	800043e <DMA_SetDataCounter+0x22>
    }
    else
    {
        hdma->dma_TypeDef->CNTDR = copy_u32DataLength;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	605a      	str	r2, [r3, #4]
        // SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
    }
    return hal_Status;
 800043e:	7bfb      	ldrb	r3, [r7, #15]

}
 8000440:	4618      	mov	r0, r3
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
	...

0800044c <DMA1_Channel1_IRQHandler>:
    return hal_Status;
}


void DMA1_Channel1_IRQHandler()
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    DMA1_1_CallbackFnPtr();
 8000450:	4b02      	ldr	r3, [pc, #8]	; (800045c <DMA1_Channel1_IRQHandler+0x10>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4798      	blx	r3
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000030 	.word	0x20000030

08000460 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler()
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
    DMA1_2_CallbackFnPtr();
 8000464:	4b02      	ldr	r3, [pc, #8]	; (8000470 <DMA1_Channel2_IRQHandler+0x10>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4798      	blx	r3
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	2000003c 	.word	0x2000003c

08000474 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 8000478:	4b02      	ldr	r3, [pc, #8]	; (8000484 <DMA1_Channel3_IRQHandler+0x10>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4798      	blx	r3
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000034 	.word	0x20000034

08000488 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler()
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 800048c:	4b02      	ldr	r3, [pc, #8]	; (8000498 <DMA1_Channel4_IRQHandler+0x10>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4798      	blx	r3
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000034 	.word	0x20000034

0800049c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler()
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler()
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler()
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler()
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler()
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <GPIO_Init>:
 */

#include "Drivers/GPIO/GPIO.h"

HAL_Status GPIO_Init(GPIO_HandleTypeDef* gpio_handle)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
    if(NULL == gpio_handle)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d102      	bne.n	80004fc <GPIO_Init+0x18>
    {
        status = HAL_ERROR;
 80004f6:	2301      	movs	r3, #1
 80004f8:	73fb      	strb	r3, [r7, #15]
 80004fa:	e20e      	b.n	800091a <GPIO_Init+0x436>
    }
    else
    {
        /* Check if pin number is less than 8 */
        if(gpio_handle->GPIO_Pin < GPIO_PIN_8)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	2b07      	cmp	r3, #7
 8000502:	f200 80fd 	bhi.w	8000700 <GPIO_Init+0x21c>
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	795b      	ldrb	r3, [r3, #5]
 800050a:	2b03      	cmp	r3, #3
 800050c:	d876      	bhi.n	80005fc <GPIO_Init+0x118>
 800050e:	a201      	add	r2, pc, #4	; (adr r2, 8000514 <GPIO_Init+0x30>)
 8000510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000514:	08000525 	.word	0x08000525
 8000518:	0800055b 	.word	0x0800055b
 800051c:	08000591 	.word	0x08000591
 8000520:	080005c7 	.word	0x080005c7
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	6819      	ldr	r1, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	220f      	movs	r2, #15
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43da      	mvns	r2, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	400a      	ands	r2, r1
 800053e:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x04UL << (gpio_handle->GPIO_Pin * 4));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	6819      	ldr	r1, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	2204      	movs	r2, #4
 800054e:	409a      	lsls	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	430a      	orrs	r2, r1
 8000556:	601a      	str	r2, [r3, #0]
                    break;
 8000558:	e053      	b.n	8000602 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	220f      	movs	r2, #15
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	43da      	mvns	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	400a      	ands	r2, r1
 8000574:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4));
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6819      	ldr	r1, [r3, #0]
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	2201      	movs	r2, #1
 8000584:	409a      	lsls	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]
                    break;
 800058e:	e038      	b.n	8000602 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6819      	ldr	r1, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	220f      	movs	r2, #15
 800059e:	fa02 f303 	lsl.w	r3, r2, r3
 80005a2:	43da      	mvns	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	400a      	ands	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	6819      	ldr	r1, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	2202      	movs	r2, #2
 80005ba:	409a      	lsls	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	430a      	orrs	r2, r1
 80005c2:	601a      	str	r2, [r3, #0]
                    break;
 80005c4:	e01d      	b.n	8000602 <GPIO_Init+0x11e>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x0FUL << (gpio_handle->GPIO_Pin * 4));
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	6819      	ldr	r1, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	220f      	movs	r2, #15
 80005d4:	fa02 f303 	lsl.w	r3, r2, r3
 80005d8:	43da      	mvns	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	400a      	ands	r2, r1
 80005e0:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	6819      	ldr	r1, [r3, #0]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	2203      	movs	r2, #3
 80005f0:	409a      	lsls	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	601a      	str	r2, [r3, #0]
                    break;
 80005fa:	e002      	b.n	8000602 <GPIO_Init+0x11e>
                default:
                    status = HAL_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]
                    break;
 8000600:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	799b      	ldrb	r3, [r3, #6]
 8000606:	2b06      	cmp	r3, #6
 8000608:	d877      	bhi.n	80006fa <GPIO_Init+0x216>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <GPIO_Init+0x12c>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	0800062d 	.word	0x0800062d
 8000614:	0800064d 	.word	0x0800064d
 8000618:	08000687 	.word	0x08000687
 800061c:	0800062d 	.word	0x0800062d
 8000620:	0800064d 	.word	0x0800064d
 8000624:	08000687 	.word	0x08000687
 8000628:	080006c1 	.word	0x080006c1
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6819      	ldr	r1, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	3302      	adds	r3, #2
 800063a:	2203      	movs	r2, #3
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	43da      	mvns	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	400a      	ands	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
                    break;
 800064a:	e166      	b.n	800091a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	6819      	ldr	r1, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	3302      	adds	r3, #2
 800065a:	2203      	movs	r2, #3
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	43da      	mvns	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x01UL << (gpio_handle->GPIO_Pin * 4 + 2));
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	6819      	ldr	r1, [r3, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	3302      	adds	r3, #2
 8000678:	2201      	movs	r2, #1
 800067a:	409a      	lsls	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	430a      	orrs	r2, r1
 8000682:	601a      	str	r2, [r3, #0]
                    break;
 8000684:	e149      	b.n	800091a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	6819      	ldr	r1, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	3302      	adds	r3, #2
 8000694:	2203      	movs	r2, #3
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	43da      	mvns	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	400a      	ands	r2, r1
 80006a2:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x02UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	3302      	adds	r3, #2
 80006b2:	2202      	movs	r2, #2
 80006b4:	409a      	lsls	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	430a      	orrs	r2, r1
 80006bc:	601a      	str	r2, [r3, #0]
                    break;
 80006be:	e12c      	b.n	800091a <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRL &= ~(0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	6819      	ldr	r1, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	3302      	adds	r3, #2
 80006ce:	2203      	movs	r2, #3
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	43da      	mvns	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	400a      	ands	r2, r1
 80006dc:	601a      	str	r2, [r3, #0]
                    gpio_handle->GPIO_TypeDef->CRL |= (0x03UL << (gpio_handle->GPIO_Pin * 4 + 2));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	3302      	adds	r3, #2
 80006ec:	2203      	movs	r2, #3
 80006ee:	409a      	lsls	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	601a      	str	r2, [r3, #0]
                    break;
 80006f8:	e10f      	b.n	800091a <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
                    break;
 80006fe:	e10c      	b.n	800091a <GPIO_Init+0x436>
            }
        }
        else
        {
            /* Check Mode */
            switch(gpio_handle->GPIO_Mode)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	2b03      	cmp	r3, #3
 8000706:	d87f      	bhi.n	8000808 <GPIO_Init+0x324>
 8000708:	a201      	add	r2, pc, #4	; (adr r2, 8000710 <GPIO_Init+0x22c>)
 800070a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800070e:	bf00      	nop
 8000710:	08000721 	.word	0x08000721
 8000714:	0800075b 	.word	0x0800075b
 8000718:	08000795 	.word	0x08000795
 800071c:	080007cf 	.word	0x080007cf
            {
                case GPIO_MODE_INPUT:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6859      	ldr	r1, [r3, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	3b08      	subs	r3, #8
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	220f      	movs	r2, #15
 8000730:	fa02 f303 	lsl.w	r3, r2, r3
 8000734:	43da      	mvns	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	400a      	ands	r2, r1
 800073c:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x04UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6859      	ldr	r1, [r3, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	3b08      	subs	r3, #8
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	2204      	movs	r2, #4
 800074e:	409a      	lsls	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	430a      	orrs	r2, r1
 8000756:	605a      	str	r2, [r3, #4]
                    break;
 8000758:	e059      	b.n	800080e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_10MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6859      	ldr	r1, [r3, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	3b08      	subs	r3, #8
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	220f      	movs	r2, #15
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43da      	mvns	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	400a      	ands	r2, r1
 8000776:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6859      	ldr	r1, [r3, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	3b08      	subs	r3, #8
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	2201      	movs	r2, #1
 8000788:	409a      	lsls	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	430a      	orrs	r2, r1
 8000790:	605a      	str	r2, [r3, #4]
                    break;
 8000792:	e03c      	b.n	800080e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_2MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	6859      	ldr	r1, [r3, #4]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	791b      	ldrb	r3, [r3, #4]
 800079e:	3b08      	subs	r3, #8
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	220f      	movs	r2, #15
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	43da      	mvns	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	400a      	ands	r2, r1
 80007b0:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6859      	ldr	r1, [r3, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	3b08      	subs	r3, #8
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	2202      	movs	r2, #2
 80007c2:	409a      	lsls	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	430a      	orrs	r2, r1
 80007ca:	605a      	str	r2, [r3, #4]
                    break;
 80007cc:	e01f      	b.n	800080e <GPIO_Init+0x32a>
                case GPIO_MODE_OUTPUT_50MHZ:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x0FUL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6859      	ldr	r1, [r3, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	3b08      	subs	r3, #8
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	220f      	movs	r2, #15
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	400a      	ands	r2, r1
 80007ea:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4));
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6859      	ldr	r1, [r3, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	791b      	ldrb	r3, [r3, #4]
 80007f6:	3b08      	subs	r3, #8
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	2203      	movs	r2, #3
 80007fc:	409a      	lsls	r2, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	430a      	orrs	r2, r1
 8000804:	605a      	str	r2, [r3, #4]
                    break;
 8000806:	e002      	b.n	800080e <GPIO_Init+0x32a>
                default:
                    status = HAL_ERROR;
 8000808:	2301      	movs	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
                    break;
 800080c:	bf00      	nop
            }
            /* Check Configuration */
            switch(gpio_handle->GPIO_CNF)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	799b      	ldrb	r3, [r3, #6]
 8000812:	2b06      	cmp	r3, #6
 8000814:	d87e      	bhi.n	8000914 <GPIO_Init+0x430>
 8000816:	a201      	add	r2, pc, #4	; (adr r2, 800081c <GPIO_Init+0x338>)
 8000818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081c:	08000839 	.word	0x08000839
 8000820:	0800085b 	.word	0x0800085b
 8000824:	08000899 	.word	0x08000899
 8000828:	08000839 	.word	0x08000839
 800082c:	0800085b 	.word	0x0800085b
 8000830:	08000899 	.word	0x08000899
 8000834:	080008d7 	.word	0x080008d7
            {
                case GPIO_CNF_INPUT_ANALOG:
                case GPIO_CNF_OUTPUT_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6859      	ldr	r1, [r3, #4]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	3b08      	subs	r3, #8
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	3302      	adds	r3, #2
 8000848:	2203      	movs	r2, #3
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43da      	mvns	r2, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	400a      	ands	r2, r1
 8000856:	605a      	str	r2, [r3, #4]
                    break;
 8000858:	e05f      	b.n	800091a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_FLOATING:
                case GPIO_CNF_OUTPUT_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	6859      	ldr	r1, [r3, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	791b      	ldrb	r3, [r3, #4]
 8000864:	3b08      	subs	r3, #8
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	3302      	adds	r3, #2
 800086a:	2203      	movs	r2, #3
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	43da      	mvns	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	400a      	ands	r2, r1
 8000878:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x01UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6859      	ldr	r1, [r3, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	3b08      	subs	r3, #8
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	3302      	adds	r3, #2
 800088a:	2201      	movs	r2, #1
 800088c:	409a      	lsls	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	430a      	orrs	r2, r1
 8000894:	605a      	str	r2, [r3, #4]
                    break;
 8000896:	e040      	b.n	800091a <GPIO_Init+0x436>
                case GPIO_CNF_INPUT_PULL:
                case GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6859      	ldr	r1, [r3, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	791b      	ldrb	r3, [r3, #4]
 80008a2:	3b08      	subs	r3, #8
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	3302      	adds	r3, #2
 80008a8:	2203      	movs	r2, #3
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43da      	mvns	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	400a      	ands	r2, r1
 80008b6:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x02UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6859      	ldr	r1, [r3, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	791b      	ldrb	r3, [r3, #4]
 80008c2:	3b08      	subs	r3, #8
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	3302      	adds	r3, #2
 80008c8:	2202      	movs	r2, #2
 80008ca:	409a      	lsls	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	605a      	str	r2, [r3, #4]
                    break;
 80008d4:	e021      	b.n	800091a <GPIO_Init+0x436>
                case GPIO_CNF_OUTPUT_ALTFN_OPEN_DRAIN:
                    gpio_handle->GPIO_TypeDef->CRH &= ~(0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	791b      	ldrb	r3, [r3, #4]
 80008e0:	3b08      	subs	r3, #8
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	3302      	adds	r3, #2
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43da      	mvns	r2, r3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	400a      	ands	r2, r1
 80008f4:	605a      	str	r2, [r3, #4]
                    gpio_handle->GPIO_TypeDef->CRH |= (0x03UL << ((gpio_handle->GPIO_Pin - GPIO_PIN_8) * 4 + 2));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	6859      	ldr	r1, [r3, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	3b08      	subs	r3, #8
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	3302      	adds	r3, #2
 8000906:	2203      	movs	r2, #3
 8000908:	409a      	lsls	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	430a      	orrs	r2, r1
 8000910:	605a      	str	r2, [r3, #4]
                    break;
 8000912:	e002      	b.n	800091a <GPIO_Init+0x436>
                default:
                    status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
                    break;
 8000918:	bf00      	nop
        }

    }    
    }
    return status;
 800091a:	7bfb      	ldrb	r3, [r7, #15]

}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <SPI_Init>:
#include "Drivers/DMA/DMA.h"
#include "Drivers/SPI/SPI.h"


HAL_Status SPI_Init(SPI_HandleTypeDef* hspi)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]

    if(NULL == hspi)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <SPI_Init+0x18>
    {
        status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e140      	b.n	8000bc2 <SPI_Init+0x29a>
    }
    else
    {
        
        /* Set SPI Slave Select */
        if(hspi->NSS == SPI_NSS_HARD)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7d1b      	ldrb	r3, [r3, #20]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d108      	bne.n	800095a <SPI_Init+0x32>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	e023      	b.n	80009a2 <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_SOFT)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7d1b      	ldrb	r3, [r3, #20]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d108      	bne.n	8000974 <SPI_Init+0x4c>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	e016      	b.n	80009a2 <SPI_Init+0x7a>
        }
        else if(hspi->NSS == SPI_NSS_DISABLE)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7d1b      	ldrb	r3, [r3, #20]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d110      	bne.n	800099e <SPI_Init+0x76>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800098a:	601a      	str	r2, [r3, #0]
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e001      	b.n	80009a2 <SPI_Init+0x7a>
        }
        else
        {
            status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI mode */
        if(hspi->Mode == SPI_MODE_MASTER)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d108      	bne.n	80009bc <SPI_Init+0x94>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f042 0204 	orr.w	r2, r2, #4
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	e00e      	b.n	80009da <SPI_Init+0xb2>
        }
        else if(hspi->Mode == SPI_MODE_SLAVE)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	791b      	ldrb	r3, [r3, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d108      	bne.n	80009d6 <SPI_Init+0xae>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_MSTR);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f022 0204 	bic.w	r2, r2, #4
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	e001      	b.n	80009da <SPI_Init+0xb2>
        }
        else
        {
            status = HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Data Size */
        if(hspi->DataSize == SPI_DATASIZE_8BIT)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7c5b      	ldrb	r3, [r3, #17]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d108      	bne.n	80009f4 <SPI_Init+0xcc>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e00e      	b.n	8000a12 <SPI_Init+0xea>
        }
        else if(hspi->DataSize == SPI_DATASIZE_16BIT)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7c5b      	ldrb	r3, [r3, #17]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d108      	bne.n	8000a0e <SPI_Init+0xe6>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e001      	b.n	8000a12 <SPI_Init+0xea>
        }
        else
        {
            status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Polarity */
        if(hspi->CPOL == SPI_CPOL_LOW)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	799b      	ldrb	r3, [r3, #6]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d108      	bne.n	8000a2c <SPI_Init+0x104>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f022 0202 	bic.w	r2, r2, #2
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e00e      	b.n	8000a4a <SPI_Init+0x122>
        }
        else if(hspi->CPOL == SPI_CPOL_HIGH)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d108      	bne.n	8000a46 <SPI_Init+0x11e>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPOL);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f042 0202 	orr.w	r2, r2, #2
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	e001      	b.n	8000a4a <SPI_Init+0x122>
        }
        else
        {
           status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	73fb      	strb	r3, [r7, #15]
        }
        /* Set SPI Clock Phase */
        if(hspi->CPHA == SPI_CPHA_1EDGE)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	79db      	ldrb	r3, [r3, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d108      	bne.n	8000a64 <SPI_Init+0x13c>
        {
            CLR_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0201 	bic.w	r2, r2, #1
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	e00e      	b.n	8000a82 <SPI_Init+0x15a>
        }
        else if(hspi->CPHA == SPI_CPHA_2EDGE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	79db      	ldrb	r3, [r3, #7]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d108      	bne.n	8000a7e <SPI_Init+0x156>
        {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CPHA);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 0201 	orr.w	r2, r2, #1
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	e001      	b.n	8000a82 <SPI_Init+0x15a>
        }
        else
        {
            status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
        }

        /*Set TX DMA Option */
        if(hspi->SpiTxDma == SPI_TX_DMA_ENABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7c9b      	ldrb	r3, [r3, #18]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d108      	bne.n	8000a9c <SPI_Init+0x174>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0202 	orr.w	r2, r2, #2
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	e007      	b.n	8000aac <SPI_Init+0x184>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0202 	bic.w	r2, r2, #2
 8000aaa:	605a      	str	r2, [r3, #4]
        }

        /*Set DMA Option */
        if(hspi->SpiRxDma == SPI_RX_DMA_ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7cdb      	ldrb	r3, [r3, #19]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d108      	bne.n	8000ac6 <SPI_Init+0x19e>
        {
            SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0201 	orr.w	r2, r2, #1
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	e007      	b.n	8000ad6 <SPI_Init+0x1ae>
        }
        else
        {
            CLR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f022 0201 	bic.w	r2, r2, #1
 8000ad4:	605a      	str	r2, [r3, #4]
        }



        /* Set SPI Baud Rate */
        switch(hspi->BaudRate)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	795b      	ldrb	r3, [r3, #5]
 8000ada:	2b07      	cmp	r3, #7
 8000adc:	d866      	bhi.n	8000bac <SPI_Init+0x284>
 8000ade:	a201      	add	r2, pc, #4	; (adr r2, 8000ae4 <SPI_Init+0x1bc>)
 8000ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae4:	08000b05 	.word	0x08000b05
 8000ae8:	08000b17 	.word	0x08000b17
 8000aec:	08000b2d 	.word	0x08000b2d
 8000af0:	08000b43 	.word	0x08000b43
 8000af4:	08000b59 	.word	0x08000b59
 8000af8:	08000b6f 	.word	0x08000b6f
 8000afc:	08000b85 	.word	0x08000b85
 8000b00:	08000b9b 	.word	0x08000b9b
        {
            case SPI_BAUDRATE_DIV2:
                // Code for SPI_BAUD_RATE_DIV
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK , SPI_BAUDRATE_DIV2 << SPI_CR1_BR);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000b12:	601a      	str	r2, [r3, #0]
                break;
 8000b14:	e04d      	b.n	8000bb2 <SPI_Init+0x28a>
            // Add more cases for other baud rates
            case SPI_BAUDRATE_DIV4:
                // Code for SPI_BAUDRATE_DIV4
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV4 << SPI_CR1_BR);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f042 0208 	orr.w	r2, r2, #8
 8000b28:	601a      	str	r2, [r3, #0]
                break;
 8000b2a:	e042      	b.n	8000bb2 <SPI_Init+0x28a>
            case SPI_BAUDRATE_DIV8:
                // Code for SPI_BAUDRATE_DIV8
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV8 << SPI_CR1_BR);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 0210 	orr.w	r2, r2, #16
 8000b3e:	601a      	str	r2, [r3, #0]
                break;
 8000b40:	e037      	b.n	8000bb2 <SPI_Init+0x28a>
            case SPI_BAUDRATE_DIV16:
                // Code for SPI_BAUDRATE_DIV16
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV16 << SPI_CR1_BR);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f042 0218 	orr.w	r2, r2, #24
 8000b54:	601a      	str	r2, [r3, #0]
                break;  
 8000b56:	e02c      	b.n	8000bb2 <SPI_Init+0x28a>
            case SPI_BAUDRATE_DIV32:
                // Code for SPI_BAUDRATE_DIV32
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV32 << SPI_CR1_BR);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f042 0220 	orr.w	r2, r2, #32
 8000b6a:	601a      	str	r2, [r3, #0]
                break;
 8000b6c:	e021      	b.n	8000bb2 <SPI_Init+0x28a>
            case SPI_BAUDRATE_DIV64:
                // Code for SPI_BAUDRATE_DIV64
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV64 << SPI_CR1_BR);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8000b80:	601a      	str	r2, [r3, #0]
                break;
 8000b82:	e016      	b.n	8000bb2 <SPI_Init+0x28a>
            case SPI_BAUDRATE_DIV128:
                // Code for SPI_BAUDRATE_DIV128
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV128 << SPI_CR1_BR);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000b96:	601a      	str	r2, [r3, #0]
                break;
 8000b98:	e00b      	b.n	8000bb2 <SPI_Init+0x28a>
            case SPI_BAUDRATE_DIV256:
                // Code for SPI_BAUDRATE_DIV256
                MODIFY_REG(hspi->Instance->CR1, SPI_BR_MSK, SPI_BAUDRATE_DIV256 << SPI_CR1_BR);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8000ba8:	601a      	str	r2, [r3, #0]
                break;
 8000baa:	e002      	b.n	8000bb2 <SPI_Init+0x28a>
            default:
                /*------ Take some action ---- */
                status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
                break;
 8000bb0:	bf00      	nop
        }
        /* Enable SPI */
        SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bc0:	601a      	str	r2, [r3, #0]

    }

    return status;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <SPI_TransmitDMA>:
 * @param pData 
 * @param Size 
 * @return HAL_Status 
 */
HAL_Status SPI_TransmitDMA(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
    if(NULL == hspi)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d102      	bne.n	8000bec <SPI_TransmitDMA+0x1c>
    {
        status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
 8000bea:	e019      	b.n	8000c20 <SPI_TransmitDMA+0x50>
    }
    else
    {
        /* Set the DMA channel memory address */
        DMA_SetMemoryAddress(hspi->txdma, pData);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fbde 	bl	80003b4 <DMA_SetMemoryAddress>

        /* Set the DMA channel peripheral address */
        DMA_SetPeriphAddress(hspi->txdma, &(hspi->Instance->DR));
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	330c      	adds	r3, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	4610      	mov	r0, r2
 8000c06:	f7ff fbbb 	bl	8000380 <DMA_SetPeriphAddress>

        /* Set the DMA channel count */
        DMA_SetDataCounter(hspi->txdma,Size);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fc03 	bl	800041c <DMA_SetDataCounter>

        /* Start sending */
        DMA_Start(hspi->txdma);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fbe4 	bl	80003e8 <DMA_Start>
    }
    return status;
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <SPI_ReceiveDMA>:
 * @param pData 
 * @param Size 
 * @return HAL_Status 
 */
HAL_Status SPI_ReceiveDMA(SPI_HandleTypeDef* hspi, uint8_t* pData, uint32_t Size)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
    HAL_Status status = HAL_OKAY;
 8000c36:	2300      	movs	r3, #0
 8000c38:	75fb      	strb	r3, [r7, #23]
    if(NULL == hspi)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <SPI_ReceiveDMA+0x1c>
    {
        status = HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	75fb      	strb	r3, [r7, #23]
 8000c44:	e019      	b.n	8000c7a <SPI_ReceiveDMA+0x50>
    }
    else
    {
        /* Set the DMA channel memory address */
        DMA_SetMemoryAddress(hspi->rxdma, pData);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fbb1 	bl	80003b4 <DMA_SetMemoryAddress>

        /* Set the DMA channel peripheral address */
        DMA_SetPeriphAddress(hspi->rxdma, &(hspi->Instance->DR));
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	68da      	ldr	r2, [r3, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	330c      	adds	r3, #12
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4610      	mov	r0, r2
 8000c60:	f7ff fb8e 	bl	8000380 <DMA_SetPeriphAddress>

        /* Set the DMA channel count */
        DMA_SetDataCounter(hspi->rxdma,Size);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fbd6 	bl	800041c <DMA_SetDataCounter>

        /* Start receiving */
        DMA_Start(hspi->rxdma);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fbb7 	bl	80003e8 <DMA_Start>
    }
    return status;
 8000c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <main>:
void DMA1_1_CallbackFn();

void HAL_Init();

int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

	HAL_Init();
 8000c88:	f000 f816 	bl	8000cb8 <HAL_Init>
	/* Loop forever */
	NVIC_SetEnableInterrupt(NVIC_IRQ_DMA1_Channel4_IRQHandler);
 8000c8c:	200e      	movs	r0, #14
 8000c8e:	f7ff fa6f 	bl	8000170 <NVIC_SetEnableInterrupt>
	SPI_ReceiveDMA(&spi2, receiveArray,5);
 8000c92:	2205      	movs	r2, #5
 8000c94:	4904      	ldr	r1, [pc, #16]	; (8000ca8 <main+0x24>)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <main+0x28>)
 8000c98:	f7ff ffc7 	bl	8000c2a <SPI_ReceiveDMA>
	SPI_TransmitDMA(&spi1, sendArray, 5);
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	4904      	ldr	r1, [pc, #16]	; (8000cb0 <main+0x2c>)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <main+0x30>)
 8000ca2:	f7ff ff95 	bl	8000bd0 <SPI_TransmitDMA>
	while(1)
 8000ca6:	e7fe      	b.n	8000ca6 <main+0x22>
 8000ca8:	200000a0 	.word	0x200000a0
 8000cac:	20000068 	.word	0x20000068
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	200000d4 	.word	0x200000d4

08000cb8 <HAL_Init>:
	_RCC_GPIOD_ENABLE();

}

void HAL_Init()
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	/* Init Systick */
	SYSTICK_Init();
 8000cbc:	f7ff fa7a 	bl	80001b4 <SYSTICK_Init>
	/* enable RCC clock */
	_RCC_GPIOA_ENABLE();
 8000cc0:	4b9b      	ldr	r3, [pc, #620]	; (8000f30 <HAL_Init+0x278>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a9a      	ldr	r2, [pc, #616]	; (8000f30 <HAL_Init+0x278>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6193      	str	r3, [r2, #24]
	_RCC_GPIOB_ENABLE();
 8000ccc:	4b98      	ldr	r3, [pc, #608]	; (8000f30 <HAL_Init+0x278>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a97      	ldr	r2, [pc, #604]	; (8000f30 <HAL_Init+0x278>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6193      	str	r3, [r2, #24]
	_RCC_SPI1_ENABLE();
 8000cd8:	4b95      	ldr	r3, [pc, #596]	; (8000f30 <HAL_Init+0x278>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a94      	ldr	r2, [pc, #592]	; (8000f30 <HAL_Init+0x278>)
 8000cde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce2:	6193      	str	r3, [r2, #24]
	_RCC_DMA1_ENABLE();
 8000ce4:	4b92      	ldr	r3, [pc, #584]	; (8000f30 <HAL_Init+0x278>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a91      	ldr	r2, [pc, #580]	; (8000f30 <HAL_Init+0x278>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6153      	str	r3, [r2, #20]

	/* Init SPI 1 as master */
	spi1.Instance = SPI1;
 8000cf0:	4b90      	ldr	r3, [pc, #576]	; (8000f34 <HAL_Init+0x27c>)
 8000cf2:	4a91      	ldr	r2, [pc, #580]	; (8000f38 <HAL_Init+0x280>)
 8000cf4:	601a      	str	r2, [r3, #0]
	spi1.Mode = SPI_MODE_MASTER;
 8000cf6:	4b8f      	ldr	r3, [pc, #572]	; (8000f34 <HAL_Init+0x27c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	711a      	strb	r2, [r3, #4]
	spi1.DataSize = SPI_DATASIZE_8BIT;
 8000cfc:	4b8d      	ldr	r3, [pc, #564]	; (8000f34 <HAL_Init+0x27c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	745a      	strb	r2, [r3, #17]
	spi1.CPOL = SPI_CPOL_LOW;
 8000d02:	4b8c      	ldr	r3, [pc, #560]	; (8000f34 <HAL_Init+0x27c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	719a      	strb	r2, [r3, #6]
	spi1.CPHA = SPI_CPHA_1EDGE;
 8000d08:	4b8a      	ldr	r3, [pc, #552]	; (8000f34 <HAL_Init+0x27c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	71da      	strb	r2, [r3, #7]
	spi1.BaudRate = SPI_BAUDRATE_DIV2;
 8000d0e:	4b89      	ldr	r3, [pc, #548]	; (8000f34 <HAL_Init+0x27c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	715a      	strb	r2, [r3, #5]
	spi1.NSS = SPI_NSS_DISABLE;
 8000d14:	4b87      	ldr	r3, [pc, #540]	; (8000f34 <HAL_Init+0x27c>)
 8000d16:	2202      	movs	r2, #2
 8000d18:	751a      	strb	r2, [r3, #20]
	spi1.BiDir = SPI_BIDIR_DISABLE;
 8000d1a:	4b86      	ldr	r3, [pc, #536]	; (8000f34 <HAL_Init+0x27c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	755a      	strb	r2, [r3, #21]
	spi1.CRC = SPI_CRC_DISABLE;
 8000d20:	4b84      	ldr	r3, [pc, #528]	; (8000f34 <HAL_Init+0x27c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	759a      	strb	r2, [r3, #22]
	spi1.FirstBit = SPI_LSB_FIRST;
 8000d26:	4b83      	ldr	r3, [pc, #524]	; (8000f34 <HAL_Init+0x27c>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	741a      	strb	r2, [r3, #16]
	spi1.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 8000d2c:	4b81      	ldr	r3, [pc, #516]	; (8000f34 <HAL_Init+0x27c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	75da      	strb	r2, [r3, #23]
	spi1.CRCDir = SPI_CRC_TX;
 8000d32:	4b80      	ldr	r3, [pc, #512]	; (8000f34 <HAL_Init+0x27c>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	761a      	strb	r2, [r3, #24]
	spi1.SpiTxDma = SPI_TX_DMA_ENABLE;
 8000d38:	4b7e      	ldr	r3, [pc, #504]	; (8000f34 <HAL_Init+0x27c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	749a      	strb	r2, [r3, #18]
	spi1.SpiRxDma = SPI_RX_DMA_DISABLE;
 8000d3e:	4b7d      	ldr	r3, [pc, #500]	; (8000f34 <HAL_Init+0x27c>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	74da      	strb	r2, [r3, #19]


	/* Init MOSI,MISO,SCK,NSS pin configs */
	/* Init MOSI pin */
	mosi1.GPIO_TypeDef = PORT_SPI1;
 8000d44:	4b7d      	ldr	r3, [pc, #500]	; (8000f3c <HAL_Init+0x284>)
 8000d46:	4a7e      	ldr	r2, [pc, #504]	; (8000f40 <HAL_Init+0x288>)
 8000d48:	601a      	str	r2, [r3, #0]
	mosi1.GPIO_Pin = MOSI_SPI1;
 8000d4a:	4b7c      	ldr	r3, [pc, #496]	; (8000f3c <HAL_Init+0x284>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	711a      	strb	r2, [r3, #4]
	mosi1.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8000d50:	4b7a      	ldr	r3, [pc, #488]	; (8000f3c <HAL_Init+0x284>)
 8000d52:	2202      	movs	r2, #2
 8000d54:	715a      	strb	r2, [r3, #5]
	mosi1.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 8000d56:	4b79      	ldr	r3, [pc, #484]	; (8000f3c <HAL_Init+0x284>)
 8000d58:	2205      	movs	r2, #5
 8000d5a:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&mosi1);
 8000d5c:	4877      	ldr	r0, [pc, #476]	; (8000f3c <HAL_Init+0x284>)
 8000d5e:	f7ff fbc1 	bl	80004e4 <GPIO_Init>

	/* Init MISO pin */
	miso1.GPIO_TypeDef = PORT_SPI1;
 8000d62:	4b78      	ldr	r3, [pc, #480]	; (8000f44 <HAL_Init+0x28c>)
 8000d64:	4a76      	ldr	r2, [pc, #472]	; (8000f40 <HAL_Init+0x288>)
 8000d66:	601a      	str	r2, [r3, #0]
	miso1.GPIO_Pin = MISO_SPI1;
 8000d68:	4b76      	ldr	r3, [pc, #472]	; (8000f44 <HAL_Init+0x28c>)
 8000d6a:	2206      	movs	r2, #6
 8000d6c:	711a      	strb	r2, [r3, #4]
	miso1.GPIO_Mode = GPIO_MODE_INPUT;
 8000d6e:	4b75      	ldr	r3, [pc, #468]	; (8000f44 <HAL_Init+0x28c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	715a      	strb	r2, [r3, #5]
	miso1.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8000d74:	4b73      	ldr	r3, [pc, #460]	; (8000f44 <HAL_Init+0x28c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&miso1);
 8000d7a:	4872      	ldr	r0, [pc, #456]	; (8000f44 <HAL_Init+0x28c>)
 8000d7c:	f7ff fbb2 	bl	80004e4 <GPIO_Init>

	/* Init SCK pin */
	sck1.GPIO_TypeDef = PORT_SPI1;
 8000d80:	4b71      	ldr	r3, [pc, #452]	; (8000f48 <HAL_Init+0x290>)
 8000d82:	4a6f      	ldr	r2, [pc, #444]	; (8000f40 <HAL_Init+0x288>)
 8000d84:	601a      	str	r2, [r3, #0]
	sck1.GPIO_Pin = SCK_SPI1;
 8000d86:	4b70      	ldr	r3, [pc, #448]	; (8000f48 <HAL_Init+0x290>)
 8000d88:	2205      	movs	r2, #5
 8000d8a:	711a      	strb	r2, [r3, #4]
	sck1.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8000d8c:	4b6e      	ldr	r3, [pc, #440]	; (8000f48 <HAL_Init+0x290>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	715a      	strb	r2, [r3, #5]
	sck1.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 8000d92:	4b6d      	ldr	r3, [pc, #436]	; (8000f48 <HAL_Init+0x290>)
 8000d94:	2205      	movs	r2, #5
 8000d96:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&sck1);
 8000d98:	486b      	ldr	r0, [pc, #428]	; (8000f48 <HAL_Init+0x290>)
 8000d9a:	f7ff fba3 	bl	80004e4 <GPIO_Init>

	/* Init NSS pin */
	nss1.GPIO_TypeDef = PORT_SPI1;
 8000d9e:	4b6b      	ldr	r3, [pc, #428]	; (8000f4c <HAL_Init+0x294>)
 8000da0:	4a67      	ldr	r2, [pc, #412]	; (8000f40 <HAL_Init+0x288>)
 8000da2:	601a      	str	r2, [r3, #0]
	nss1.GPIO_Pin = NSS_SPI1;
 8000da4:	4b69      	ldr	r3, [pc, #420]	; (8000f4c <HAL_Init+0x294>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	711a      	strb	r2, [r3, #4]
	nss1.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8000daa:	4b68      	ldr	r3, [pc, #416]	; (8000f4c <HAL_Init+0x294>)
 8000dac:	2202      	movs	r2, #2
 8000dae:	715a      	strb	r2, [r3, #5]
	nss1.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 8000db0:	4b66      	ldr	r3, [pc, #408]	; (8000f4c <HAL_Init+0x294>)
 8000db2:	2205      	movs	r2, #5
 8000db4:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&nss1);
 8000db6:	4865      	ldr	r0, [pc, #404]	; (8000f4c <HAL_Init+0x294>)
 8000db8:	f7ff fb94 	bl	80004e4 <GPIO_Init>


	/*Init DMA channels */
	spiTxdma.dma_TypeDef = DMA1_3;
 8000dbc:	4b64      	ldr	r3, [pc, #400]	; (8000f50 <HAL_Init+0x298>)
 8000dbe:	4a65      	ldr	r2, [pc, #404]	; (8000f54 <HAL_Init+0x29c>)
 8000dc0:	601a      	str	r2, [r3, #0]
	spiTxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 8000dc2:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_Init+0x298>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	721a      	strb	r2, [r3, #8]
	spiTxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8000dc8:	4b61      	ldr	r3, [pc, #388]	; (8000f50 <HAL_Init+0x298>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	711a      	strb	r2, [r3, #4]
	spiTxdma.dma_Direction = DMA_READ_FROM_MEMORY;
 8000dce:	4b60      	ldr	r3, [pc, #384]	; (8000f50 <HAL_Init+0x298>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	715a      	strb	r2, [r3, #5]
	spiTxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 8000dd4:	4b5e      	ldr	r3, [pc, #376]	; (8000f50 <HAL_Init+0x298>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	719a      	strb	r2, [r3, #6]
	spiTxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 8000dda:	4b5d      	ldr	r3, [pc, #372]	; (8000f50 <HAL_Init+0x298>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	71da      	strb	r2, [r3, #7]
	spiTxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 8000de0:	4b5b      	ldr	r3, [pc, #364]	; (8000f50 <HAL_Init+0x298>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	725a      	strb	r2, [r3, #9]
	spiTxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 8000de6:	4b5a      	ldr	r3, [pc, #360]	; (8000f50 <HAL_Init+0x298>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	729a      	strb	r2, [r3, #10]
	spiTxdma.dma_Interrupt = DMA_INTERRUPT_DISABLE;
 8000dec:	4b58      	ldr	r3, [pc, #352]	; (8000f50 <HAL_Init+0x298>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	72da      	strb	r2, [r3, #11]

	spi1.txdma = &spiTxdma;
 8000df2:	4b50      	ldr	r3, [pc, #320]	; (8000f34 <HAL_Init+0x27c>)
 8000df4:	4a56      	ldr	r2, [pc, #344]	; (8000f50 <HAL_Init+0x298>)
 8000df6:	609a      	str	r2, [r3, #8]

	DMA_Init(spi1.txdma);
 8000df8:	4b4e      	ldr	r3, [pc, #312]	; (8000f34 <HAL_Init+0x27c>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fa0f 	bl	8000220 <DMA_Init>

	SPI_Init(&spi1);
 8000e02:	484c      	ldr	r0, [pc, #304]	; (8000f34 <HAL_Init+0x27c>)
 8000e04:	f7ff fd90 	bl	8000928 <SPI_Init>

	/* Init SPI 2 as slave */
	_RCC_SPI2_ENABLE();
 8000e08:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <HAL_Init+0x278>)
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	4a48      	ldr	r2, [pc, #288]	; (8000f30 <HAL_Init+0x278>)
 8000e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e12:	61d3      	str	r3, [r2, #28]
	spi2.Instance = SPI2;
 8000e14:	4b50      	ldr	r3, [pc, #320]	; (8000f58 <HAL_Init+0x2a0>)
 8000e16:	4a51      	ldr	r2, [pc, #324]	; (8000f5c <HAL_Init+0x2a4>)
 8000e18:	601a      	str	r2, [r3, #0]
	spi2.Mode = SPI_MODE_SLAVE;
 8000e1a:	4b4f      	ldr	r3, [pc, #316]	; (8000f58 <HAL_Init+0x2a0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	711a      	strb	r2, [r3, #4]
	spi2.DataSize = SPI_DATASIZE_8BIT;
 8000e20:	4b4d      	ldr	r3, [pc, #308]	; (8000f58 <HAL_Init+0x2a0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	745a      	strb	r2, [r3, #17]
	spi2.CPOL = SPI_CPOL_LOW;
 8000e26:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <HAL_Init+0x2a0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	719a      	strb	r2, [r3, #6]
	spi2.CPHA = SPI_CPHA_1EDGE;
 8000e2c:	4b4a      	ldr	r3, [pc, #296]	; (8000f58 <HAL_Init+0x2a0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	71da      	strb	r2, [r3, #7]
	spi2.BaudRate = SPI_BAUDRATE_DIV2;
 8000e32:	4b49      	ldr	r3, [pc, #292]	; (8000f58 <HAL_Init+0x2a0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	715a      	strb	r2, [r3, #5]
	spi2.NSS = SPI_NSS_HARD;
 8000e38:	4b47      	ldr	r3, [pc, #284]	; (8000f58 <HAL_Init+0x2a0>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	751a      	strb	r2, [r3, #20]
	spi2.BiDir = SPI_BIDIR_DISABLE;
 8000e3e:	4b46      	ldr	r3, [pc, #280]	; (8000f58 <HAL_Init+0x2a0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	755a      	strb	r2, [r3, #21]
	spi2.CRC = SPI_CRC_DISABLE;
 8000e44:	4b44      	ldr	r3, [pc, #272]	; (8000f58 <HAL_Init+0x2a0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	759a      	strb	r2, [r3, #22]
	spi2.FirstBit = SPI_LSB_FIRST;
 8000e4a:	4b43      	ldr	r3, [pc, #268]	; (8000f58 <HAL_Init+0x2a0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	741a      	strb	r2, [r3, #16]
	spi2.CRCPolynomial = SPI_CRC_POLYNOMIAL_7BIT;
 8000e50:	4b41      	ldr	r3, [pc, #260]	; (8000f58 <HAL_Init+0x2a0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	75da      	strb	r2, [r3, #23]
	spi2.CRCDir = SPI_CRC_TX;
 8000e56:	4b40      	ldr	r3, [pc, #256]	; (8000f58 <HAL_Init+0x2a0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	761a      	strb	r2, [r3, #24]
	spi2.SpiTxDma = SPI_TX_DMA_DISABLE;
 8000e5c:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <HAL_Init+0x2a0>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	749a      	strb	r2, [r3, #18]
	spi2.SpiRxDma = SPI_RX_DMA_ENABLE;
 8000e62:	4b3d      	ldr	r3, [pc, #244]	; (8000f58 <HAL_Init+0x2a0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	74da      	strb	r2, [r3, #19]

	/* Init MOSI,MISO,SCK,NSS pin configs */
	/* Init MOSI pin */
	mosi2.GPIO_TypeDef = PORT_SPI2;
 8000e68:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <HAL_Init+0x2a8>)
 8000e6a:	4a3e      	ldr	r2, [pc, #248]	; (8000f64 <HAL_Init+0x2ac>)
 8000e6c:	601a      	str	r2, [r3, #0]
	mosi2.GPIO_Pin = MOSI_SPI2;
 8000e6e:	4b3c      	ldr	r3, [pc, #240]	; (8000f60 <HAL_Init+0x2a8>)
 8000e70:	220f      	movs	r2, #15
 8000e72:	711a      	strb	r2, [r3, #4]
	mosi2.GPIO_Mode = GPIO_MODE_INPUT;
 8000e74:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <HAL_Init+0x2a8>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	715a      	strb	r2, [r3, #5]
	mosi2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8000e7a:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <HAL_Init+0x2a8>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&mosi2);
 8000e80:	4837      	ldr	r0, [pc, #220]	; (8000f60 <HAL_Init+0x2a8>)
 8000e82:	f7ff fb2f 	bl	80004e4 <GPIO_Init>

	/* Init MISO pin */
	miso2.GPIO_TypeDef = PORT_SPI2;
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <HAL_Init+0x2b0>)
 8000e88:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <HAL_Init+0x2ac>)
 8000e8a:	601a      	str	r2, [r3, #0]
	miso2.GPIO_Pin = MISO_SPI2;
 8000e8c:	4b36      	ldr	r3, [pc, #216]	; (8000f68 <HAL_Init+0x2b0>)
 8000e8e:	220e      	movs	r2, #14
 8000e90:	711a      	strb	r2, [r3, #4]
	miso2.GPIO_Mode = GPIO_MODE_OUTPUT_2MHZ;
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <HAL_Init+0x2b0>)
 8000e94:	2202      	movs	r2, #2
 8000e96:	715a      	strb	r2, [r3, #5]
	miso2.GPIO_CNF = GPIO_CNF_OUTPUT_ALTFN_PUSH_PULL;
 8000e98:	4b33      	ldr	r3, [pc, #204]	; (8000f68 <HAL_Init+0x2b0>)
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&miso2);
 8000e9e:	4832      	ldr	r0, [pc, #200]	; (8000f68 <HAL_Init+0x2b0>)
 8000ea0:	f7ff fb20 	bl	80004e4 <GPIO_Init>

	/* Init SCK pin */
	sck2.GPIO_TypeDef = PORT_SPI2;
 8000ea4:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_Init+0x2b4>)
 8000ea6:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <HAL_Init+0x2ac>)
 8000ea8:	601a      	str	r2, [r3, #0]
	sck2.GPIO_Pin = SCK_SPI2;
 8000eaa:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <HAL_Init+0x2b4>)
 8000eac:	220d      	movs	r2, #13
 8000eae:	711a      	strb	r2, [r3, #4]
	sck2.GPIO_Mode = GPIO_MODE_INPUT;
 8000eb0:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <HAL_Init+0x2b4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	715a      	strb	r2, [r3, #5]
	sck2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8000eb6:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <HAL_Init+0x2b4>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&sck2);
 8000ebc:	482b      	ldr	r0, [pc, #172]	; (8000f6c <HAL_Init+0x2b4>)
 8000ebe:	f7ff fb11 	bl	80004e4 <GPIO_Init>

	/* Init NSS pin */
	nss2.GPIO_TypeDef = PORT_SPI2;
 8000ec2:	4b2b      	ldr	r3, [pc, #172]	; (8000f70 <HAL_Init+0x2b8>)
 8000ec4:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <HAL_Init+0x2ac>)
 8000ec6:	601a      	str	r2, [r3, #0]
	nss2.GPIO_Pin = NSS_SPI2;
 8000ec8:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <HAL_Init+0x2b8>)
 8000eca:	220c      	movs	r2, #12
 8000ecc:	711a      	strb	r2, [r3, #4]
	nss2.GPIO_Mode = GPIO_MODE_INPUT;
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <HAL_Init+0x2b8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	715a      	strb	r2, [r3, #5]
	nss2.GPIO_CNF = GPIO_CNF_INPUT_FLOATING;
 8000ed4:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <HAL_Init+0x2b8>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	719a      	strb	r2, [r3, #6]
	GPIO_Init(&nss2);
 8000eda:	4825      	ldr	r0, [pc, #148]	; (8000f70 <HAL_Init+0x2b8>)
 8000edc:	f7ff fb02 	bl	80004e4 <GPIO_Init>
	
	/*Init DMA channels */
	spiRxdma.dma_TypeDef = DMA1_4;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <HAL_Init+0x2bc>)
 8000ee2:	4a25      	ldr	r2, [pc, #148]	; (8000f78 <HAL_Init+0x2c0>)
 8000ee4:	601a      	str	r2, [r3, #0]
	spiRxdma.dma_Mem2Mem = DMA_MEM2MEM_DISABLE;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_Init+0x2bc>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	721a      	strb	r2, [r3, #8]
	spiRxdma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_Init+0x2bc>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	711a      	strb	r2, [r3, #4]
	spiRxdma.dma_Direction = DMA_READ_FROM_PERIPHERAL;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_Init+0x2bc>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	715a      	strb	r2, [r3, #5]
	spiRxdma.dma_MemSize = DMA_MEM_SIZE_8_BITS;
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_Init+0x2bc>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	719a      	strb	r2, [r3, #6]
	spiRxdma.dma_PeriphSize = DMA_PERIPH_SIZE_8_BITS;
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_Init+0x2bc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	71da      	strb	r2, [r3, #7]
	spiRxdma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_Init+0x2bc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	725a      	strb	r2, [r3, #9]
	spiRxdma.dma_PeriphIncMode = DMA_PERIPH_INC_DISABLE;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_Init+0x2bc>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	729a      	strb	r2, [r3, #10]
	spiRxdma.dma_Interrupt = DMA_INTERRUPT_ENABLE;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_Init+0x2bc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	72da      	strb	r2, [r3, #11]

	spi2.rxdma = &spiRxdma;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_Init+0x2a0>)
 8000f18:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <HAL_Init+0x2bc>)
 8000f1a:	60da      	str	r2, [r3, #12]

	DMA_Init(spi2.rxdma);
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x2a0>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff f97d 	bl	8000220 <DMA_Init>


	SPI_Init(&spi2);
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <HAL_Init+0x2a0>)
 8000f28:	f7ff fcfe 	bl	8000928 <SPI_Init>
	// DMA_Init(&dma);
	// DMA_SetCallBackFn(&dma,DMA1_1_CallbackFn);
	// DMA_Transfer(&dma, sendArray, receiveArray,2);


}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	200000d4 	.word	0x200000d4
 8000f38:	40013000 	.word	0x40013000
 8000f3c:	200000a8 	.word	0x200000a8
 8000f40:	40010800 	.word	0x40010800
 8000f44:	200000b0 	.word	0x200000b0
 8000f48:	20000098 	.word	0x20000098
 8000f4c:	20000060 	.word	0x20000060
 8000f50:	20000084 	.word	0x20000084
 8000f54:	40020030 	.word	0x40020030
 8000f58:	20000068 	.word	0x20000068
 8000f5c:	40003800 	.word	0x40003800
 8000f60:	20000058 	.word	0x20000058
 8000f64:	40010c00 	.word	0x40010c00
 8000f68:	20000090 	.word	0x20000090
 8000f6c:	200000b8 	.word	0x200000b8
 8000f70:	200000cc 	.word	0x200000cc
 8000f74:	200000c0 	.word	0x200000c0
 8000f78:	40020044 	.word	0x40020044

08000f7c <WWDG_IRQHandler>:
{
	GPIOA->ODR ^= (1<<0);
}

void WWDG_IRQHandler()
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <WWDG_IRQHandler+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <WWDG_IRQHandler+0x18>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	40010800 	.word	0x40010800

08000f98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f9c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fc6:	f000 f811 	bl	8000fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fca:	f7ff fe5b 	bl	8000c84 <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   r0, =_estack
 8000fd0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000fdc:	08001054 	.word	0x08001054
  ldr r2, =_sbss
 8000fe0:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000fe4:	200000f0 	.word	0x200000f0

08000fe8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC1_2_IRQHandler>
	...

08000fec <__libc_init_array>:
 8000fec:	b570      	push	{r4, r5, r6, lr}
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4d0c      	ldr	r5, [pc, #48]	; (8001024 <__libc_init_array+0x38>)
 8000ff2:	4c0d      	ldr	r4, [pc, #52]	; (8001028 <__libc_init_array+0x3c>)
 8000ff4:	1b64      	subs	r4, r4, r5
 8000ff6:	10a4      	asrs	r4, r4, #2
 8000ff8:	42a6      	cmp	r6, r4
 8000ffa:	d109      	bne.n	8001010 <__libc_init_array+0x24>
 8000ffc:	f000 f81a 	bl	8001034 <_init>
 8001000:	2600      	movs	r6, #0
 8001002:	4d0a      	ldr	r5, [pc, #40]	; (800102c <__libc_init_array+0x40>)
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <__libc_init_array+0x44>)
 8001006:	1b64      	subs	r4, r4, r5
 8001008:	10a4      	asrs	r4, r4, #2
 800100a:	42a6      	cmp	r6, r4
 800100c:	d105      	bne.n	800101a <__libc_init_array+0x2e>
 800100e:	bd70      	pop	{r4, r5, r6, pc}
 8001010:	f855 3b04 	ldr.w	r3, [r5], #4
 8001014:	4798      	blx	r3
 8001016:	3601      	adds	r6, #1
 8001018:	e7ee      	b.n	8000ff8 <__libc_init_array+0xc>
 800101a:	f855 3b04 	ldr.w	r3, [r5], #4
 800101e:	4798      	blx	r3
 8001020:	3601      	adds	r6, #1
 8001022:	e7f2      	b.n	800100a <__libc_init_array+0x1e>
 8001024:	0800104c 	.word	0x0800104c
 8001028:	0800104c 	.word	0x0800104c
 800102c:	0800104c 	.word	0x0800104c
 8001030:	08001050 	.word	0x08001050

08001034 <_init>:
 8001034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001036:	bf00      	nop
 8001038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800103a:	bc08      	pop	{r3}
 800103c:	469e      	mov	lr, r3
 800103e:	4770      	bx	lr

08001040 <_fini>:
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	bf00      	nop
 8001044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001046:	bc08      	pop	{r3}
 8001048:	469e      	mov	lr, r3
 800104a:	4770      	bx	lr
