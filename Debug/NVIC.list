
NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000580  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006b0  080006b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006b0  080006b0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080006b0  080006b0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006b0  080006b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006b0  080006b0  000106b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006b4  080006b4  000106b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080006b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000004  080006bc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  080006bc  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001241  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003e7  00000000  00000000  0002126e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00021658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000138  00000000  00000000  000217c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011a6  00000000  00000000  00021900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009df  00000000  00000000  00022aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00005851  00000000  00000000  00023485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00028cd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004c0  00000000  00000000  00028d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000698 	.word	0x08000698

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000698 	.word	0x08000698

08000170 <NVIC_SetEnableInterrupt>:
 * @brief Enable interrupt for a given irq
 * 
 * @param copy_enumIRQ irq number for interrupt 
 */
void NVIC_SetEnableInterrupt(NVIC_IRQ copy_enumIRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
    NVIC->ISER[(copy_enumIRQ >> 5)] |= (1 << (copy_enumIRQ & 0x1F));
 800017a:	4a0d      	ldr	r2, [pc, #52]	; (80001b0 <NVIC_SetEnableInterrupt+0x40>)
 800017c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000180:	115b      	asrs	r3, r3, #5
 8000182:	b25b      	sxtb	r3, r3
 8000184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000188:	79fa      	ldrb	r2, [r7, #7]
 800018a:	f002 021f 	and.w	r2, r2, #31
 800018e:	2101      	movs	r1, #1
 8000190:	fa01 f202 	lsl.w	r2, r1, r2
 8000194:	4610      	mov	r0, r2
 8000196:	4906      	ldr	r1, [pc, #24]	; (80001b0 <NVIC_SetEnableInterrupt+0x40>)
 8000198:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800019c:	1152      	asrs	r2, r2, #5
 800019e:	b252      	sxtb	r2, r2
 80001a0:	4303      	orrs	r3, r0
 80001a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

}
 80001a6:	bf00      	nop
 80001a8:	370c      	adds	r7, #12
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	e000e100 	.word	0xe000e100

080001b4 <DMA_Init>:
 *   copy_dmaHandle: Pointer to the DMA handle structure containing the configuration.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if initialization is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Init(DMA_HandleTypeDef *copy_dmaHandle){
 80001b4:	b480      	push	{r7}
 80001b6:	b085      	sub	sp, #20
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]

    HAL_Status hal_Status = HAL_OKAY;
 80001bc:	2300      	movs	r3, #0
 80001be:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_dmaHandle)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d102      	bne.n	80001cc <DMA_Init+0x18>
    {
        hal_Status = HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
 80001c8:	73fb      	strb	r3, [r7, #15]
 80001ca:	e099      	b.n	8000300 <DMA_Init+0x14c>
    }
    else
    {
    switch(copy_dmaHandle->dma_Direction)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	795b      	ldrb	r3, [r3, #5]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d002      	beq.n	80001da <DMA_Init+0x26>
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d009      	beq.n	80001ec <DMA_Init+0x38>
 80001d8:	e011      	b.n	80001fe <DMA_Init+0x4a>
    {
        case DMA_READ_FROM_PERIPHERAL:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	f022 0210 	bic.w	r2, r2, #16
 80001e8:	609a      	str	r2, [r3, #8]
            break;
 80001ea:	e008      	b.n	80001fe <DMA_Init+0x4a>
        case DMA_READ_FROM_MEMORY:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_DIR_Pos);
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	689a      	ldr	r2, [r3, #8]
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f042 0210 	orr.w	r2, r2, #16
 80001fa:	609a      	str	r2, [r3, #8]
            break;
 80001fc:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mem2Mem)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	7a1b      	ldrb	r3, [r3, #8]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d002      	beq.n	800020c <DMA_Init+0x58>
 8000206:	2b01      	cmp	r3, #1
 8000208:	d009      	beq.n	800021e <DMA_Init+0x6a>
 800020a:	e011      	b.n	8000230 <DMA_Init+0x7c>
    {
        case DMA_MEM2MEM_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	689a      	ldr	r2, [r3, #8]
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800021a:	609a      	str	r2, [r3, #8]
            break;
 800021c:	e008      	b.n	8000230 <DMA_Init+0x7c>
        case DMA_MEM2MEM_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MEM2MEM_Pos);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	689a      	ldr	r2, [r3, #8]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800022c:	609a      	str	r2, [r3, #8]
            break;
 800022e:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Mode)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	791b      	ldrb	r3, [r3, #4]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d00e      	beq.n	8000256 <DMA_Init+0xa2>
 8000238:	2b01      	cmp	r3, #1
 800023a:	d116      	bne.n	800026a <DMA_Init+0xb6>
    {
        case DMA_NON_CIRCULAR_MODE:
            if(copy_dmaHandle->dma_Mem2Mem != DMA_MEM2MEM_ENABLE )
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	7a1b      	ldrb	r3, [r3, #8]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d011      	beq.n	8000268 <DMA_Init+0xb4>
            {
                CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	689a      	ldr	r2, [r3, #8]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f022 0220 	bic.w	r2, r2, #32
 8000252:	609a      	str	r2, [r3, #8]

            }
            break;
 8000254:	e008      	b.n	8000268 <DMA_Init+0xb4>
        case DMA_CIRCULAR_MODE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_CIRC_Pos);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	689a      	ldr	r2, [r3, #8]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f042 0220 	orr.w	r2, r2, #32
 8000264:	609a      	str	r2, [r3, #8]
            break;
 8000266:	e000      	b.n	800026a <DMA_Init+0xb6>
            break;
 8000268:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_MemIncMode)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	7a5b      	ldrb	r3, [r3, #9]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d002      	beq.n	8000278 <DMA_Init+0xc4>
 8000272:	2b01      	cmp	r3, #1
 8000274:	d009      	beq.n	800028a <DMA_Init+0xd6>
 8000276:	e011      	b.n	800029c <DMA_Init+0xe8>
    {
        case DMA_MEM_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	689a      	ldr	r2, [r3, #8]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000286:	609a      	str	r2, [r3, #8]
            break;
 8000288:	e008      	b.n	800029c <DMA_Init+0xe8>
        case DMA_MEM_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_MINC_Pos);
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	689a      	ldr	r2, [r3, #8]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000298:	609a      	str	r2, [r3, #8]
            break;
 800029a:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_PeriphIncMode)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	7a9b      	ldrb	r3, [r3, #10]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <DMA_Init+0xf6>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d009      	beq.n	80002bc <DMA_Init+0x108>
 80002a8:	e011      	b.n	80002ce <DMA_Init+0x11a>
    {
        case DMA_PERIPH_INC_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80002b8:	609a      	str	r2, [r3, #8]
            break;
 80002ba:	e008      	b.n	80002ce <DMA_Init+0x11a>
        case DMA_PERIPH_INC_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_PINC_Pos);
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	689a      	ldr	r2, [r3, #8]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80002ca:	609a      	str	r2, [r3, #8]
            break;
 80002cc:	bf00      	nop
    }
    switch(copy_dmaHandle->dma_Interrupt)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	7adb      	ldrb	r3, [r3, #11]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d002      	beq.n	80002dc <DMA_Init+0x128>
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d009      	beq.n	80002ee <DMA_Init+0x13a>
 80002da:	e011      	b.n	8000300 <DMA_Init+0x14c>
    {
        case DMA_INTERRUPT_ENABLE:
            SET_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	689a      	ldr	r2, [r3, #8]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f042 0202 	orr.w	r2, r2, #2
 80002ea:	609a      	str	r2, [r3, #8]
            break;
 80002ec:	e008      	b.n	8000300 <DMA_Init+0x14c>
        case DMA_INTERRUPT_DISABLE:
            CLR_BIT(copy_dmaHandle->dma_TypeDef->CCR, DMA_CCR_TCIE_Pos);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	689a      	ldr	r2, [r3, #8]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f022 0202 	bic.w	r2, r2, #2
 80002fc:	609a      	str	r2, [r3, #8]
            break;
 80002fe:	bf00      	nop
    }
    }
    return hal_Status;
 8000300:	7bfb      	ldrb	r3, [r7, #15]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3714      	adds	r7, #20
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <DMA_SetPeriphAddress>:
 *   copy_u32PeriphAddress: Pointer to the peripheral address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetPeriphAddress(DMA_HandleTypeDef *copy_dmaHandle,uint32_t *copy_u32PeriphAddress){
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000316:	2300      	movs	r3, #0
 8000318:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32PeriphAddress || NULL == copy_dmaHandle )
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <DMA_SetPeriphAddress+0x1a>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d102      	bne.n	800032c <DMA_SetPeriphAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 8000326:	2301      	movs	r3, #1
 8000328:	73fb      	strb	r3, [r7, #15]
 800032a:	e003      	b.n	8000334 <DMA_SetPeriphAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CPAR = copy_u32PeriphAddress;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	683a      	ldr	r2, [r7, #0]
 8000332:	611a      	str	r2, [r3, #16]
    }
    return hal_Status;
 8000334:	7bfb      	ldrb	r3, [r7, #15]
}
 8000336:	4618      	mov	r0, r3
 8000338:	3714      	adds	r7, #20
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <DMA_SetMemoryAddress>:
 *   copy_u32MemAddress: Pointer to the memory address.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if setting the address is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_SetMemoryAddress(DMA_HandleTypeDef *copy_dmaHandle ,uint32_t *copy_u32MemAddress){
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 800034a:	2300      	movs	r3, #0
 800034c:	73fb      	strb	r3, [r7, #15]
    if(NULL == copy_u32MemAddress || NULL == copy_dmaHandle )
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d002      	beq.n	800035a <DMA_SetMemoryAddress+0x1a>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2b00      	cmp	r3, #0
 8000358:	d102      	bne.n	8000360 <DMA_SetMemoryAddress+0x20>
    {
        hal_Status = HAL_ERROR;
 800035a:	2301      	movs	r3, #1
 800035c:	73fb      	strb	r3, [r7, #15]
 800035e:	e003      	b.n	8000368 <DMA_SetMemoryAddress+0x28>
    }
    else
    {
        copy_dmaHandle->dma_TypeDef->CMAR = copy_u32MemAddress;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	683a      	ldr	r2, [r7, #0]
 8000366:	615a      	str	r2, [r3, #20]
    }
    return hal_Status;
 8000368:	7bfb      	ldrb	r3, [r7, #15]
}
 800036a:	4618      	mov	r0, r3
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <DMA_Start>:
 *   hdma: Pointer to the DMA handle structure.
 * 
 * Returns:
 *   HAL_Status: HAL_OKAY if starting the transfer is successful, HAL_ERROR otherwise.
 */
HAL_Status DMA_Start(DMA_HandleTypeDef *hdma){
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
    HAL_Status hal_Status = HAL_OKAY;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d102      	bne.n	800038c <DMA_Start+0x18>
    {
        hal_Status = HAL_ERROR;
 8000386:	2301      	movs	r3, #1
 8000388:	73fb      	strb	r3, [r7, #15]
 800038a:	e007      	b.n	800039c <DMA_Start+0x28>
    }
    else
    {
        SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	689a      	ldr	r2, [r3, #8]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f042 0201 	orr.w	r2, r2, #1
 800039a:	609a      	str	r2, [r3, #8]
    }
    return hal_Status;
 800039c:	7bfb      	ldrb	r3, [r7, #15]
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <DMA_SetDataCounter>:
 * @param copy_u32DataLength: The number of data items to be transferred by the DMA channel.
 *
 * @return HAL_Status: HAL_OKAY if the operation was successful, HAL_ERROR if there was an error or if the input parameters are invalid.
 */
HAL_Status DMA_SetDataCounter(DMA_HandleTypeDef *hdma, uint32_t copy_u32DataLength)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80003b2:	2300      	movs	r3, #0
 80003b4:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d102      	bne.n	80003c2 <DMA_SetDataCounter+0x1a>
    {
        hal_Status = HAL_ERROR;
 80003bc:	2301      	movs	r3, #1
 80003be:	73fb      	strb	r3, [r7, #15]
 80003c0:	e003      	b.n	80003ca <DMA_SetDataCounter+0x22>
    }
    else
    {
        hdma->dma_TypeDef->CNTDR = copy_u32DataLength;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	683a      	ldr	r2, [r7, #0]
 80003c8:	60da      	str	r2, [r3, #12]
        // SET_BIT(hdma->dma_TypeDef->CCR, DMA_CCR_EN_Pos);
    }
    return hal_Status;
 80003ca:	7bfb      	ldrb	r3, [r7, #15]

}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3714      	adds	r7, #20
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr

080003d6 <DMA_Transfer>:

HAL_Status DMA_Transfer(DMA_HandleTypeDef *hdma, uint8_t *srcData, uint8_t *destData, uint32_t dataLength)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b086      	sub	sp, #24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	60b9      	str	r1, [r7, #8]
 80003e0:	607a      	str	r2, [r7, #4]
 80003e2:	603b      	str	r3, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 80003e4:	2300      	movs	r3, #0
 80003e6:	75fb      	strb	r3, [r7, #23]
    if(NULL == hdma )
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d102      	bne.n	80003f4 <DMA_Transfer+0x1e>
    {
        hal_Status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
 80003f2:	e00e      	b.n	8000412 <DMA_Transfer+0x3c>
    }
    else
    {
        DMA_SetMemoryAddress(hdma, srcData);
 80003f4:	68b9      	ldr	r1, [r7, #8]
 80003f6:	68f8      	ldr	r0, [r7, #12]
 80003f8:	f7ff ffa2 	bl	8000340 <DMA_SetMemoryAddress>
        DMA_SetPeriphAddress(hdma, destData);
 80003fc:	6879      	ldr	r1, [r7, #4]
 80003fe:	68f8      	ldr	r0, [r7, #12]
 8000400:	f7ff ff84 	bl	800030c <DMA_SetPeriphAddress>
        DMA_SetDataCounter(hdma, dataLength);
 8000404:	6839      	ldr	r1, [r7, #0]
 8000406:	68f8      	ldr	r0, [r7, #12]
 8000408:	f7ff ffce 	bl	80003a8 <DMA_SetDataCounter>
        DMA_Start(hdma);
 800040c:	68f8      	ldr	r0, [r7, #12]
 800040e:	f7ff ffb1 	bl	8000374 <DMA_Start>

    }
    return hal_Status;
 8000412:	7dfb      	ldrb	r3, [r7, #23]

}
 8000414:	4618      	mov	r0, r3
 8000416:	3718      	adds	r7, #24
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <DMA_SetCallBackFn>:

HAL_Status DMA_SetCallBackFn(DMA_HandleTypeDef *hdma, DMA_CallbackFn callbackFn)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
    HAL_Status hal_Status = HAL_OKAY;
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]
    if(NULL == hdma )
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d102      	bne.n	8000436 <DMA_SetCallBackFn+0x1a>
    {
        hal_Status = HAL_ERROR;
 8000430:	2301      	movs	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
 8000434:	e01b      	b.n	800046e <DMA_SetCallBackFn+0x52>
    }
    else
    {
    switch ((uint32_t)hdma->dma_TypeDef)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a10      	ldr	r2, [pc, #64]	; (800047c <DMA_SetCallBackFn+0x60>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d011      	beq.n	8000464 <DMA_SetCallBackFn+0x48>
 8000440:	4a0e      	ldr	r2, [pc, #56]	; (800047c <DMA_SetCallBackFn+0x60>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d812      	bhi.n	800046c <DMA_SetCallBackFn+0x50>
 8000446:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <DMA_SetCallBackFn+0x64>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d003      	beq.n	8000454 <DMA_SetCallBackFn+0x38>
 800044c:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <DMA_SetCallBackFn+0x68>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d004      	beq.n	800045c <DMA_SetCallBackFn+0x40>
            // Code for DMA1_3
            DMA1_3_CallbackFnPtr = callbackFn;
            break;
        default:
            // Default case
            break;
 8000452:	e00b      	b.n	800046c <DMA_SetCallBackFn+0x50>
            DMA1_1_CallbackFnPtr = callbackFn;
 8000454:	4a0c      	ldr	r2, [pc, #48]	; (8000488 <DMA_SetCallBackFn+0x6c>)
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	6013      	str	r3, [r2, #0]
            break;
 800045a:	e008      	b.n	800046e <DMA_SetCallBackFn+0x52>
            DMA1_2_CallbackFnPtr = callbackFn;
 800045c:	4a0b      	ldr	r2, [pc, #44]	; (800048c <DMA_SetCallBackFn+0x70>)
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	6013      	str	r3, [r2, #0]
            break;
 8000462:	e004      	b.n	800046e <DMA_SetCallBackFn+0x52>
            DMA1_3_CallbackFnPtr = callbackFn;
 8000464:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <DMA_SetCallBackFn+0x74>)
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	6013      	str	r3, [r2, #0]
            break;
 800046a:	e000      	b.n	800046e <DMA_SetCallBackFn+0x52>
            break;
 800046c:	bf00      	nop
    }
    }
    return hal_Status;
 800046e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000470:	4618      	mov	r0, r3
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40020030 	.word	0x40020030
 8000480:	40020000 	.word	0x40020000
 8000484:	4002001c 	.word	0x4002001c
 8000488:	20000020 	.word	0x20000020
 800048c:	2000002c 	.word	0x2000002c
 8000490:	20000024 	.word	0x20000024

08000494 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler()
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
    DMA1_1_CallbackFnPtr();
 8000498:	4b02      	ldr	r3, [pc, #8]	; (80004a4 <DMA1_Channel1_IRQHandler+0x10>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4798      	blx	r3
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000020 	.word	0x20000020

080004a8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
    DMA1_2_CallbackFnPtr();
 80004ac:	4b02      	ldr	r3, [pc, #8]	; (80004b8 <DMA1_Channel2_IRQHandler+0x10>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4798      	blx	r3
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000002c 	.word	0x2000002c

080004bc <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
    DMA1_3_CallbackFnPtr();
 80004c0:	4b02      	ldr	r3, [pc, #8]	; (80004cc <DMA1_Channel3_IRQHandler+0x10>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4798      	blx	r3
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000024 	.word	0x20000024

080004d0 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler()
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler()
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0

}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler()
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler()
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <DMA2_Channel1_IRQHandler>:
void DMA2_Channel1_IRQHandler()
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <DMA2_Channel2_IRQHandler>:
void DMA2_Channel2_IRQHandler()
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <DMA2_Channel3_IRQHandler>:
void DMA2_Channel3_IRQHandler()
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <main>:

/* Define callback function */
void DMA1_1_CallbackFn();

int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0

	// RCC->RCC_APB2ENR |= (1 << 2);
	_RCC_GPIOA_ENABLE();
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <main+0x74>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <main+0x74>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6193      	str	r3, [r2, #24]
	_RCC_DMA1_ENABLE();
 8000536:	4b18      	ldr	r3, [pc, #96]	; (8000598 <main+0x74>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a17      	ldr	r2, [pc, #92]	; (8000598 <main+0x74>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6153      	str	r3, [r2, #20]
	//ENABLE NVIC Interrupt on DMA1 Channel1
	NVIC_SetEnableInterrupt(NVIC_IRQ_DMA1_Channel1_IRQHandler);
 8000542:	200b      	movs	r0, #11
 8000544:	f7ff fe14 	bl	8000170 <NVIC_SetEnableInterrupt>
//	Clock_Config();
	GPIOA->CRL |= (1 << 0);
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <main+0x78>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a13      	ldr	r2, [pc, #76]	; (800059c <main+0x78>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1 << 2);
 8000554:	4b11      	ldr	r3, [pc, #68]	; (800059c <main+0x78>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <main+0x78>)
 800055a:	f023 0304 	bic.w	r3, r3, #4
 800055e:	6013      	str	r3, [r2, #0]
	// NVIC_SetEnableInterrupt(NVIC_IRQ_SysTick_Handler);
//	SYSTICK_Start(10UL,blinkLed);
	//set as output
	//GPIOA->ODR |= (1 << 0);
	DMA_HandleTypeDef dma;
	dma.dma_TypeDef = DMA1_1;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0x7c>)
 8000562:	607b      	str	r3, [r7, #4]
	dma.dma_Direction = DMA_READ_FROM_MEMORY;
 8000564:	2301      	movs	r3, #1
 8000566:	727b      	strb	r3, [r7, #9]
	dma.dma_Mem2Mem = DMA_MEM2MEM_ENABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	733b      	strb	r3, [r7, #12]
	dma.dma_MemIncMode = DMA_MEM_INC_ENABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	737b      	strb	r3, [r7, #13]
	dma.dma_Mode = DMA_NON_CIRCULAR_MODE;
 8000570:	2301      	movs	r3, #1
 8000572:	723b      	strb	r3, [r7, #8]
	dma.dma_Interrupt = DMA_INTERRUPT_ENABLE;
 8000574:	2300      	movs	r3, #0
 8000576:	73fb      	strb	r3, [r7, #15]
	DMA_Init(&dma);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fe1a 	bl	80001b4 <DMA_Init>
	DMA_SetCallBackFn(&dma,DMA1_1_CallbackFn);
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4908      	ldr	r1, [pc, #32]	; (80005a4 <main+0x80>)
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff49 	bl	800041c <DMA_SetCallBackFn>
	DMA_Transfer(&dma, sendArray, receiveArray,2);
 800058a:	1d38      	adds	r0, r7, #4
 800058c:	2302      	movs	r3, #2
 800058e:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <main+0x84>)
 8000590:	4906      	ldr	r1, [pc, #24]	; (80005ac <main+0x88>)
 8000592:	f7ff ff20 	bl	80003d6 <DMA_Transfer>
//	}

		/* Start operation move from array to another array */

		/* Loop forever */
		for (;;);
 8000596:	e7fe      	b.n	8000596 <main+0x72>
 8000598:	40021000 	.word	0x40021000
 800059c:	40010800 	.word	0x40010800
 80005a0:	40020000 	.word	0x40020000
 80005a4:	080005cd 	.word	0x080005cd
 80005a8:	2000003c 	.word	0x2000003c
 80005ac:	20000000 	.word	0x20000000

080005b0 <WWDG_IRQHandler>:
{
	GPIOA->ODR ^= (1<<0);
}

void WWDG_IRQHandler()
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
	GPIOA->ODR |= (1<<0);
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <WWDG_IRQHandler+0x18>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <WWDG_IRQHandler+0x18>)
 80005ba:	f043 0301 	orr.w	r3, r3, #1
 80005be:	60d3      	str	r3, [r2, #12]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40010800 	.word	0x40010800

080005cc <DMA1_1_CallbackFn>:


void DMA1_1_CallbackFn()
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
	if(sendArray[1] != receiveArray[1])
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <DMA1_1_CallbackFn+0x24>)
 80005d2:	785a      	ldrb	r2, [r3, #1]
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <DMA1_1_CallbackFn+0x28>)
 80005d6:	785b      	ldrb	r3, [r3, #1]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d005      	beq.n	80005e8 <DMA1_1_CallbackFn+0x1c>
	{
		GPIOA->ODR |= (1 << 0);
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <DMA1_1_CallbackFn+0x2c>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <DMA1_1_CallbackFn+0x2c>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	60d3      	str	r3, [r2, #12]
	else
	{
		// GPIOA->ODR |= ( << 0);
		//do nothing
	}
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	20000000 	.word	0x20000000
 80005f4:	2000003c 	.word	0x2000003c
 80005f8:	40010800 	.word	0x40010800

080005fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000600:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <LoopForever+0x6>)
  ldr r1, =_edata
 8000606:	490d      	ldr	r1, [pc, #52]	; (800063c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000608:	4a0d      	ldr	r2, [pc, #52]	; (8000640 <LoopForever+0xe>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LoopForever+0x12>)
  ldr r4, =_ebss
 800061c:	4c0a      	ldr	r4, [pc, #40]	; (8000648 <LoopForever+0x16>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800062a:	f000 f811 	bl	8000650 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff ff79 	bl	8000524 <main>

08000632 <LoopForever>:

LoopForever:
    b LoopForever
 8000632:	e7fe      	b.n	8000632 <LoopForever>
  ldr   r0, =_estack
 8000634:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000640:	080006b8 	.word	0x080006b8
  ldr r2, =_sbss
 8000644:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000648:	20000040 	.word	0x20000040

0800064c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC1_2_IRQHandler>
	...

08000650 <__libc_init_array>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	2600      	movs	r6, #0
 8000654:	4d0c      	ldr	r5, [pc, #48]	; (8000688 <__libc_init_array+0x38>)
 8000656:	4c0d      	ldr	r4, [pc, #52]	; (800068c <__libc_init_array+0x3c>)
 8000658:	1b64      	subs	r4, r4, r5
 800065a:	10a4      	asrs	r4, r4, #2
 800065c:	42a6      	cmp	r6, r4
 800065e:	d109      	bne.n	8000674 <__libc_init_array+0x24>
 8000660:	f000 f81a 	bl	8000698 <_init>
 8000664:	2600      	movs	r6, #0
 8000666:	4d0a      	ldr	r5, [pc, #40]	; (8000690 <__libc_init_array+0x40>)
 8000668:	4c0a      	ldr	r4, [pc, #40]	; (8000694 <__libc_init_array+0x44>)
 800066a:	1b64      	subs	r4, r4, r5
 800066c:	10a4      	asrs	r4, r4, #2
 800066e:	42a6      	cmp	r6, r4
 8000670:	d105      	bne.n	800067e <__libc_init_array+0x2e>
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f855 3b04 	ldr.w	r3, [r5], #4
 8000678:	4798      	blx	r3
 800067a:	3601      	adds	r6, #1
 800067c:	e7ee      	b.n	800065c <__libc_init_array+0xc>
 800067e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000682:	4798      	blx	r3
 8000684:	3601      	adds	r6, #1
 8000686:	e7f2      	b.n	800066e <__libc_init_array+0x1e>
 8000688:	080006b0 	.word	0x080006b0
 800068c:	080006b0 	.word	0x080006b0
 8000690:	080006b0 	.word	0x080006b0
 8000694:	080006b4 	.word	0x080006b4

08000698 <_init>:
 8000698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069a:	bf00      	nop
 800069c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069e:	bc08      	pop	{r3}
 80006a0:	469e      	mov	lr, r3
 80006a2:	4770      	bx	lr

080006a4 <_fini>:
 80006a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a6:	bf00      	nop
 80006a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006aa:	bc08      	pop	{r3}
 80006ac:	469e      	mov	lr, r3
 80006ae:	4770      	bx	lr
